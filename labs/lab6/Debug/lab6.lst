
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cd0  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000ea0  0c103cd0  0c103cd0  0000bcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0c104b70  0c104b70  0000cb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000000c  0c104b78  0c104b78  0000cb78  2**2
                  ALLOC
  4 .debug_abbrev 00000618  00000000  00000000  0000cb78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fe2  00000000  00000000  0000d190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000009cd  00000000  00000000  0000e172  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_macinfo 0002232d  00000000  00000000  0000eb3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000ef4  00000000  00000000  00030e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000065d  00000000  00000000  00031d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000153  00000000  00000000  000323bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000e0  00000000  00000000  00032510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000634  00000000  00000000  000325f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000002a  00000000  00000000  00032c24  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000032  00000000  00000000  00032c4e  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000ca4  00000000  00000000  00032c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:
volatile boolean flagTimer0;
volatile boolean flagKeypad;
volatile boolean flagPbs;

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd008 	sub	sp, sp, #8
    uint16 ms, ticks, time;
    uint8 scancode;

    sys_init();
 c100010:	eb0004e7 	bl	c1013b4 <sys_init>
    uart0_init();
 c100014:	eb000ab9 	bl	c102b00 <uart0_init>
    timers_init();
 c100018:	eb000824 	bl	c1020b0 <timers_init>
    keypad_init();
 c10001c:	eb00038f 	bl	c100e60 <keypad_init>
    pbs_init();
 c100020:	eb000410 	bl	c101068 <pbs_init>
    
      /************************************/

    uart0_puts( "\n\n" );
 c100024:	e59f0918 	ldr	r0, [pc, #2328]	; c100944 <main+0x944>
 c100028:	eb000af7 	bl	c102c0c <uart0_puts>
    uart0_puts( "TEST DE TEMPORIZADORES\n" );
 c10002c:	e59f0914 	ldr	r0, [pc, #2324]	; c100948 <main+0x948>
 c100030:	eb000af5 	bl	c102c0c <uart0_puts>
    uart0_puts( "----------------------\n\n" );
 c100034:	e59f0910 	ldr	r0, [pc, #2320]	; c10094c <main+0x94c>
 c100038:	eb000af3 	bl	c102c0c <uart0_puts>
    
    if( ((PLLCON & ~(0x3 << 10 ) & ~(0x3 << 2)) != 0x38021) || ((CLKSLOW & ~(0xf)) != 0) )
 c10003c:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c100040:	e5933000 	ldr	r3, [r3]
 c100044:	e3c33b03 	bic	r3, r3, #3072	; 0xc00
 c100048:	e3c3300c 	bic	r3, r3, #12
 c10004c:	e59f28fc 	ldr	r2, [pc, #2300]	; c100950 <main+0x950>
 c100050:	e1530002 	cmp	r3, r2
 c100054:	1a000004 	bne	c10006c <main+0x6c>
 c100058:	e59f38f4 	ldr	r3, [pc, #2292]	; c100954 <main+0x954>
 c10005c:	e5933000 	ldr	r3, [r3]
 c100060:	e3c3300f 	bic	r3, r3, #15
 c100064:	e3530000 	cmp	r3, #0
 c100068:	0a000002 	beq	c100078 <main+0x78>
    {
        uart0_puts( "  - Error en la configuración del gestor de reloj y energia\n" );
 c10006c:	e59f08e4 	ldr	r0, [pc, #2276]	; c100958 <main+0x958>
 c100070:	eb000ae5 	bl	c102c0c <uart0_puts>
        while( 1 );
 c100074:	eafffffe 	b	c100074 <main+0x74>
    } 

    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de un bucle con 1 s de tiempo de ejecución aproximada...\n" );
 c100078:	e59f08dc 	ldr	r0, [pc, #2268]	; c10095c <main+0x95c>
 c10007c:	eb000ae2 	bl	c102c0c <uart0_puts>
    timer3_start() ;
 c100080:	eb000927 	bl	c102524 <timer3_start>
    one_second_loop();
 c100084:	eb000260 	bl	c100a0c <one_second_loop>
    ms = timer3_stop() / 10;
 c100088:	eb000951 	bl	c1025d4 <timer3_stop>
 c10008c:	e1a03000 	mov	r3, r0
 c100090:	e1a02003 	mov	r2, r3
 c100094:	e59f38c4 	ldr	r3, [pc, #2244]	; c100960 <main+0x960>
 c100098:	e0831392 	umull	r1, r3, r2, r3
 c10009c:	e1a031a3 	lsr	r3, r3, #3
 c1000a0:	e14b31b0 	strh	r3, [fp, #-16]
    uart0_puts( "    ... retardo medido: " );
 c1000a4:	e59f08b8 	ldr	r0, [pc, #2232]	; c100964 <main+0x964>
 c1000a8:	eb000ad7 	bl	c102c0c <uart0_puts>
    uart0_putint( ms );
 c1000ac:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1000b0:	e1a00003 	mov	r0, r3
 c1000b4:	eb000aee 	bl	c102c74 <uart0_putint>
    uart0_puts( " ms\n" );
 c1000b8:	e59f08a8 	ldr	r0, [pc, #2216]	; c100968 <main+0x968>
 c1000bc:	eb000ad2 	bl	c102c0c <uart0_puts>
   
    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por sw_delay_ms()...\n" );
 c1000c0:	e59f08a4 	ldr	r0, [pc, #2212]	; c10096c <main+0x96c>
 c1000c4:	eb000ad0 	bl	c102c0c <uart0_puts>
    timer3_start() ;
 c1000c8:	eb000915 	bl	c102524 <timer3_start>
    sw_delay_ms( 1000 );
 c1000cc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
 c1000d0:	eb0008a5 	bl	c10236c <sw_delay_ms>
    ms = timer3_stop() / 10;
 c1000d4:	eb00093e 	bl	c1025d4 <timer3_stop>
 c1000d8:	e1a03000 	mov	r3, r0
 c1000dc:	e1a02003 	mov	r2, r3
 c1000e0:	e59f3878 	ldr	r3, [pc, #2168]	; c100960 <main+0x960>
 c1000e4:	e0831392 	umull	r1, r3, r2, r3
 c1000e8:	e1a031a3 	lsr	r3, r3, #3
 c1000ec:	e14b31b0 	strh	r3, [fp, #-16]
    uart0_puts( "    ... retardo medido: " );
 c1000f0:	e59f086c 	ldr	r0, [pc, #2156]	; c100964 <main+0x964>
 c1000f4:	eb000ac4 	bl	c102c0c <uart0_puts>
    uart0_putint( ms );
 c1000f8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1000fc:	e1a00003 	mov	r0, r3
 c100100:	eb000adb 	bl	c102c74 <uart0_putint>
    uart0_puts( " ms\n" );
 c100104:	e59f085c 	ldr	r0, [pc, #2140]	; c100968 <main+0x968>
 c100108:	eb000abf 	bl	c102c0c <uart0_puts>
   
    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por sw_delay_s()...\n" );
 c10010c:	e59f085c 	ldr	r0, [pc, #2140]	; c100970 <main+0x970>
 c100110:	eb000abd 	bl	c102c0c <uart0_puts>
    timer3_start() ;
 c100114:	eb000902 	bl	c102524 <timer3_start>
    sw_delay_s( 1 );
 c100118:	e3a00001 	mov	r0, #1
 c10011c:	eb0008ea 	bl	c1024cc <sw_delay_s>
    ms = timer3_stop() / 10;
 c100120:	eb00092b 	bl	c1025d4 <timer3_stop>
 c100124:	e1a03000 	mov	r3, r0
 c100128:	e1a02003 	mov	r2, r3
 c10012c:	e59f382c 	ldr	r3, [pc, #2092]	; c100960 <main+0x960>
 c100130:	e0831392 	umull	r1, r3, r2, r3
 c100134:	e1a031a3 	lsr	r3, r3, #3
 c100138:	e14b31b0 	strh	r3, [fp, #-16]
    uart0_puts( "    ... retardo medido: " );
 c10013c:	e59f0820 	ldr	r0, [pc, #2080]	; c100964 <main+0x964>
 c100140:	eb000ab1 	bl	c102c0c <uart0_puts>
    uart0_putint( ms );
 c100144:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100148:	e1a00003 	mov	r0, r3
 c10014c:	eb000ac8 	bl	c102c74 <uart0_putint>
    uart0_puts( " ms\n" );
 c100150:	e59f0810 	ldr	r0, [pc, #2064]	; c100968 <main+0x968>
 c100154:	eb000aac 	bl	c102c0c <uart0_puts>
    
    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_ms() en modo TIMER_ONE_SHOT...\n" );
 c100158:	e59f0814 	ldr	r0, [pc, #2068]	; c100974 <main+0x974>
 c10015c:	eb000aaa 	bl	c102c0c <uart0_puts>
    timer3_start() ;
 c100160:	eb0008ef 	bl	c102524 <timer3_start>
    timer0_open_ms( isr_timer0, 1000, TIMER_ONE_SHOT );
 c100164:	e59f080c 	ldr	r0, [pc, #2060]	; c100978 <main+0x978>
 c100168:	e3a01ffa 	mov	r1, #1000	; 0x3e8
 c10016c:	e3a02000 	mov	r2, #0
 c100170:	eb0009fa 	bl	c102960 <timer0_open_ms>
    flagTimer0 = FALSE;
 c100174:	e59f3800 	ldr	r3, [pc, #2048]	; c10097c <main+0x97c>
 c100178:	e3a02000 	mov	r2, #0
 c10017c:	e5c32000 	strb	r2, [r3]
    while( !flagTimer0 );
 c100180:	e1a00000 	nop			; (mov r0, r0)
 c100184:	e59f37f0 	ldr	r3, [pc, #2032]	; c10097c <main+0x97c>
 c100188:	e5d33000 	ldrb	r3, [r3]
 c10018c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100190:	e3530000 	cmp	r3, #0
 c100194:	0afffffa 	beq	c100184 <main+0x184>
    ms = timer3_stop() / 10;
 c100198:	eb00090d 	bl	c1025d4 <timer3_stop>
 c10019c:	e1a03000 	mov	r3, r0
 c1001a0:	e1a02003 	mov	r2, r3
 c1001a4:	e59f37b4 	ldr	r3, [pc, #1972]	; c100960 <main+0x960>
 c1001a8:	e0831392 	umull	r1, r3, r2, r3
 c1001ac:	e1a031a3 	lsr	r3, r3, #3
 c1001b0:	e14b31b0 	strh	r3, [fp, #-16]
    timer0_close();
 c1001b4:	eb000a2c 	bl	c102a6c <timer0_close>
    uart0_puts( "    ... retardo medido: " );
 c1001b8:	e59f07a4 	ldr	r0, [pc, #1956]	; c100964 <main+0x964>
 c1001bc:	eb000a92 	bl	c102c0c <uart0_puts>
    uart0_putint( ms );
 c1001c0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1001c4:	e1a00003 	mov	r0, r3
 c1001c8:	eb000aa9 	bl	c102c74 <uart0_putint>
    uart0_puts( " ms\n" );  
 c1001cc:	e59f0794 	ldr	r0, [pc, #1940]	; c100968 <main+0x968>
 c1001d0:	eb000a8d 	bl	c102c0c <uart0_puts>
    
    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_ms() en modo TIMER_INTERVAL...\n" );
 c1001d4:	e59f07a4 	ldr	r0, [pc, #1956]	; c100980 <main+0x980>
 c1001d8:	eb000a8b 	bl	c102c0c <uart0_puts>
    timer3_start() ;
 c1001dc:	eb0008d0 	bl	c102524 <timer3_start>
    timer0_open_ms( isr_timer0, 10, TIMER_INTERVAL );
 c1001e0:	e59f0790 	ldr	r0, [pc, #1936]	; c100978 <main+0x978>
 c1001e4:	e3a0100a 	mov	r1, #10
 c1001e8:	e3a02001 	mov	r2, #1
 c1001ec:	eb0009db 	bl	c102960 <timer0_open_ms>
    flagTimer0 = FALSE;
 c1001f0:	e59f3784 	ldr	r3, [pc, #1924]	; c10097c <main+0x97c>
 c1001f4:	e3a02000 	mov	r2, #0
 c1001f8:	e5c32000 	strb	r2, [r3]
    ticks = 0;
 c1001fc:	e3a03000 	mov	r3, #0
 c100200:	e14b30be 	strh	r3, [fp, #-14]
    while( ticks != 100 )
 c100204:	ea00000b 	b	c100238 <main+0x238>
    {
        while( !flagTimer0 );
 c100208:	e1a00000 	nop			; (mov r0, r0)
 c10020c:	e59f3768 	ldr	r3, [pc, #1896]	; c10097c <main+0x97c>
 c100210:	e5d33000 	ldrb	r3, [r3]
 c100214:	e20330ff 	and	r3, r3, #255	; 0xff
 c100218:	e3530000 	cmp	r3, #0
 c10021c:	0afffffa 	beq	c10020c <main+0x20c>
        flagTimer0 = FALSE;
 c100220:	e59f3754 	ldr	r3, [pc, #1876]	; c10097c <main+0x97c>
 c100224:	e3a02000 	mov	r2, #0
 c100228:	e5c32000 	strb	r2, [r3]
        ticks++;
 c10022c:	e15b30be 	ldrh	r3, [fp, #-14]
 c100230:	e2833001 	add	r3, r3, #1
 c100234:	e14b30be 	strh	r3, [fp, #-14]
    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_ms() en modo TIMER_INTERVAL...\n" );
    timer3_start() ;
    timer0_open_ms( isr_timer0, 10, TIMER_INTERVAL );
    flagTimer0 = FALSE;
    ticks = 0;
    while( ticks != 100 )
 c100238:	e15b30be 	ldrh	r3, [fp, #-14]
 c10023c:	e3530064 	cmp	r3, #100	; 0x64
 c100240:	1afffff0 	bne	c100208 <main+0x208>
    {
        while( !flagTimer0 );
        flagTimer0 = FALSE;
        ticks++;
    }
    ms = timer3_stop() / 10;
 c100244:	eb0008e2 	bl	c1025d4 <timer3_stop>
 c100248:	e1a03000 	mov	r3, r0
 c10024c:	e1a02003 	mov	r2, r3
 c100250:	e59f3708 	ldr	r3, [pc, #1800]	; c100960 <main+0x960>
 c100254:	e0831392 	umull	r1, r3, r2, r3
 c100258:	e1a031a3 	lsr	r3, r3, #3
 c10025c:	e14b31b0 	strh	r3, [fp, #-16]
    timer0_close();
 c100260:	eb000a01 	bl	c102a6c <timer0_close>
    uart0_puts( "    ... retardo medido: " );
 c100264:	e59f06f8 	ldr	r0, [pc, #1784]	; c100964 <main+0x964>
 c100268:	eb000a67 	bl	c102c0c <uart0_puts>
    uart0_putint( ms );
 c10026c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100270:	e1a00003 	mov	r0, r3
 c100274:	eb000a7e 	bl	c102c74 <uart0_putint>
    uart0_puts( " ms\n" ); 
 c100278:	e59f06e8 	ldr	r0, [pc, #1768]	; c100968 <main+0x968>
 c10027c:	eb000a62 	bl	c102c0c <uart0_puts>

    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_tick() con tps=1...\n" );
 c100280:	e59f06fc 	ldr	r0, [pc, #1788]	; c100984 <main+0x984>
 c100284:	eb000a60 	bl	c102c0c <uart0_puts>
    timer3_start() ;
 c100288:	eb0008a5 	bl	c102524 <timer3_start>
    timer0_open_tick( isr_timer0, 1 );
 c10028c:	e59f06e4 	ldr	r0, [pc, #1764]	; c100978 <main+0x978>
 c100290:	e3a01001 	mov	r1, #1
 c100294:	eb000920 	bl	c10271c <timer0_open_tick>
    flagTimer0 = FALSE;
 c100298:	e59f36dc 	ldr	r3, [pc, #1756]	; c10097c <main+0x97c>
 c10029c:	e3a02000 	mov	r2, #0
 c1002a0:	e5c32000 	strb	r2, [r3]
    while( !flagTimer0 );
 c1002a4:	e1a00000 	nop			; (mov r0, r0)
 c1002a8:	e59f36cc 	ldr	r3, [pc, #1740]	; c10097c <main+0x97c>
 c1002ac:	e5d33000 	ldrb	r3, [r3]
 c1002b0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1002b4:	e3530000 	cmp	r3, #0
 c1002b8:	0afffffa 	beq	c1002a8 <main+0x2a8>
    ms = timer3_stop() / 10;
 c1002bc:	eb0008c4 	bl	c1025d4 <timer3_stop>
 c1002c0:	e1a03000 	mov	r3, r0
 c1002c4:	e1a02003 	mov	r2, r3
 c1002c8:	e59f3690 	ldr	r3, [pc, #1680]	; c100960 <main+0x960>
 c1002cc:	e0831392 	umull	r1, r3, r2, r3
 c1002d0:	e1a031a3 	lsr	r3, r3, #3
 c1002d4:	e14b31b0 	strh	r3, [fp, #-16]
    timer0_close();
 c1002d8:	eb0009e3 	bl	c102a6c <timer0_close>
    uart0_puts( "    ... retardo medido: " );
 c1002dc:	e59f0680 	ldr	r0, [pc, #1664]	; c100964 <main+0x964>
 c1002e0:	eb000a49 	bl	c102c0c <uart0_puts>
    uart0_putint( ms );
 c1002e4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1002e8:	e1a00003 	mov	r0, r3
 c1002ec:	eb000a60 	bl	c102c74 <uart0_putint>
    uart0_puts( " ms\n" ); 
 c1002f0:	e59f0670 	ldr	r0, [pc, #1648]	; c100968 <main+0x968>
 c1002f4:	eb000a44 	bl	c102c0c <uart0_puts>

    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_tick() con tps=100...\n" );
 c1002f8:	e59f0688 	ldr	r0, [pc, #1672]	; c100988 <main+0x988>
 c1002fc:	eb000a42 	bl	c102c0c <uart0_puts>
    timer3_start() ;
 c100300:	eb000887 	bl	c102524 <timer3_start>
    timer0_open_tick( isr_timer0, 100 );
 c100304:	e59f066c 	ldr	r0, [pc, #1644]	; c100978 <main+0x978>
 c100308:	e3a01064 	mov	r1, #100	; 0x64
 c10030c:	eb000902 	bl	c10271c <timer0_open_tick>
    flagTimer0 = FALSE;
 c100310:	e59f3664 	ldr	r3, [pc, #1636]	; c10097c <main+0x97c>
 c100314:	e3a02000 	mov	r2, #0
 c100318:	e5c32000 	strb	r2, [r3]
    ticks = 0;
 c10031c:	e3a03000 	mov	r3, #0
 c100320:	e14b30be 	strh	r3, [fp, #-14]
    while( ticks != 100 )
 c100324:	ea00000b 	b	c100358 <main+0x358>
    {
        while( !flagTimer0 );
 c100328:	e1a00000 	nop			; (mov r0, r0)
 c10032c:	e59f3648 	ldr	r3, [pc, #1608]	; c10097c <main+0x97c>
 c100330:	e5d33000 	ldrb	r3, [r3]
 c100334:	e20330ff 	and	r3, r3, #255	; 0xff
 c100338:	e3530000 	cmp	r3, #0
 c10033c:	0afffffa 	beq	c10032c <main+0x32c>
        flagTimer0 = FALSE;
 c100340:	e59f3634 	ldr	r3, [pc, #1588]	; c10097c <main+0x97c>
 c100344:	e3a02000 	mov	r2, #0
 c100348:	e5c32000 	strb	r2, [r3]
        ticks++;
 c10034c:	e15b30be 	ldrh	r3, [fp, #-14]
 c100350:	e2833001 	add	r3, r3, #1
 c100354:	e14b30be 	strh	r3, [fp, #-14]
    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_tick() con tps=100...\n" );
    timer3_start() ;
    timer0_open_tick( isr_timer0, 100 );
    flagTimer0 = FALSE;
    ticks = 0;
    while( ticks != 100 )
 c100358:	e15b30be 	ldrh	r3, [fp, #-14]
 c10035c:	e3530064 	cmp	r3, #100	; 0x64
 c100360:	1afffff0 	bne	c100328 <main+0x328>
    {
        while( !flagTimer0 );
        flagTimer0 = FALSE;
        ticks++;
    }
    ms = timer3_stop() / 10;
 c100364:	eb00089a 	bl	c1025d4 <timer3_stop>
 c100368:	e1a03000 	mov	r3, r0
 c10036c:	e1a02003 	mov	r2, r3
 c100370:	e59f35e8 	ldr	r3, [pc, #1512]	; c100960 <main+0x960>
 c100374:	e0831392 	umull	r1, r3, r2, r3
 c100378:	e1a031a3 	lsr	r3, r3, #3
 c10037c:	e14b31b0 	strh	r3, [fp, #-16]
    timer0_close();
 c100380:	eb0009b9 	bl	c102a6c <timer0_close>
    uart0_puts( "    ... retardo medido: " );
 c100384:	e59f05d8 	ldr	r0, [pc, #1496]	; c100964 <main+0x964>
 c100388:	eb000a1f 	bl	c102c0c <uart0_puts>
    uart0_putint( ms );
 c10038c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100390:	e1a00003 	mov	r0, r3
 c100394:	eb000a36 	bl	c102c74 <uart0_putint>
    uart0_puts( " ms\n" ); 
 c100398:	e59f05c8 	ldr	r0, [pc, #1480]	; c100968 <main+0x968>
 c10039c:	eb000a1a 	bl	c102c0c <uart0_puts>
    //
    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_tick() con tps=1000...\n" );
 c1003a0:	e59f05e4 	ldr	r0, [pc, #1508]	; c10098c <main+0x98c>
 c1003a4:	eb000a18 	bl	c102c0c <uart0_puts>
       timer3_start() ;
 c1003a8:	eb00085d 	bl	c102524 <timer3_start>
       timer0_open_tick( isr_timer0, 1000 );
 c1003ac:	e59f05c4 	ldr	r0, [pc, #1476]	; c100978 <main+0x978>
 c1003b0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
 c1003b4:	eb0008d8 	bl	c10271c <timer0_open_tick>
       flagTimer0 = FALSE;
 c1003b8:	e59f35bc 	ldr	r3, [pc, #1468]	; c10097c <main+0x97c>
 c1003bc:	e3a02000 	mov	r2, #0
 c1003c0:	e5c32000 	strb	r2, [r3]
       ticks = 0;
 c1003c4:	e3a03000 	mov	r3, #0
 c1003c8:	e14b30be 	strh	r3, [fp, #-14]
       while( ticks != 1000 )
 c1003cc:	ea00000b 	b	c100400 <main+0x400>
       {
           while( !flagTimer0 );
 c1003d0:	e1a00000 	nop			; (mov r0, r0)
 c1003d4:	e59f35a0 	ldr	r3, [pc, #1440]	; c10097c <main+0x97c>
 c1003d8:	e5d33000 	ldrb	r3, [r3]
 c1003dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1003e0:	e3530000 	cmp	r3, #0
 c1003e4:	0afffffa 	beq	c1003d4 <main+0x3d4>
           flagTimer0 = FALSE;
 c1003e8:	e59f358c 	ldr	r3, [pc, #1420]	; c10097c <main+0x97c>
 c1003ec:	e3a02000 	mov	r2, #0
 c1003f0:	e5c32000 	strb	r2, [r3]
           ticks++;
 c1003f4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1003f8:	e2833001 	add	r3, r3, #1
 c1003fc:	e14b30be 	strh	r3, [fp, #-14]
    uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_tick() con tps=1000...\n" );
       timer3_start() ;
       timer0_open_tick( isr_timer0, 1000 );
       flagTimer0 = FALSE;
       ticks = 0;
       while( ticks != 1000 )
 c100400:	e15b30be 	ldrh	r3, [fp, #-14]
 c100404:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c100408:	1afffff0 	bne	c1003d0 <main+0x3d0>
       {
           while( !flagTimer0 );
           flagTimer0 = FALSE;
           ticks++;
       }
       ms = timer3_stop() / 10;
 c10040c:	eb000870 	bl	c1025d4 <timer3_stop>
 c100410:	e1a03000 	mov	r3, r0
 c100414:	e1a02003 	mov	r2, r3
 c100418:	e59f3540 	ldr	r3, [pc, #1344]	; c100960 <main+0x960>
 c10041c:	e0831392 	umull	r1, r3, r2, r3
 c100420:	e1a031a3 	lsr	r3, r3, #3
 c100424:	e14b31b0 	strh	r3, [fp, #-16]
       timer0_close();
 c100428:	eb00098f 	bl	c102a6c <timer0_close>
       uart0_puts( "    ... retardo medido: " );
 c10042c:	e59f0530 	ldr	r0, [pc, #1328]	; c100964 <main+0x964>
 c100430:	eb0009f5 	bl	c102c0c <uart0_puts>
       uart0_putint( ms );
 c100434:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100438:	e1a00003 	mov	r0, r3
 c10043c:	eb000a0c 	bl	c102c74 <uart0_putint>
       uart0_puts( " ms\n" );
 c100440:	e59f0520 	ldr	r0, [pc, #1312]	; c100968 <main+0x968>
 c100444:	eb0009f0 	bl	c102c0c <uart0_puts>

       uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_tick() con tps=2000...\n" );
 c100448:	e59f0540 	ldr	r0, [pc, #1344]	; c100990 <main+0x990>
 c10044c:	eb0009ee 	bl	c102c0c <uart0_puts>
          timer3_start() ;
 c100450:	eb000833 	bl	c102524 <timer3_start>
          timer0_open_tick( isr_timer0, 2000 );
 c100454:	e59f051c 	ldr	r0, [pc, #1308]	; c100978 <main+0x978>
 c100458:	e3a01e7d 	mov	r1, #2000	; 0x7d0
 c10045c:	eb0008ae 	bl	c10271c <timer0_open_tick>
          flagTimer0 = FALSE;
 c100460:	e59f3514 	ldr	r3, [pc, #1300]	; c10097c <main+0x97c>
 c100464:	e3a02000 	mov	r2, #0
 c100468:	e5c32000 	strb	r2, [r3]
          ticks = 0;
 c10046c:	e3a03000 	mov	r3, #0
 c100470:	e14b30be 	strh	r3, [fp, #-14]
          while( ticks != 2000 )
 c100474:	ea00000b 	b	c1004a8 <main+0x4a8>
          {
              while( !flagTimer0 );
 c100478:	e1a00000 	nop			; (mov r0, r0)
 c10047c:	e59f34f8 	ldr	r3, [pc, #1272]	; c10097c <main+0x97c>
 c100480:	e5d33000 	ldrb	r3, [r3]
 c100484:	e20330ff 	and	r3, r3, #255	; 0xff
 c100488:	e3530000 	cmp	r3, #0
 c10048c:	0afffffa 	beq	c10047c <main+0x47c>
              flagTimer0 = FALSE;
 c100490:	e59f34e4 	ldr	r3, [pc, #1252]	; c10097c <main+0x97c>
 c100494:	e3a02000 	mov	r2, #0
 c100498:	e5c32000 	strb	r2, [r3]
              ticks++;
 c10049c:	e15b30be 	ldrh	r3, [fp, #-14]
 c1004a0:	e2833001 	add	r3, r3, #1
 c1004a4:	e14b30be 	strh	r3, [fp, #-14]
       uart0_puts( "  - Medida con timer3_start() / timer3_stop() del retardo de 1 s generado por timer0_open_tick() con tps=2000...\n" );
          timer3_start() ;
          timer0_open_tick( isr_timer0, 2000 );
          flagTimer0 = FALSE;
          ticks = 0;
          while( ticks != 2000 )
 c1004a8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1004ac:	e3530e7d 	cmp	r3, #2000	; 0x7d0
 c1004b0:	1afffff0 	bne	c100478 <main+0x478>
          {
              while( !flagTimer0 );
              flagTimer0 = FALSE;
              ticks++;
          }
          ms = timer3_stop() / 10;
 c1004b4:	eb000846 	bl	c1025d4 <timer3_stop>
 c1004b8:	e1a03000 	mov	r3, r0
 c1004bc:	e1a02003 	mov	r2, r3
 c1004c0:	e59f3498 	ldr	r3, [pc, #1176]	; c100960 <main+0x960>
 c1004c4:	e0831392 	umull	r1, r3, r2, r3
 c1004c8:	e1a031a3 	lsr	r3, r3, #3
 c1004cc:	e14b31b0 	strh	r3, [fp, #-16]
          timer0_close();
 c1004d0:	eb000965 	bl	c102a6c <timer0_close>
          uart0_puts( "    ... retardo medido: " );
 c1004d4:	e59f0488 	ldr	r0, [pc, #1160]	; c100964 <main+0x964>
 c1004d8:	eb0009cb 	bl	c102c0c <uart0_puts>
          uart0_putint( ms );
 c1004dc:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1004e0:	e1a00003 	mov	r0, r3
 c1004e4:	eb0009e2 	bl	c102c74 <uart0_putint>
          uart0_puts( " ms\n" );
 c1004e8:	e59f0478 	ldr	r0, [pc, #1144]	; c100968 <main+0x968>
 c1004ec:	eb0009c6 	bl	c102c0c <uart0_puts>
    //
    uart0_puts( "  - Retardo hardware de 5 s usando timer3_delay_ms(): mídalo...\n" );
 c1004f0:	e59f049c 	ldr	r0, [pc, #1180]	; c100994 <main+0x994>
 c1004f4:	eb0009c4 	bl	c102c0c <uart0_puts>
    timer3_delay_ms( 5000 );
 c1004f8:	e59f0498 	ldr	r0, [pc, #1176]	; c100998 <main+0x998>
 c1004fc:	eb000789 	bl	c102328 <timer3_delay_ms>
    uart0_puts( "    ... fin\n" );
 c100500:	e59f0494 	ldr	r0, [pc, #1172]	; c10099c <main+0x99c>
 c100504:	eb0009c0 	bl	c102c0c <uart0_puts>

    uart0_puts( "  - Retardo hardware de 5 s usando timer3_delay_s(): mídalo...\n" );
 c100508:	e59f0490 	ldr	r0, [pc, #1168]	; c1009a0 <main+0x9a0>
 c10050c:	eb0009be 	bl	c102c0c <uart0_puts>
    timer3_delay_s( 5 );    
 c100510:	e3a00005 	mov	r0, #5
 c100514:	eb0007db 	bl	c102488 <timer3_delay_s>
    uart0_puts( "    ... fin\n" );
 c100518:	e59f047c 	ldr	r0, [pc, #1148]	; c10099c <main+0x99c>
 c10051c:	eb0009ba 	bl	c102c0c <uart0_puts>

    uart0_puts( "  - Retardo hardware de 5 s usando timer3_start_timeout(): mídalo...\n" );
 c100520:	e59f047c 	ldr	r0, [pc, #1148]	; c1009a4 <main+0x9a4>
 c100524:	eb0009b8 	bl	c102c0c <uart0_puts>
    timer3_start_timeout( 50000 );
 c100528:	e59f0478 	ldr	r0, [pc, #1144]	; c1009a8 <main+0x9a8>
 c10052c:	eb00083d 	bl	c102628 <timer3_start_timeout>
    while( !timer3_timeout() );
 c100530:	e1a00000 	nop			; (mov r0, r0)
 c100534:	eb000869 	bl	c1026e0 <timer3_timeout>
 c100538:	e1a03000 	mov	r3, r0
 c10053c:	e3530000 	cmp	r3, #0
 c100540:	0afffffb 	beq	c100534 <main+0x534>
    uart0_puts( "    ... fin\n" );
 c100544:	e59f0450 	ldr	r0, [pc, #1104]	; c10099c <main+0x99c>
 c100548:	eb0009af 	bl	c102c0c <uart0_puts>

    /************************************/
    
    uart0_puts( "\n\n" );
 c10054c:	e59f03f0 	ldr	r0, [pc, #1008]	; c100944 <main+0x944>
 c100550:	eb0009ad 	bl	c102c0c <uart0_puts>
    uart0_puts( "TEST DE KEYPAD Y PBS\n" );
 c100554:	e59f0450 	ldr	r0, [pc, #1104]	; c1009ac <main+0x9ac>
 c100558:	eb0009ab 	bl	c102c0c <uart0_puts>
    uart0_puts( "--------------------\n\n" );
 c10055c:	e59f044c 	ldr	r0, [pc, #1100]	; c1009b0 <main+0x9b0>
 c100560:	eb0009a9 	bl	c102c0c <uart0_puts>
    
    if( pb_pressed() )
 c100564:	eb0002dd 	bl	c1010e0 <pb_pressed>
 c100568:	e1a03000 	mov	r3, r0
 c10056c:	e3530000 	cmp	r3, #0
 c100570:	0a000002 	beq	c100580 <main+0x580>
    {
        uart0_puts( "  - Error en la función pb_pressed()\n" );
 c100574:	e59f0438 	ldr	r0, [pc, #1080]	; c1009b4 <main+0x9b4>
 c100578:	eb0009a3 	bl	c102c0c <uart0_puts>
        while( 1 );
 c10057c:	eafffffe 	b	c10057c <main+0x57c>
    }      

    if( keypad_pressed() )
 c100580:	eb000201 	bl	c100d8c <keypad_pressed>
 c100584:	e1a03000 	mov	r3, r0
 c100588:	e3530000 	cmp	r3, #0
 c10058c:	0a000002 	beq	c10059c <main+0x59c>
    {
        uart0_puts( "  - Error en la función keypad_pressed()\n" );
 c100590:	e59f0420 	ldr	r0, [pc, #1056]	; c1009b8 <main+0x9b8>
 c100594:	eb00099c 	bl	c102c0c <uart0_puts>
        while( 1 );
 c100598:	eafffffe 	b	c100598 <main+0x598>
    }      

    uart0_puts( "Lectura del keypad sin espera máxima usando keypad_getchar():\n" );
 c10059c:	e59f0418 	ldr	r0, [pc, #1048]	; c1009bc <main+0x9bc>
 c1005a0:	eb000999 	bl	c102c0c <uart0_puts>
    ticks = 0;
 c1005a4:	e3a03000 	mov	r3, #0
 c1005a8:	e14b30be 	strh	r3, [fp, #-14]
    while( ticks != 5 )
 c1005ac:	ea000013 	b	c100600 <main+0x600>
    {
        switch( scancode = keypad_getchar() )
 c1005b0:	eb000231 	bl	c100e7c <keypad_getchar>
 c1005b4:	e1a03000 	mov	r3, r0
 c1005b8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c1005bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1005c0:	e35300ff 	cmp	r3, #255	; 0xff
 c1005c4:	1a000002 	bne	c1005d4 <main+0x5d4>
        {
            case KEYPAD_FAILURE:
                uart0_puts( "  - Error de lectura\n" );
 c1005c8:	e59f03f0 	ldr	r0, [pc, #1008]	; c1009c0 <main+0x9c0>
 c1005cc:	eb00098e 	bl	c102c0c <uart0_puts>
                break;
 c1005d0:	ea000007 	b	c1005f4 <main+0x5f4>
            default:
                uart0_puts( "  - La tecla 0x" );
 c1005d4:	e59f03e8 	ldr	r0, [pc, #1000]	; c1009c4 <main+0x9c4>
 c1005d8:	eb00098b 	bl	c102c0c <uart0_puts>
                uart0_puthex( scancode );
 c1005dc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1005e0:	e1a00003 	mov	r0, r3
 c1005e4:	eb0009e6 	bl	c102d84 <uart0_puthex>
                uart0_puts( " ha sido presionada\n" );
 c1005e8:	e59f03d8 	ldr	r0, [pc, #984]	; c1009c8 <main+0x9c8>
 c1005ec:	eb000986 	bl	c102c0c <uart0_puts>
                break;
 c1005f0:	e1a00000 	nop			; (mov r0, r0)
        }        
        ticks++;
 c1005f4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1005f8:	e2833001 	add	r3, r3, #1
 c1005fc:	e14b30be 	strh	r3, [fp, #-14]
        while( 1 );
    }      

    uart0_puts( "Lectura del keypad sin espera máxima usando keypad_getchar():\n" );
    ticks = 0;
    while( ticks != 5 )
 c100600:	e15b30be 	ldrh	r3, [fp, #-14]
 c100604:	e3530005 	cmp	r3, #5
 c100608:	1affffe8 	bne	c1005b0 <main+0x5b0>
                break;
        }        
        ticks++;
    }    
          
    uart0_puts( "Lectura del keypad con espera máxima de 5 s usando keypad_timeout_getchar():\n" );
 c10060c:	e59f03b8 	ldr	r0, [pc, #952]	; c1009cc <main+0x9cc>
 c100610:	eb00097d 	bl	c102c0c <uart0_puts>
    ticks = 0;
 c100614:	e3a03000 	mov	r3, #0
 c100618:	e14b30be 	strh	r3, [fp, #-14]
    while( ticks != 5 )
 c10061c:	ea000019 	b	c100688 <main+0x688>
    {
        switch( scancode = keypad_timeout_getchar( 5000 ) )
 c100620:	e59f0370 	ldr	r0, [pc, #880]	; c100998 <main+0x998>
 c100624:	eb00025b 	bl	c100f98 <keypad_timeout_getchar>
 c100628:	e1a03000 	mov	r3, r0
 c10062c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c100630:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100634:	e35300fe 	cmp	r3, #254	; 0xfe
 c100638:	0a000004 	beq	c100650 <main+0x650>
 c10063c:	e35300ff 	cmp	r3, #255	; 0xff
 c100640:	1a000005 	bne	c10065c <main+0x65c>
        {
            case KEYPAD_FAILURE:
                uart0_puts( "  - Error de lectura\n" );
 c100644:	e59f0374 	ldr	r0, [pc, #884]	; c1009c0 <main+0x9c0>
 c100648:	eb00096f 	bl	c102c0c <uart0_puts>
                break;
 c10064c:	ea00000a 	b	c10067c <main+0x67c>
            case KEYPAD_TIMEOUT:
                uart0_puts( "  - Timeout\n" );
 c100650:	e59f0378 	ldr	r0, [pc, #888]	; c1009d0 <main+0x9d0>
 c100654:	eb00096c 	bl	c102c0c <uart0_puts>
                break;
 c100658:	ea000007 	b	c10067c <main+0x67c>
            default:
                uart0_puts( "  - La tecla 0x" );
 c10065c:	e59f0360 	ldr	r0, [pc, #864]	; c1009c4 <main+0x9c4>
 c100660:	eb000969 	bl	c102c0c <uart0_puts>
                uart0_puthex( scancode );
 c100664:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100668:	e1a00003 	mov	r0, r3
 c10066c:	eb0009c4 	bl	c102d84 <uart0_puthex>
                uart0_puts( " ha sido presionada\n" );
 c100670:	e59f0350 	ldr	r0, [pc, #848]	; c1009c8 <main+0x9c8>
 c100674:	eb000964 	bl	c102c0c <uart0_puts>
                break;
 c100678:	e1a00000 	nop			; (mov r0, r0)
        }          
        ticks++;
 c10067c:	e15b30be 	ldrh	r3, [fp, #-14]
 c100680:	e2833001 	add	r3, r3, #1
 c100684:	e14b30be 	strh	r3, [fp, #-14]
        ticks++;
    }    
          
    uart0_puts( "Lectura del keypad con espera máxima de 5 s usando keypad_timeout_getchar():\n" );
    ticks = 0;
    while( ticks != 5 )
 c100688:	e15b30be 	ldrh	r3, [fp, #-14]
 c10068c:	e3530005 	cmp	r3, #5
 c100690:	1affffe2 	bne	c100620 <main+0x620>
                break;
        }          
        ticks++;
    }     
    
    uart0_puts( "Lectura del keypad por interrupción usando keypad_getchartime():\n" );
 c100694:	e59f0338 	ldr	r0, [pc, #824]	; c1009d4 <main+0x9d4>
 c100698:	eb00095b 	bl	c102c0c <uart0_puts>
    keypad_open( isr_keypad );
 c10069c:	e59f0334 	ldr	r0, [pc, #820]	; c1009d8 <main+0x9d8>
 c1006a0:	eb0001c7 	bl	c100dc4 <keypad_open>
    flagKeypad = FALSE;
 c1006a4:	e59f3330 	ldr	r3, [pc, #816]	; c1009dc <main+0x9dc>
 c1006a8:	e3a02000 	mov	r2, #0
 c1006ac:	e5c32000 	strb	r2, [r3]
    ticks = 0;
 c1006b0:	e3a03000 	mov	r3, #0
 c1006b4:	e14b30be 	strh	r3, [fp, #-14]
    while( ticks != 5 )
 c1006b8:	ea000022 	b	c100748 <main+0x748>
    {
        while( !flagKeypad );
 c1006bc:	e1a00000 	nop			; (mov r0, r0)
 c1006c0:	e59f3314 	ldr	r3, [pc, #788]	; c1009dc <main+0x9dc>
 c1006c4:	e5d33000 	ldrb	r3, [r3]
 c1006c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1006cc:	e3530000 	cmp	r3, #0
 c1006d0:	0afffffa 	beq	c1006c0 <main+0x6c0>
        flagKeypad = FALSE;
 c1006d4:	e59f3300 	ldr	r3, [pc, #768]	; c1009dc <main+0x9dc>
 c1006d8:	e3a02000 	mov	r2, #0
 c1006dc:	e5c32000 	strb	r2, [r3]
        switch( scancode = keypad_getchartime( &time ) )
 c1006e0:	e24b3014 	sub	r3, fp, #20
 c1006e4:	e1a00003 	mov	r0, r3
 c1006e8:	eb000200 	bl	c100ef0 <keypad_getchartime>
 c1006ec:	e1a03000 	mov	r3, r0
 c1006f0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c1006f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1006f8:	e35300ff 	cmp	r3, #255	; 0xff
 c1006fc:	1a000002 	bne	c10070c <main+0x70c>
        {
            case KEYPAD_FAILURE:
                uart0_puts( "  - Error de lectura\n" );
 c100700:	e59f02b8 	ldr	r0, [pc, #696]	; c1009c0 <main+0x9c0>
 c100704:	eb000940 	bl	c102c0c <uart0_puts>
                break;
 c100708:	ea00000b 	b	c10073c <main+0x73c>
            default:
                uart0_puts( "  - La tecla 0x" );
 c10070c:	e59f02b0 	ldr	r0, [pc, #688]	; c1009c4 <main+0x9c4>
 c100710:	eb00093d 	bl	c102c0c <uart0_puts>
                uart0_puthex( scancode );
 c100714:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100718:	e1a00003 	mov	r0, r3
 c10071c:	eb000998 	bl	c102d84 <uart0_puthex>
                uart0_puts( " ha sido presionada durante " );
 c100720:	e59f02b8 	ldr	r0, [pc, #696]	; c1009e0 <main+0x9e0>
 c100724:	eb000938 	bl	c102c0c <uart0_puts>
                uart0_putint( time );
 c100728:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c10072c:	e1a00003 	mov	r0, r3
 c100730:	eb00094f 	bl	c102c74 <uart0_putint>
                uart0_puts( " ms \n" );                
 c100734:	e59f02a8 	ldr	r0, [pc, #680]	; c1009e4 <main+0x9e4>
 c100738:	eb000933 	bl	c102c0c <uart0_puts>
        }        
        ticks++;
 c10073c:	e15b30be 	ldrh	r3, [fp, #-14]
 c100740:	e2833001 	add	r3, r3, #1
 c100744:	e14b30be 	strh	r3, [fp, #-14]
    
    uart0_puts( "Lectura del keypad por interrupción usando keypad_getchartime():\n" );
    keypad_open( isr_keypad );
    flagKeypad = FALSE;
    ticks = 0;
    while( ticks != 5 )
 c100748:	e15b30be 	ldrh	r3, [fp, #-14]
 c10074c:	e3530005 	cmp	r3, #5
 c100750:	1affffd9 	bne	c1006bc <main+0x6bc>
                uart0_putint( time );
                uart0_puts( " ms \n" );                
        }        
        ticks++;
    } 
    keypad_close();
 c100754:	eb0001b0 	bl	c100e1c <keypad_close>
    
    uart0_puts( "Lectura de pulsadores sin espera máxima usando pb_getchar():\n" );
 c100758:	e59f0288 	ldr	r0, [pc, #648]	; c1009e8 <main+0x9e8>
 c10075c:	eb00092a 	bl	c102c0c <uart0_puts>
    ticks = 0;
 c100760:	e3a03000 	mov	r3, #0
 c100764:	e14b30be 	strh	r3, [fp, #-14]
    while( ticks != 5 )
 c100768:	ea000014 	b	c1007c0 <main+0x7c0>
    {
        switch( pb_getchar() )
 c10076c:	eb000269 	bl	c101118 <pb_getchar>
 c100770:	e1a03000 	mov	r3, r0
 c100774:	e3530080 	cmp	r3, #128	; 0x80
 c100778:	0a00000a 	beq	c1007a8 <main+0x7a8>
 c10077c:	e35300ff 	cmp	r3, #255	; 0xff
 c100780:	0a000002 	beq	c100790 <main+0x790>
 c100784:	e3530040 	cmp	r3, #64	; 0x40
 c100788:	0a000003 	beq	c10079c <main+0x79c>
 c10078c:	ea000008 	b	c1007b4 <main+0x7b4>
        {
            case PB_FAILURE:
                uart0_puts( "  - Error de lectura\n" );
 c100790:	e59f0228 	ldr	r0, [pc, #552]	; c1009c0 <main+0x9c0>
 c100794:	eb00091c 	bl	c102c0c <uart0_puts>
                break;
 c100798:	ea000005 	b	c1007b4 <main+0x7b4>
            case PB_LEFT:
                uart0_puts( "  - El pulsador izquierdo ha sido presionado\n" );
 c10079c:	e59f0248 	ldr	r0, [pc, #584]	; c1009ec <main+0x9ec>
 c1007a0:	eb000919 	bl	c102c0c <uart0_puts>
                break;
 c1007a4:	ea000002 	b	c1007b4 <main+0x7b4>
            case PB_RIGHT:
                uart0_puts( "  - El pulsador derecho ha sido presionado\n" );
 c1007a8:	e59f0240 	ldr	r0, [pc, #576]	; c1009f0 <main+0x9f0>
 c1007ac:	eb000916 	bl	c102c0c <uart0_puts>
                break;
 c1007b0:	e1a00000 	nop			; (mov r0, r0)
        }        
        ticks++;
 c1007b4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1007b8:	e2833001 	add	r3, r3, #1
 c1007bc:	e14b30be 	strh	r3, [fp, #-14]
    } 
    keypad_close();
    
    uart0_puts( "Lectura de pulsadores sin espera máxima usando pb_getchar():\n" );
    ticks = 0;
    while( ticks != 5 )
 c1007c0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1007c4:	e3530005 	cmp	r3, #5
 c1007c8:	1affffe7 	bne	c10076c <main+0x76c>
                break;
        }        
        ticks++;
    }    
    
    uart0_puts( "Lectura de pulsadores con espera máxima de 5 s usando pb_timeout_getchar():\n" );
 c1007cc:	e59f0220 	ldr	r0, [pc, #544]	; c1009f4 <main+0x9f4>
 c1007d0:	eb00090d 	bl	c102c0c <uart0_puts>
    ticks = 0;
 c1007d4:	e3a03000 	mov	r3, #0
 c1007d8:	e14b30be 	strh	r3, [fp, #-14]
    while( ticks != 5 )
 c1007dc:	ea00001c 	b	c100854 <main+0x854>
    {
        switch( pb_timeout_getchar( 5000 ) )
 c1007e0:	e59f01b0 	ldr	r0, [pc, #432]	; c100998 <main+0x998>
 c1007e4:	eb000268 	bl	c10118c <pb_timeout_getchar>
 c1007e8:	e1a03000 	mov	r3, r0
 c1007ec:	e3530080 	cmp	r3, #128	; 0x80
 c1007f0:	0a000011 	beq	c10083c <main+0x83c>
 c1007f4:	e3530080 	cmp	r3, #128	; 0x80
 c1007f8:	ca000002 	bgt	c100808 <main+0x808>
 c1007fc:	e3530040 	cmp	r3, #64	; 0x40
 c100800:	0a00000a 	beq	c100830 <main+0x830>
 c100804:	ea00000f 	b	c100848 <main+0x848>
 c100808:	e35300fe 	cmp	r3, #254	; 0xfe
 c10080c:	0a000004 	beq	c100824 <main+0x824>
 c100810:	e35300ff 	cmp	r3, #255	; 0xff
 c100814:	1a00000b 	bne	c100848 <main+0x848>
        {
            case PB_FAILURE:
                uart0_puts( "  - Error de lectura\n" );
 c100818:	e59f01a0 	ldr	r0, [pc, #416]	; c1009c0 <main+0x9c0>
 c10081c:	eb0008fa 	bl	c102c0c <uart0_puts>
                break;
 c100820:	ea000008 	b	c100848 <main+0x848>
            case PB_TIMEOUT:
                uart0_puts( "  - Timeout\n" );
 c100824:	e59f01a4 	ldr	r0, [pc, #420]	; c1009d0 <main+0x9d0>
 c100828:	eb0008f7 	bl	c102c0c <uart0_puts>
                break;
 c10082c:	ea000005 	b	c100848 <main+0x848>
            case PB_LEFT:
                uart0_puts( "  - El pulsador izquierdo ha sido presionado\n" );
 c100830:	e59f01b4 	ldr	r0, [pc, #436]	; c1009ec <main+0x9ec>
 c100834:	eb0008f4 	bl	c102c0c <uart0_puts>
                break;
 c100838:	ea000002 	b	c100848 <main+0x848>
            case PB_RIGHT:
                uart0_puts( "  - El pulsador derecho ha sido presionado\n" );
 c10083c:	e59f01ac 	ldr	r0, [pc, #428]	; c1009f0 <main+0x9f0>
 c100840:	eb0008f1 	bl	c102c0c <uart0_puts>
                break;
 c100844:	e1a00000 	nop			; (mov r0, r0)
        }          
        ticks++;
 c100848:	e15b30be 	ldrh	r3, [fp, #-14]
 c10084c:	e2833001 	add	r3, r3, #1
 c100850:	e14b30be 	strh	r3, [fp, #-14]
        ticks++;
    }    
    
    uart0_puts( "Lectura de pulsadores con espera máxima de 5 s usando pb_timeout_getchar():\n" );
    ticks = 0;
    while( ticks != 5 )
 c100854:	e15b30be 	ldrh	r3, [fp, #-14]
 c100858:	e3530005 	cmp	r3, #5
 c10085c:	1affffdf 	bne	c1007e0 <main+0x7e0>
                break;
        }          
        ticks++;
    }     
       
    uart0_puts( "Lectura de pulsadores por interrupción usando pb_getchartime():\n" );
 c100860:	e59f0190 	ldr	r0, [pc, #400]	; c1009f8 <main+0x9f8>
 c100864:	eb0008e8 	bl	c102c0c <uart0_puts>
    pbs_open( isr_pbs );
 c100868:	e59f018c 	ldr	r0, [pc, #396]	; c1009fc <main+0x9fc>
 c10086c:	eb0002a5 	bl	c101308 <pbs_open>
    flagPbs = FALSE;
 c100870:	e59f3188 	ldr	r3, [pc, #392]	; c100a00 <main+0xa00>
 c100874:	e3a02000 	mov	r2, #0
 c100878:	e5c32000 	strb	r2, [r3]
    ticks = 0;
 c10087c:	e3a03000 	mov	r3, #0
 c100880:	e14b30be 	strh	r3, [fp, #-14]
    while( ticks != 5 )
 c100884:	ea000029 	b	c100930 <main+0x930>
    {
        while( !flagKeypad );
 c100888:	e1a00000 	nop			; (mov r0, r0)
 c10088c:	e59f3148 	ldr	r3, [pc, #328]	; c1009dc <main+0x9dc>
 c100890:	e5d33000 	ldrb	r3, [r3]
 c100894:	e20330ff 	and	r3, r3, #255	; 0xff
 c100898:	e3530000 	cmp	r3, #0
 c10089c:	0afffffa 	beq	c10088c <main+0x88c>
        flagPbs = FALSE;
 c1008a0:	e59f3158 	ldr	r3, [pc, #344]	; c100a00 <main+0xa00>
 c1008a4:	e3a02000 	mov	r2, #0
 c1008a8:	e5c32000 	strb	r2, [r3]
        switch( pb_getchartime( &time ) )
 c1008ac:	e24b3014 	sub	r3, fp, #20
 c1008b0:	e1a00003 	mov	r0, r3
 c1008b4:	eb000269 	bl	c101260 <pb_getchartime>
 c1008b8:	e1a03000 	mov	r3, r0
 c1008bc:	e3530080 	cmp	r3, #128	; 0x80
 c1008c0:	0a00000f 	beq	c100904 <main+0x904>
 c1008c4:	e35300ff 	cmp	r3, #255	; 0xff
 c1008c8:	0a000002 	beq	c1008d8 <main+0x8d8>
 c1008cc:	e3530040 	cmp	r3, #64	; 0x40
 c1008d0:	0a000003 	beq	c1008e4 <main+0x8e4>
 c1008d4:	ea000012 	b	c100924 <main+0x924>
        {
            case PB_FAILURE:
                uart0_puts( "  - Error de lectura\n" );
 c1008d8:	e59f00e0 	ldr	r0, [pc, #224]	; c1009c0 <main+0x9c0>
 c1008dc:	eb0008ca 	bl	c102c0c <uart0_puts>
                break;
 c1008e0:	ea00000f 	b	c100924 <main+0x924>
            case PB_LEFT:
                uart0_puts( "  - El pulsador izquierdo ha sido presionado durante " );
 c1008e4:	e59f0118 	ldr	r0, [pc, #280]	; c100a04 <main+0xa04>
 c1008e8:	eb0008c7 	bl	c102c0c <uart0_puts>
                uart0_putint( time );
 c1008ec:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c1008f0:	e1a00003 	mov	r0, r3
 c1008f4:	eb0008de 	bl	c102c74 <uart0_putint>
                uart0_puts( " ms \n" );
 c1008f8:	e59f00e4 	ldr	r0, [pc, #228]	; c1009e4 <main+0x9e4>
 c1008fc:	eb0008c2 	bl	c102c0c <uart0_puts>
                break;
 c100900:	ea000007 	b	c100924 <main+0x924>
            case PB_RIGHT:
                uart0_puts( "  - El pulsador derecho ha sido presionado durante " );
 c100904:	e59f00fc 	ldr	r0, [pc, #252]	; c100a08 <main+0xa08>
 c100908:	eb0008bf 	bl	c102c0c <uart0_puts>
                uart0_putint( time );
 c10090c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100910:	e1a00003 	mov	r0, r3
 c100914:	eb0008d6 	bl	c102c74 <uart0_putint>
                uart0_puts( " ms \n" );
 c100918:	e59f00c4 	ldr	r0, [pc, #196]	; c1009e4 <main+0x9e4>
 c10091c:	eb0008ba 	bl	c102c0c <uart0_puts>
                break;
 c100920:	e1a00000 	nop			; (mov r0, r0)

        }       
        ticks++;
 c100924:	e15b30be 	ldrh	r3, [fp, #-14]
 c100928:	e2833001 	add	r3, r3, #1
 c10092c:	e14b30be 	strh	r3, [fp, #-14]
       
    uart0_puts( "Lectura de pulsadores por interrupción usando pb_getchartime():\n" );
    pbs_open( isr_pbs );
    flagPbs = FALSE;
    ticks = 0;
    while( ticks != 5 )
 c100930:	e15b30be 	ldrh	r3, [fp, #-14]
 c100934:	e3530005 	cmp	r3, #5
 c100938:	1affffd2 	bne	c100888 <main+0x888>
                break;

        }       
        ticks++;
    } 
    pbs_close();
 c10093c:	eb00028b 	bl	c101370 <pbs_close>
    
    while( 1 );
 c100940:	eafffffe 	b	c100940 <main+0x940>
 c100944:	0c103cd0 	.word	0x0c103cd0
 c100948:	0c103cd4 	.word	0x0c103cd4
 c10094c:	0c103cec 	.word	0x0c103cec
 c100950:	00038021 	.word	0x00038021
 c100954:	01d80008 	.word	0x01d80008
 c100958:	0c103d08 	.word	0x0c103d08
 c10095c:	0c103d48 	.word	0x0c103d48
 c100960:	cccccccd 	.word	0xcccccccd
 c100964:	0c103dbc 	.word	0x0c103dbc
 c100968:	0c103dd8 	.word	0x0c103dd8
 c10096c:	0c103de0 	.word	0x0c103de0
 c100970:	0c103e40 	.word	0x0c103e40
 c100974:	0c103ea0 	.word	0x0c103ea0
 c100978:	0c100a50 	.word	0x0c100a50
 c10097c:	0c104b83 	.word	0x0c104b83
 c100980:	0c103f1c 	.word	0x0c103f1c
 c100984:	0c103f98 	.word	0x0c103f98
 c100988:	0c104008 	.word	0x0c104008
 c10098c:	0c10407c 	.word	0x0c10407c
 c100990:	0c1040f0 	.word	0x0c1040f0
 c100994:	0c104164 	.word	0x0c104164
 c100998:	00001388 	.word	0x00001388
 c10099c:	0c1041a8 	.word	0x0c1041a8
 c1009a0:	0c1041b8 	.word	0x0c1041b8
 c1009a4:	0c1041f8 	.word	0x0c1041f8
 c1009a8:	0000c350 	.word	0x0000c350
 c1009ac:	0c104240 	.word	0x0c104240
 c1009b0:	0c104258 	.word	0x0c104258
 c1009b4:	0c104270 	.word	0x0c104270
 c1009b8:	0c104298 	.word	0x0c104298
 c1009bc:	0c1042c4 	.word	0x0c1042c4
 c1009c0:	0c104304 	.word	0x0c104304
 c1009c4:	0c10431c 	.word	0x0c10431c
 c1009c8:	0c10432c 	.word	0x0c10432c
 c1009cc:	0c104344 	.word	0x0c104344
 c1009d0:	0c104394 	.word	0x0c104394
 c1009d4:	0c1043a4 	.word	0x0c1043a4
 c1009d8:	0c100a90 	.word	0x0c100a90
 c1009dc:	0c104b82 	.word	0x0c104b82
 c1009e0:	0c1043e8 	.word	0x0c1043e8
 c1009e4:	0c104408 	.word	0x0c104408
 c1009e8:	0c104410 	.word	0x0c104410
 c1009ec:	0c104450 	.word	0x0c104450
 c1009f0:	0c104480 	.word	0x0c104480
 c1009f4:	0c1044ac 	.word	0x0c1044ac
 c1009f8:	0c1044fc 	.word	0x0c1044fc
 c1009fc:	0c100ad0 	.word	0x0c100ad0
 c100a00:	0c104b81 	.word	0x0c104b81
 c100a04:	0c104540 	.word	0x0c104540
 c100a08:	0c104578 	.word	0x0c104578

0c100a0c <one_second_loop>:

}

void one_second_loop( void )
{
 c100a0c:	e1a0c00d 	mov	ip, sp
 c100a10:	e92dd800 	push	{fp, ip, lr, pc}
 c100a14:	e24cb004 	sub	fp, ip, #4
 c100a18:	e24dd008 	sub	sp, sp, #8
    uint32 i;

    for( i=591436; i; i-- );
 c100a1c:	e59f3028 	ldr	r3, [pc, #40]	; c100a4c <one_second_loop+0x40>
 c100a20:	e50b3010 	str	r3, [fp, #-16]
 c100a24:	ea000002 	b	c100a34 <one_second_loop+0x28>
 c100a28:	e51b3010 	ldr	r3, [fp, #-16]
 c100a2c:	e2433001 	sub	r3, r3, #1
 c100a30:	e50b3010 	str	r3, [fp, #-16]
 c100a34:	e51b3010 	ldr	r3, [fp, #-16]
 c100a38:	e3530000 	cmp	r3, #0
 c100a3c:	1afffff9 	bne	c100a28 <one_second_loop+0x1c>
} 
 c100a40:	e24bd00c 	sub	sp, fp, #12
 c100a44:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a48:	e12fff1e 	bx	lr
 c100a4c:	0009064c 	.word	0x0009064c

0c100a50 <isr_timer0>:

void isr_timer0( void )
{
 c100a50:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100a54:	e1a0c00d 	mov	ip, sp
 c100a58:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c100a5c:	e24cb004 	sub	fp, ip, #4
    flagTimer0 = TRUE;
 c100a60:	e59f3020 	ldr	r3, [pc, #32]	; c100a88 <isr_timer0+0x38>
 c100a64:	e3a02001 	mov	r2, #1
 c100a68:	e5c32000 	strb	r2, [r3]
    I_ISPC = BIT_TIMER0;
 c100a6c:	e59f3018 	ldr	r3, [pc, #24]	; c100a8c <isr_timer0+0x3c>
 c100a70:	e3a02a02 	mov	r2, #8192	; 0x2000
 c100a74:	e5832000 	str	r2, [r3]
}
 c100a78:	e24bd014 	sub	sp, fp, #20
 c100a7c:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c100a80:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c100a84:	e25ef004 	subs	pc, lr, #4
 c100a88:	0c104b83 	.word	0x0c104b83
 c100a8c:	01e00024 	.word	0x01e00024

0c100a90 <isr_keypad>:

void isr_keypad( void )
{
 c100a90:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100a94:	e1a0c00d 	mov	ip, sp
 c100a98:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c100a9c:	e24cb004 	sub	fp, ip, #4
    flagKeypad = TRUE;
 c100aa0:	e59f3020 	ldr	r3, [pc, #32]	; c100ac8 <isr_keypad+0x38>
 c100aa4:	e3a02001 	mov	r2, #1
 c100aa8:	e5c32000 	strb	r2, [r3]
    I_ISPC = BIT_KEYPAD;
 c100aac:	e59f3018 	ldr	r3, [pc, #24]	; c100acc <isr_keypad+0x3c>
 c100ab0:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c100ab4:	e5832000 	str	r2, [r3]
}
 c100ab8:	e24bd014 	sub	sp, fp, #20
 c100abc:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c100ac0:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c100ac4:	e25ef004 	subs	pc, lr, #4
 c100ac8:	0c104b82 	.word	0x0c104b82
 c100acc:	01e00024 	.word	0x01e00024

0c100ad0 <isr_pbs>:

void isr_pbs( void )
{
 c100ad0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100ad4:	e1a0c00d 	mov	ip, sp
 c100ad8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100adc:	e24cb004 	sub	fp, ip, #4
    switch( pb_scan() )
 c100ae0:	eb000167 	bl	c101084 <pb_scan>
 c100ae4:	e1a03000 	mov	r3, r0
 c100ae8:	e3530080 	cmp	r3, #128	; 0x80
 c100aec:	0a00000c 	beq	c100b24 <isr_pbs+0x54>
 c100af0:	e35300ff 	cmp	r3, #255	; 0xff
 c100af4:	0a000002 	beq	c100b04 <isr_pbs+0x34>
 c100af8:	e3530040 	cmp	r3, #64	; 0x40
 c100afc:	0a000004 	beq	c100b14 <isr_pbs+0x44>
 c100b00:	ea00000b 	b	c100b34 <isr_pbs+0x64>
    {
        case PB_FAILURE:
            EXTINTPND = BIT_LEFTPB | BIT_RIGHTPB;   
 c100b04:	e59f3050 	ldr	r3, [pc, #80]	; c100b5c <isr_pbs+0x8c>
 c100b08:	e3a0200c 	mov	r2, #12
 c100b0c:	e5832000 	str	r2, [r3]
            break;
 c100b10:	ea000007 	b	c100b34 <isr_pbs+0x64>
        case PB_LEFT:
            EXTINTPND = BIT_LEFTPB;   
 c100b14:	e59f3040 	ldr	r3, [pc, #64]	; c100b5c <isr_pbs+0x8c>
 c100b18:	e3a02004 	mov	r2, #4
 c100b1c:	e5832000 	str	r2, [r3]
            break;
 c100b20:	ea000003 	b	c100b34 <isr_pbs+0x64>
        case PB_RIGHT:
            EXTINTPND = BIT_RIGHTPB;   
 c100b24:	e59f3030 	ldr	r3, [pc, #48]	; c100b5c <isr_pbs+0x8c>
 c100b28:	e3a02008 	mov	r2, #8
 c100b2c:	e5832000 	str	r2, [r3]
            break;
 c100b30:	e1a00000 	nop			; (mov r0, r0)
    }
    flagPbs = TRUE;
 c100b34:	e59f3024 	ldr	r3, [pc, #36]	; c100b60 <isr_pbs+0x90>
 c100b38:	e3a02001 	mov	r2, #1
 c100b3c:	e5c32000 	strb	r2, [r3]
    I_ISPC = BIT_PB;
 c100b40:	e59f301c 	ldr	r3, [pc, #28]	; c100b64 <isr_pbs+0x94>
 c100b44:	e3a02602 	mov	r2, #2097152	; 0x200000
 c100b48:	e5832000 	str	r2, [r3]
}
 c100b4c:	e24bd01c 	sub	sp, fp, #28
 c100b50:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c100b54:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c100b58:	e25ef004 	subs	pc, lr, #4
 c100b5c:	01d20054 	.word	0x01d20054
 c100b60:	0c104b81 	.word	0x0c104b81
 c100b64:	01e00024 	.word	0x01e00024

0c100b68 <keypad_scan>:
#include <keypad.h>

extern void isr_KEYPAD_dummy( void );

uint8 keypad_scan( void )
{
 c100b68:	e1a0c00d 	mov	ip, sp
 c100b6c:	e92dd800 	push	{fp, ip, lr, pc}
 c100b70:	e24cb004 	sub	fp, ip, #4
 c100b74:	e24dd008 	sub	sp, sp, #8
    uint8 aux;

    aux = *( KEYPAD_ADDR + 0x1c );//fila 1
 c100b78:	e59f31fc 	ldr	r3, [pc, #508]	; c100d7c <keypad_scan+0x214>
 c100b7c:	e5d33000 	ldrb	r3, [r3]
 c100b80:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c100b84:	e55b300d 	ldrb	r3, [fp, #-13]
 c100b88:	e203300f 	and	r3, r3, #15
 c100b8c:	e353000f 	cmp	r3, #15
 c100b90:	0a000017 	beq	c100bf4 <keypad_scan+0x8c>
    {
        if( (aux & 0x8) == 0 )
 c100b94:	e55b300d 	ldrb	r3, [fp, #-13]
 c100b98:	e2033008 	and	r3, r3, #8
 c100b9c:	e3530000 	cmp	r3, #0
 c100ba0:	1a000001 	bne	c100bac <keypad_scan+0x44>
            return KEYPAD_KEY0;
 c100ba4:	e3a03000 	mov	r3, #0
 c100ba8:	ea00006f 	b	c100d6c <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )
 c100bac:	e55b300d 	ldrb	r3, [fp, #-13]
 c100bb0:	e2033004 	and	r3, r3, #4
 c100bb4:	e3530000 	cmp	r3, #0
 c100bb8:	1a000001 	bne	c100bc4 <keypad_scan+0x5c>
            return KEYPAD_KEY1;
 c100bbc:	e3a03001 	mov	r3, #1
 c100bc0:	ea000069 	b	c100d6c <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c100bc4:	e55b300d 	ldrb	r3, [fp, #-13]
 c100bc8:	e2033002 	and	r3, r3, #2
 c100bcc:	e3530000 	cmp	r3, #0
 c100bd0:	1a000001 	bne	c100bdc <keypad_scan+0x74>
            return KEYPAD_KEY2;
 c100bd4:	e3a03002 	mov	r3, #2
 c100bd8:	ea000063 	b	c100d6c <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c100bdc:	e55b300d 	ldrb	r3, [fp, #-13]
 c100be0:	e2033001 	and	r3, r3, #1
 c100be4:	e3530000 	cmp	r3, #0
 c100be8:	1a000001 	bne	c100bf4 <keypad_scan+0x8c>
            return KEYPAD_KEY3;
 c100bec:	e3a03003 	mov	r3, #3
 c100bf0:	ea00005d 	b	c100d6c <keypad_scan+0x204>
    }
	aux = *( KEYPAD_ADDR + 0x1a );//fila 2
 c100bf4:	e59f3184 	ldr	r3, [pc, #388]	; c100d80 <keypad_scan+0x218>
 c100bf8:	e5d33000 	ldrb	r3, [r3]
 c100bfc:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c100c00:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c04:	e203300f 	and	r3, r3, #15
 c100c08:	e353000f 	cmp	r3, #15
 c100c0c:	0a000017 	beq	c100c70 <keypad_scan+0x108>
	{
		if( (aux & 0x8) == 0 )
 c100c10:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c14:	e2033008 	and	r3, r3, #8
 c100c18:	e3530000 	cmp	r3, #0
 c100c1c:	1a000001 	bne	c100c28 <keypad_scan+0xc0>
			return KEYPAD_KEY4;
 c100c20:	e3a03004 	mov	r3, #4
 c100c24:	ea000050 	b	c100d6c <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c100c28:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c2c:	e2033004 	and	r3, r3, #4
 c100c30:	e3530000 	cmp	r3, #0
 c100c34:	1a000001 	bne	c100c40 <keypad_scan+0xd8>
			return KEYPAD_KEY5;
 c100c38:	e3a03005 	mov	r3, #5
 c100c3c:	ea00004a 	b	c100d6c <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c100c40:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c44:	e2033002 	and	r3, r3, #2
 c100c48:	e3530000 	cmp	r3, #0
 c100c4c:	1a000001 	bne	c100c58 <keypad_scan+0xf0>
			return KEYPAD_KEY6;
 c100c50:	e3a03006 	mov	r3, #6
 c100c54:	ea000044 	b	c100d6c <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c100c58:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c5c:	e2033001 	and	r3, r3, #1
 c100c60:	e3530000 	cmp	r3, #0
 c100c64:	1a000001 	bne	c100c70 <keypad_scan+0x108>
			return KEYPAD_KEY7;
 c100c68:	e3a03007 	mov	r3, #7
 c100c6c:	ea00003e 	b	c100d6c <keypad_scan+0x204>
	}

    aux = *( KEYPAD_ADDR + 0x16 );//fila 3
 c100c70:	e59f310c 	ldr	r3, [pc, #268]	; c100d84 <keypad_scan+0x21c>
 c100c74:	e5d33000 	ldrb	r3, [r3]
 c100c78:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c100c7c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c80:	e203300f 	and	r3, r3, #15
 c100c84:	e353000f 	cmp	r3, #15
 c100c88:	0a000017 	beq	c100cec <keypad_scan+0x184>
    {
        if( (aux & 0x8) == 0 )
 c100c8c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c90:	e2033008 	and	r3, r3, #8
 c100c94:	e3530000 	cmp	r3, #0
 c100c98:	1a000001 	bne	c100ca4 <keypad_scan+0x13c>
            return KEYPAD_KEY8;
 c100c9c:	e3a03008 	mov	r3, #8
 c100ca0:	ea000031 	b	c100d6c <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )
 c100ca4:	e55b300d 	ldrb	r3, [fp, #-13]
 c100ca8:	e2033004 	and	r3, r3, #4
 c100cac:	e3530000 	cmp	r3, #0
 c100cb0:	1a000001 	bne	c100cbc <keypad_scan+0x154>
            return KEYPAD_KEY9;
 c100cb4:	e3a03009 	mov	r3, #9
 c100cb8:	ea00002b 	b	c100d6c <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c100cbc:	e55b300d 	ldrb	r3, [fp, #-13]
 c100cc0:	e2033002 	and	r3, r3, #2
 c100cc4:	e3530000 	cmp	r3, #0
 c100cc8:	1a000001 	bne	c100cd4 <keypad_scan+0x16c>
            return KEYPAD_KEYA;
 c100ccc:	e3a0300a 	mov	r3, #10
 c100cd0:	ea000025 	b	c100d6c <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c100cd4:	e55b300d 	ldrb	r3, [fp, #-13]
 c100cd8:	e2033001 	and	r3, r3, #1
 c100cdc:	e3530000 	cmp	r3, #0
 c100ce0:	1a000001 	bne	c100cec <keypad_scan+0x184>
            return KEYPAD_KEYB;
 c100ce4:	e3a0300b 	mov	r3, #11
 c100ce8:	ea00001f 	b	c100d6c <keypad_scan+0x204>
    }
	aux = *( KEYPAD_ADDR + 0xe );//fila 4
 c100cec:	e59f3094 	ldr	r3, [pc, #148]	; c100d88 <keypad_scan+0x220>
 c100cf0:	e5d33000 	ldrb	r3, [r3]
 c100cf4:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c100cf8:	e55b300d 	ldrb	r3, [fp, #-13]
 c100cfc:	e203300f 	and	r3, r3, #15
 c100d00:	e353000f 	cmp	r3, #15
 c100d04:	0a000017 	beq	c100d68 <keypad_scan+0x200>
	{
		if( (aux & 0x8) == 0 )
 c100d08:	e55b300d 	ldrb	r3, [fp, #-13]
 c100d0c:	e2033008 	and	r3, r3, #8
 c100d10:	e3530000 	cmp	r3, #0
 c100d14:	1a000001 	bne	c100d20 <keypad_scan+0x1b8>
			return KEYPAD_KEYC;
 c100d18:	e3a0300c 	mov	r3, #12
 c100d1c:	ea000012 	b	c100d6c <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c100d20:	e55b300d 	ldrb	r3, [fp, #-13]
 c100d24:	e2033004 	and	r3, r3, #4
 c100d28:	e3530000 	cmp	r3, #0
 c100d2c:	1a000001 	bne	c100d38 <keypad_scan+0x1d0>
			return KEYPAD_KEYD;
 c100d30:	e3a0300d 	mov	r3, #13
 c100d34:	ea00000c 	b	c100d6c <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c100d38:	e55b300d 	ldrb	r3, [fp, #-13]
 c100d3c:	e2033002 	and	r3, r3, #2
 c100d40:	e3530000 	cmp	r3, #0
 c100d44:	1a000001 	bne	c100d50 <keypad_scan+0x1e8>
			return KEYPAD_KEYE;
 c100d48:	e3a0300e 	mov	r3, #14
 c100d4c:	ea000006 	b	c100d6c <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c100d50:	e55b300d 	ldrb	r3, [fp, #-13]
 c100d54:	e2033001 	and	r3, r3, #1
 c100d58:	e3530000 	cmp	r3, #0
 c100d5c:	1a000001 	bne	c100d68 <keypad_scan+0x200>
			return KEYPAD_KEYF;
 c100d60:	e3a0300f 	mov	r3, #15
 c100d64:	ea000000 	b	c100d6c <keypad_scan+0x204>
	}

    return KEYPAD_FAILURE;
 c100d68:	e3a030ff 	mov	r3, #255	; 0xff
}
 c100d6c:	e1a00003 	mov	r0, r3
 c100d70:	e24bd00c 	sub	sp, fp, #12
 c100d74:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d78:	e12fff1e 	bx	lr
 c100d7c:	0600001c 	.word	0x0600001c
 c100d80:	0600001a 	.word	0x0600001a
 c100d84:	06000016 	.word	0x06000016
 c100d88:	0600000e 	.word	0x0600000e

0c100d8c <keypad_pressed>:

uint8 keypad_pressed( void )
{
 c100d8c:	e1a0c00d 	mov	ip, sp
 c100d90:	e92dd800 	push	{fp, ip, lr, pc}
 c100d94:	e24cb004 	sub	fp, ip, #4
    if(keypad_scan()==KEYPAD_FAILURE)
 c100d98:	ebffff72 	bl	c100b68 <keypad_scan>
 c100d9c:	e1a03000 	mov	r3, r0
 c100da0:	e35300ff 	cmp	r3, #255	; 0xff
 c100da4:	1a000001 	bne	c100db0 <keypad_pressed+0x24>
    	return 0;
 c100da8:	e3a03000 	mov	r3, #0
 c100dac:	ea000000 	b	c100db4 <keypad_pressed+0x28>
    return 1;
 c100db0:	e3a03001 	mov	r3, #1
}
 c100db4:	e1a00003 	mov	r0, r3
 c100db8:	e24bd00c 	sub	sp, fp, #12
 c100dbc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100dc0:	e12fff1e 	bx	lr

0c100dc4 <keypad_open>:

void keypad_open( void (*isr)(void) )
{
 c100dc4:	e1a0c00d 	mov	ip, sp
 c100dc8:	e92dd800 	push	{fp, ip, lr, pc}
 c100dcc:	e24cb004 	sub	fp, ip, #4
 c100dd0:	e24dd008 	sub	sp, sp, #8
 c100dd4:	e50b0010 	str	r0, [fp, #-16]
    pISR_KEYPAD = (uint32)isr;
 c100dd8:	e59f3030 	ldr	r3, [pc, #48]	; c100e10 <keypad_open+0x4c>
 c100ddc:	e51b2010 	ldr	r2, [fp, #-16]
 c100de0:	e5832000 	str	r2, [r3]
    I_ISPC = BIT_KEYPAD;
 c100de4:	e59f3028 	ldr	r3, [pc, #40]	; c100e14 <keypad_open+0x50>
 c100de8:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c100dec:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_GLOBAL | BIT_KEYPAD);
 c100df0:	e59f3020 	ldr	r3, [pc, #32]	; c100e18 <keypad_open+0x54>
 c100df4:	e59f201c 	ldr	r2, [pc, #28]	; c100e18 <keypad_open+0x54>
 c100df8:	e5922000 	ldr	r2, [r2]
 c100dfc:	e3c22405 	bic	r2, r2, #83886080	; 0x5000000
 c100e00:	e5832000 	str	r2, [r3]
}
 c100e04:	e24bd00c 	sub	sp, fp, #12
 c100e08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e0c:	e12fff1e 	bx	lr
 c100e10:	0c7fff80 	.word	0x0c7fff80
 c100e14:	01e00024 	.word	0x01e00024
 c100e18:	01e0000c 	.word	0x01e0000c

0c100e1c <keypad_close>:

void keypad_close( void )
{
 c100e1c:	e1a0c00d 	mov	ip, sp
 c100e20:	e92dd800 	push	{fp, ip, lr, pc}
 c100e24:	e24cb004 	sub	fp, ip, #4
    INTMSK |= BIT_KEYPAD;
 c100e28:	e59f3024 	ldr	r3, [pc, #36]	; c100e54 <keypad_close+0x38>
 c100e2c:	e59f2020 	ldr	r2, [pc, #32]	; c100e54 <keypad_close+0x38>
 c100e30:	e5922000 	ldr	r2, [r2]
 c100e34:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
 c100e38:	e5832000 	str	r2, [r3]
    pISR_KEYPAD = (uint32) isr_KEYPAD_dummy;
 c100e3c:	e59f3014 	ldr	r3, [pc, #20]	; c100e58 <keypad_close+0x3c>
 c100e40:	e59f2014 	ldr	r2, [pc, #20]	; c100e5c <keypad_close+0x40>
 c100e44:	e5832000 	str	r2, [r3]
}
 c100e48:	e24bd00c 	sub	sp, fp, #12
 c100e4c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e50:	e12fff1e 	bx	lr
 c100e54:	01e0000c 	.word	0x01e0000c
 c100e58:	0c7fff80 	.word	0x0c7fff80
 c100e5c:	0c101dec 	.word	0x0c101dec

0c100e60 <keypad_init>:

#if KEYPAD_IO_METHOD == POOLING


void keypad_init( void )
{
 c100e60:	e1a0c00d 	mov	ip, sp
 c100e64:	e92dd800 	push	{fp, ip, lr, pc}
 c100e68:	e24cb004 	sub	fp, ip, #4
    timers_init();  
 c100e6c:	eb00048f 	bl	c1020b0 <timers_init>
};
 c100e70:	e24bd00c 	sub	sp, fp, #12
 c100e74:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e78:	e12fff1e 	bx	lr

0c100e7c <keypad_getchar>:

uint8 keypad_getchar( void ){
 c100e7c:	e1a0c00d 	mov	ip, sp
 c100e80:	e92dd800 	push	{fp, ip, lr, pc}
 c100e84:	e24cb004 	sub	fp, ip, #4
 c100e88:	e24dd008 	sub	sp, sp, #8
	uint8 s;
    while(PDATG & (1<<1));
 c100e8c:	e1a00000 	nop			; (mov r0, r0)
 c100e90:	e59f3054 	ldr	r3, [pc, #84]	; c100eec <keypad_getchar+0x70>
 c100e94:	e5933000 	ldr	r3, [r3]
 c100e98:	e2033002 	and	r3, r3, #2
 c100e9c:	e3530000 	cmp	r3, #0
 c100ea0:	1afffffa 	bne	c100e90 <keypad_getchar+0x14>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c100ea4:	e3a0001e 	mov	r0, #30
 c100ea8:	eb00052f 	bl	c10236c <sw_delay_ms>
    s = keypad_scan();
 c100eac:	ebffff2d 	bl	c100b68 <keypad_scan>
 c100eb0:	e1a03000 	mov	r3, r0
 c100eb4:	e54b300d 	strb	r3, [fp, #-13]
    while(!(PDATG & (1<<1)));
 c100eb8:	e1a00000 	nop			; (mov r0, r0)
 c100ebc:	e59f3028 	ldr	r3, [pc, #40]	; c100eec <keypad_getchar+0x70>
 c100ec0:	e5933000 	ldr	r3, [r3]
 c100ec4:	e2033002 	and	r3, r3, #2
 c100ec8:	e3530000 	cmp	r3, #0
 c100ecc:	0afffffa 	beq	c100ebc <keypad_getchar+0x40>
    sw_delay_ms(KEYPAD_KEYUP_DELAY);
 c100ed0:	e3a00064 	mov	r0, #100	; 0x64
 c100ed4:	eb000524 	bl	c10236c <sw_delay_ms>
    return s;
 c100ed8:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c100edc:	e1a00003 	mov	r0, r3
 c100ee0:	e24bd00c 	sub	sp, fp, #12
 c100ee4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ee8:	e12fff1e 	bx	lr
 c100eec:	01d20044 	.word	0x01d20044

0c100ef0 <keypad_getchartime>:

uint8 keypad_getchartime( uint16 *ms ){
 c100ef0:	e1a0c00d 	mov	ip, sp
 c100ef4:	e92dd800 	push	{fp, ip, lr, pc}
 c100ef8:	e24cb004 	sub	fp, ip, #4
 c100efc:	e24dd010 	sub	sp, sp, #16
 c100f00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8 scancode;

    while(PDATG & (1<<1));
 c100f04:	e1a00000 	nop			; (mov r0, r0)
 c100f08:	e59f3080 	ldr	r3, [pc, #128]	; c100f90 <keypad_getchartime+0xa0>
 c100f0c:	e5933000 	ldr	r3, [r3]
 c100f10:	e2033002 	and	r3, r3, #2
 c100f14:	e3530000 	cmp	r3, #0
 c100f18:	1afffffa 	bne	c100f08 <keypad_getchartime+0x18>
    timer3_start();
 c100f1c:	eb000580 	bl	c102524 <timer3_start>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c100f20:	e3a0001e 	mov	r0, #30
 c100f24:	eb000510 	bl	c10236c <sw_delay_ms>

    scancode = keypad_scan();
 c100f28:	ebffff0e 	bl	c100b68 <keypad_scan>
 c100f2c:	e1a03000 	mov	r3, r0
 c100f30:	e54b300d 	strb	r3, [fp, #-13]

    while(!(PDATG & (1<<1)));
 c100f34:	e1a00000 	nop			; (mov r0, r0)
 c100f38:	e59f3050 	ldr	r3, [pc, #80]	; c100f90 <keypad_getchartime+0xa0>
 c100f3c:	e5933000 	ldr	r3, [r3]
 c100f40:	e2033002 	and	r3, r3, #2
 c100f44:	e3530000 	cmp	r3, #0
 c100f48:	0afffffa 	beq	c100f38 <keypad_getchartime+0x48>
    *ms = timer3_stop() / 10;
 c100f4c:	eb0005a0 	bl	c1025d4 <timer3_stop>
 c100f50:	e1a03000 	mov	r3, r0
 c100f54:	e1a02003 	mov	r2, r3
 c100f58:	e59f3034 	ldr	r3, [pc, #52]	; c100f94 <keypad_getchartime+0xa4>
 c100f5c:	e0831392 	umull	r1, r3, r2, r3
 c100f60:	e1a031a3 	lsr	r3, r3, #3
 c100f64:	e1a03803 	lsl	r3, r3, #16
 c100f68:	e1a02823 	lsr	r2, r3, #16
 c100f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100f70:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c100f74:	e3a00064 	mov	r0, #100	; 0x64
 c100f78:	eb0004fb 	bl	c10236c <sw_delay_ms>

    return scancode;
 c100f7c:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c100f80:	e1a00003 	mov	r0, r3
 c100f84:	e24bd00c 	sub	sp, fp, #12
 c100f88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100f8c:	e12fff1e 	bx	lr
 c100f90:	01d20044 	.word	0x01d20044
 c100f94:	cccccccd 	.word	0xcccccccd

0c100f98 <keypad_timeout_getchar>:

uint8 keypad_timeout_getchar( uint16 ms ){//TODO
 c100f98:	e1a0c00d 	mov	ip, sp
 c100f9c:	e92dd800 	push	{fp, ip, lr, pc}
 c100fa0:	e24cb004 	sub	fp, ip, #4
 c100fa4:	e24dd010 	sub	sp, sp, #16
 c100fa8:	e1a03000 	mov	r3, r0
 c100fac:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 s;
	timer3_start_timeout(ms*10);
 c100fb0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100fb4:	e1a02003 	mov	r2, r3
 c100fb8:	e1a02102 	lsl	r2, r2, #2
 c100fbc:	e0823003 	add	r3, r2, r3
 c100fc0:	e1a03083 	lsl	r3, r3, #1
 c100fc4:	e1a03803 	lsl	r3, r3, #16
 c100fc8:	e1a03823 	lsr	r3, r3, #16
 c100fcc:	e1a00003 	mov	r0, r3
 c100fd0:	eb000594 	bl	c102628 <timer3_start_timeout>

	while(!keypad_pressed())
 c100fd4:	ea000005 	b	c100ff0 <keypad_timeout_getchar+0x58>
		if(timer3_timeout())
 c100fd8:	eb0005c0 	bl	c1026e0 <timer3_timeout>
 c100fdc:	e1a03000 	mov	r3, r0
 c100fe0:	e3530000 	cmp	r3, #0
 c100fe4:	0a000001 	beq	c100ff0 <keypad_timeout_getchar+0x58>
			return KEYPAD_TIMEOUT;
 c100fe8:	e3a030fe 	mov	r3, #254	; 0xfe
 c100fec:	ea000018 	b	c101054 <keypad_timeout_getchar+0xbc>

uint8 keypad_timeout_getchar( uint16 ms ){//TODO
	uint8 s;
	timer3_start_timeout(ms*10);

	while(!keypad_pressed())
 c100ff0:	ebffff65 	bl	c100d8c <keypad_pressed>
 c100ff4:	e1a03000 	mov	r3, r0
 c100ff8:	e3530000 	cmp	r3, #0
 c100ffc:	0afffff5 	beq	c100fd8 <keypad_timeout_getchar+0x40>
		if(timer3_timeout())
			return KEYPAD_TIMEOUT;

    while(PDATG & (1<<1));
 c101000:	e1a00000 	nop			; (mov r0, r0)
 c101004:	e59f3058 	ldr	r3, [pc, #88]	; c101064 <keypad_timeout_getchar+0xcc>
 c101008:	e5933000 	ldr	r3, [r3]
 c10100c:	e2033002 	and	r3, r3, #2
 c101010:	e3530000 	cmp	r3, #0
 c101014:	1afffffa 	bne	c101004 <keypad_timeout_getchar+0x6c>
	timer3_start();
 c101018:	eb000541 	bl	c102524 <timer3_start>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c10101c:	e3a0001e 	mov	r0, #30
 c101020:	eb0004d1 	bl	c10236c <sw_delay_ms>

	s = keypad_scan();
 c101024:	ebfffecf 	bl	c100b68 <keypad_scan>
 c101028:	e1a03000 	mov	r3, r0
 c10102c:	e54b300d 	strb	r3, [fp, #-13]

    while(!(PDATG & (1<<1)));
 c101030:	e1a00000 	nop			; (mov r0, r0)
 c101034:	e59f3028 	ldr	r3, [pc, #40]	; c101064 <keypad_timeout_getchar+0xcc>
 c101038:	e5933000 	ldr	r3, [r3]
 c10103c:	e2033002 	and	r3, r3, #2
 c101040:	e3530000 	cmp	r3, #0
 c101044:	0afffffa 	beq	c101034 <keypad_timeout_getchar+0x9c>
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c101048:	e3a00064 	mov	r0, #100	; 0x64
 c10104c:	eb0004c6 	bl	c10236c <sw_delay_ms>
	return s;
 c101050:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c101054:	e1a00003 	mov	r0, r3
 c101058:	e24bd00c 	sub	sp, fp, #12
 c10105c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101060:	e12fff1e 	bx	lr
 c101064:	01d20044 	.word	0x01d20044

0c101068 <pbs_init>:
#include <timers.h>

extern void isr_PB_dummy( void );

void pbs_init( void )
{
 c101068:	e1a0c00d 	mov	ip, sp
 c10106c:	e92dd800 	push	{fp, ip, lr, pc}
 c101070:	e24cb004 	sub	fp, ip, #4
    timers_init();
 c101074:	eb00040d 	bl	c1020b0 <timers_init>
}
 c101078:	e24bd00c 	sub	sp, fp, #12
 c10107c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101080:	e12fff1e 	bx	lr

0c101084 <pb_scan>:

uint8 pb_scan( void )
{
 c101084:	e1a0c00d 	mov	ip, sp
 c101088:	e92dd800 	push	{fp, ip, lr, pc}
 c10108c:	e24cb004 	sub	fp, ip, #4
    if( (PDATG&PB_LEFT)==PB_UP )
 c101090:	e59f3044 	ldr	r3, [pc, #68]	; c1010dc <pb_scan+0x58>
 c101094:	e5933000 	ldr	r3, [r3]
 c101098:	e2033040 	and	r3, r3, #64	; 0x40
 c10109c:	e3530000 	cmp	r3, #0
 c1010a0:	1a000001 	bne	c1010ac <pb_scan+0x28>
        return PB_LEFT;
 c1010a4:	e3a03040 	mov	r3, #64	; 0x40
 c1010a8:	ea000007 	b	c1010cc <pb_scan+0x48>
    else if( (PDATG&PB_RIGHT)==PB_UP )
 c1010ac:	e59f3028 	ldr	r3, [pc, #40]	; c1010dc <pb_scan+0x58>
 c1010b0:	e5933000 	ldr	r3, [r3]
 c1010b4:	e2033080 	and	r3, r3, #128	; 0x80
 c1010b8:	e3530000 	cmp	r3, #0
 c1010bc:	1a000001 	bne	c1010c8 <pb_scan+0x44>
        return PB_RIGHT;
 c1010c0:	e3a03080 	mov	r3, #128	; 0x80
 c1010c4:	ea000000 	b	c1010cc <pb_scan+0x48>
    else
        return PB_FAILURE;
 c1010c8:	e3a030ff 	mov	r3, #255	; 0xff
}
 c1010cc:	e1a00003 	mov	r0, r3
 c1010d0:	e24bd00c 	sub	sp, fp, #12
 c1010d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1010d8:	e12fff1e 	bx	lr
 c1010dc:	01d20044 	.word	0x01d20044

0c1010e0 <pb_pressed>:

uint8 pb_pressed( void )
{
 c1010e0:	e1a0c00d 	mov	ip, sp
 c1010e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1010e8:	e24cb004 	sub	fp, ip, #4
	if( pb_scan() == PB_FAILURE)
 c1010ec:	ebffffe4 	bl	c101084 <pb_scan>
 c1010f0:	e1a03000 	mov	r3, r0
 c1010f4:	e35300ff 	cmp	r3, #255	; 0xff
 c1010f8:	1a000001 	bne	c101104 <pb_pressed+0x24>
		return 0;
 c1010fc:	e3a03000 	mov	r3, #0
 c101100:	ea000000 	b	c101108 <pb_pressed+0x28>
	return 1;
 c101104:	e3a03001 	mov	r3, #1
}
 c101108:	e1a00003 	mov	r0, r3
 c10110c:	e24bd00c 	sub	sp, fp, #12
 c101110:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101114:	e12fff1e 	bx	lr

0c101118 <pb_getchar>:

uint8 pb_getchar( void ){
 c101118:	e1a0c00d 	mov	ip, sp
 c10111c:	e92dd800 	push	{fp, ip, lr, pc}
 c101120:	e24cb004 	sub	fp, ip, #4
 c101124:	e24dd008 	sub	sp, sp, #8
	uint8 s;
    while((PDATG&PB_LEFT));
 c101128:	e1a00000 	nop			; (mov r0, r0)
 c10112c:	e59f3054 	ldr	r3, [pc, #84]	; c101188 <pb_getchar+0x70>
 c101130:	e5933000 	ldr	r3, [r3]
 c101134:	e2033040 	and	r3, r3, #64	; 0x40
 c101138:	e3530000 	cmp	r3, #0
 c10113c:	1afffffa 	bne	c10112c <pb_getchar+0x14>
    sw_delay_ms( PB_KEYDOWN_DELAY );
 c101140:	e3a0001e 	mov	r0, #30
 c101144:	eb000488 	bl	c10236c <sw_delay_ms>
    s = pb_scan();
 c101148:	ebffffcd 	bl	c101084 <pb_scan>
 c10114c:	e1a03000 	mov	r3, r0
 c101150:	e54b300d 	strb	r3, [fp, #-13]
    while(!(PDATG&PB_LEFT));
 c101154:	e1a00000 	nop			; (mov r0, r0)
 c101158:	e59f3028 	ldr	r3, [pc, #40]	; c101188 <pb_getchar+0x70>
 c10115c:	e5933000 	ldr	r3, [r3]
 c101160:	e2033040 	and	r3, r3, #64	; 0x40
 c101164:	e3530000 	cmp	r3, #0
 c101168:	0afffffa 	beq	c101158 <pb_getchar+0x40>
    sw_delay_ms( PB_KEYUP_DELAY );
 c10116c:	e3a00064 	mov	r0, #100	; 0x64
 c101170:	eb00047d 	bl	c10236c <sw_delay_ms>
    return s;
 c101174:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c101178:	e1a00003 	mov	r0, r3
 c10117c:	e24bd00c 	sub	sp, fp, #12
 c101180:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101184:	e12fff1e 	bx	lr
 c101188:	01d20044 	.word	0x01d20044

0c10118c <pb_timeout_getchar>:

uint8 pb_timeout_getchar( uint16 ms ){
 c10118c:	e1a0c00d 	mov	ip, sp
 c101190:	e92dd800 	push	{fp, ip, lr, pc}
 c101194:	e24cb004 	sub	fp, ip, #4
 c101198:	e24dd010 	sub	sp, sp, #16
 c10119c:	e1a03000 	mov	r3, r0
 c1011a0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 s;
	timer3_start_timeout(ms*10);
 c1011a4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1011a8:	e1a02003 	mov	r2, r3
 c1011ac:	e1a02102 	lsl	r2, r2, #2
 c1011b0:	e0823003 	add	r3, r2, r3
 c1011b4:	e1a03083 	lsl	r3, r3, #1
 c1011b8:	e1a03803 	lsl	r3, r3, #16
 c1011bc:	e1a03823 	lsr	r3, r3, #16
 c1011c0:	e1a00003 	mov	r0, r3
 c1011c4:	eb000517 	bl	c102628 <timer3_start_timeout>

	while(!pb_pressed())
 c1011c8:	ea000005 	b	c1011e4 <pb_timeout_getchar+0x58>
		if(timer3_timeout())
 c1011cc:	eb000543 	bl	c1026e0 <timer3_timeout>
 c1011d0:	e1a03000 	mov	r3, r0
 c1011d4:	e3530000 	cmp	r3, #0
 c1011d8:	0a000001 	beq	c1011e4 <pb_timeout_getchar+0x58>
			return PB_TIMEOUT;
 c1011dc:	e3a030fe 	mov	r3, #254	; 0xfe
 c1011e0:	ea000019 	b	c10124c <pb_timeout_getchar+0xc0>

uint8 pb_timeout_getchar( uint16 ms ){
	uint8 s;
	timer3_start_timeout(ms*10);

	while(!pb_pressed())
 c1011e4:	e59f3070 	ldr	r3, [pc, #112]	; c10125c <pb_timeout_getchar+0xd0>
 c1011e8:	e5933000 	ldr	r3, [r3]
 c1011ec:	e2033040 	and	r3, r3, #64	; 0x40
 c1011f0:	e3530000 	cmp	r3, #0
 c1011f4:	1afffff4 	bne	c1011cc <pb_timeout_getchar+0x40>
		if(timer3_timeout())
			return PB_TIMEOUT;

	while((PDATG&PB_LEFT) );
 c1011f8:	e1a00000 	nop			; (mov r0, r0)
 c1011fc:	e59f3058 	ldr	r3, [pc, #88]	; c10125c <pb_timeout_getchar+0xd0>
 c101200:	e5933000 	ldr	r3, [r3]
 c101204:	e2033040 	and	r3, r3, #64	; 0x40
 c101208:	e3530000 	cmp	r3, #0
 c10120c:	0afffffa 	beq	c1011fc <pb_timeout_getchar+0x70>
	timer3_start();
 c101210:	eb0004c3 	bl	c102524 <timer3_start>
	sw_delay_ms( PB_KEYDOWN_DELAY );
 c101214:	e3a0001e 	mov	r0, #30
 c101218:	eb000453 	bl	c10236c <sw_delay_ms>

	s = pb_scan();
 c10121c:	ebffff98 	bl	c101084 <pb_scan>
 c101220:	e1a03000 	mov	r3, r0
 c101224:	e54b300d 	strb	r3, [fp, #-13]

	while( (PDATG&PB_LEFT) );
 c101228:	e1a00000 	nop			; (mov r0, r0)
 c10122c:	e59f3028 	ldr	r3, [pc, #40]	; c10125c <pb_timeout_getchar+0xd0>
 c101230:	e5933000 	ldr	r3, [r3]
 c101234:	e2033040 	and	r3, r3, #64	; 0x40
 c101238:	e3530000 	cmp	r3, #0
 c10123c:	1afffffa 	bne	c10122c <pb_timeout_getchar+0xa0>
	sw_delay_ms( PB_KEYUP_DELAY );
 c101240:	e3a00064 	mov	r0, #100	; 0x64
 c101244:	eb000448 	bl	c10236c <sw_delay_ms>
	return s;
 c101248:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c10124c:	e1a00003 	mov	r0, r3
 c101250:	e24bd00c 	sub	sp, fp, #12
 c101254:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101258:	e12fff1e 	bx	lr
 c10125c:	01d20044 	.word	0x01d20044

0c101260 <pb_getchartime>:

uint8 pb_getchartime( uint16 *ms )
{
 c101260:	e1a0c00d 	mov	ip, sp
 c101264:	e92dd800 	push	{fp, ip, lr, pc}
 c101268:	e24cb004 	sub	fp, ip, #4
 c10126c:	e24dd010 	sub	sp, sp, #16
 c101270:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8 scancode;
    
    while( (PDATG&PB_LEFT) );
 c101274:	e1a00000 	nop			; (mov r0, r0)
 c101278:	e59f3080 	ldr	r3, [pc, #128]	; c101300 <pb_getchartime+0xa0>
 c10127c:	e5933000 	ldr	r3, [r3]
 c101280:	e2033040 	and	r3, r3, #64	; 0x40
 c101284:	e3530000 	cmp	r3, #0
 c101288:	1afffffa 	bne	c101278 <pb_getchartime+0x18>
    timer3_start();
 c10128c:	eb0004a4 	bl	c102524 <timer3_start>
    sw_delay_ms( PB_KEYDOWN_DELAY );
 c101290:	e3a0001e 	mov	r0, #30
 c101294:	eb000434 	bl	c10236c <sw_delay_ms>
    
    scancode = pb_scan();
 c101298:	ebffff79 	bl	c101084 <pb_scan>
 c10129c:	e1a03000 	mov	r3, r0
 c1012a0:	e54b300d 	strb	r3, [fp, #-13]
    
    while( !(PDATG&PB_LEFT) );
 c1012a4:	e1a00000 	nop			; (mov r0, r0)
 c1012a8:	e59f3050 	ldr	r3, [pc, #80]	; c101300 <pb_getchartime+0xa0>
 c1012ac:	e5933000 	ldr	r3, [r3]
 c1012b0:	e2033040 	and	r3, r3, #64	; 0x40
 c1012b4:	e3530000 	cmp	r3, #0
 c1012b8:	0afffffa 	beq	c1012a8 <pb_getchartime+0x48>
    *ms = timer3_stop() / 10;
 c1012bc:	eb0004c4 	bl	c1025d4 <timer3_stop>
 c1012c0:	e1a03000 	mov	r3, r0
 c1012c4:	e1a02003 	mov	r2, r3
 c1012c8:	e59f3034 	ldr	r3, [pc, #52]	; c101304 <pb_getchartime+0xa4>
 c1012cc:	e0831392 	umull	r1, r3, r2, r3
 c1012d0:	e1a031a3 	lsr	r3, r3, #3
 c1012d4:	e1a03803 	lsl	r3, r3, #16
 c1012d8:	e1a02823 	lsr	r2, r3, #16
 c1012dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1012e0:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( PB_KEYUP_DELAY );
 c1012e4:	e3a00064 	mov	r0, #100	; 0x64
 c1012e8:	eb00041f 	bl	c10236c <sw_delay_ms>

    return scancode;
 c1012ec:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c1012f0:	e1a00003 	mov	r0, r3
 c1012f4:	e24bd00c 	sub	sp, fp, #12
 c1012f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1012fc:	e12fff1e 	bx	lr
 c101300:	01d20044 	.word	0x01d20044
 c101304:	cccccccd 	.word	0xcccccccd

0c101308 <pbs_open>:

void pbs_open( void (*isr)(void) )
{
 c101308:	e1a0c00d 	mov	ip, sp
 c10130c:	e92dd800 	push	{fp, ip, lr, pc}
 c101310:	e24cb004 	sub	fp, ip, #4
 c101314:	e24dd008 	sub	sp, sp, #8
 c101318:	e50b0010 	str	r0, [fp, #-16]
    pISR_PB   = (uint32) isr;
 c10131c:	e59f303c 	ldr	r3, [pc, #60]	; c101360 <pbs_open+0x58>
 c101320:	e51b2010 	ldr	r2, [fp, #-16]
 c101324:	e5832000 	str	r2, [r3]
    EXTINTPND = PB_LEFT | PB_RIGHT;// no estoy seguro
 c101328:	e59f3034 	ldr	r3, [pc, #52]	; c101364 <pbs_open+0x5c>
 c10132c:	e3a020c0 	mov	r2, #192	; 0xc0
 c101330:	e5832000 	str	r2, [r3]
    I_ISPC    = BIT_PB;
 c101334:	e59f302c 	ldr	r3, [pc, #44]	; c101368 <pbs_open+0x60>
 c101338:	e3a02602 	mov	r2, #2097152	; 0x200000
 c10133c:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_PB);
 c101340:	e59f3024 	ldr	r3, [pc, #36]	; c10136c <pbs_open+0x64>
 c101344:	e59f2020 	ldr	r2, [pc, #32]	; c10136c <pbs_open+0x64>
 c101348:	e5922000 	ldr	r2, [r2]
 c10134c:	e3c22602 	bic	r2, r2, #2097152	; 0x200000
 c101350:	e5832000 	str	r2, [r3]
}
 c101354:	e24bd00c 	sub	sp, fp, #12
 c101358:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10135c:	e12fff1e 	bx	lr
 c101360:	0c7fff74 	.word	0x0c7fff74
 c101364:	01d20054 	.word	0x01d20054
 c101368:	01e00024 	.word	0x01e00024
 c10136c:	01e0000c 	.word	0x01e0000c

0c101370 <pbs_close>:

void pbs_close( void )
{
 c101370:	e1a0c00d 	mov	ip, sp
 c101374:	e92dd800 	push	{fp, ip, lr, pc}
 c101378:	e24cb004 	sub	fp, ip, #4
    INTMSK  |= BIT_PB;
 c10137c:	e59f3024 	ldr	r3, [pc, #36]	; c1013a8 <pbs_close+0x38>
 c101380:	e59f2020 	ldr	r2, [pc, #32]	; c1013a8 <pbs_close+0x38>
 c101384:	e5922000 	ldr	r2, [r2]
 c101388:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 c10138c:	e5832000 	str	r2, [r3]
    pISR_PB  = (uint32) isr_PB_dummy;
 c101390:	e59f3014 	ldr	r3, [pc, #20]	; c1013ac <pbs_close+0x3c>
 c101394:	e59f2014 	ldr	r2, [pc, #20]	; c1013b0 <pbs_close+0x40>
 c101398:	e5832000 	str	r2, [r3]
}
 c10139c:	e24bd00c 	sub	sp, fp, #12
 c1013a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1013a4:	e12fff1e 	bx	lr
 c1013a8:	01e0000c 	.word	0x01e0000c
 c1013ac:	0c7fff74 	.word	0x0c7fff74
 c1013b0:	0c101d74 	.word	0x0c101d74

0c1013b4 <sys_init>:
static inline void install_dummy_isr( void );
static inline void show_sys_info( void );
static void sys_recovery( void );
inline void sleep(void);

void sys_init(void) {
 c1013b4:	e1a0c00d 	mov	ip, sp
 c1013b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1013bc:	e24cb004 	sub	fp, ip, #4
 c1013c0:	e24dd008 	sub	sp, sp, #8
	uint8 mode;

	WTCON = 0;
 c1013c4:	e59f30fc 	ldr	r3, [pc, #252]	; c1014c8 <sys_init+0x114>
 c1013c8:	e3a02000 	mov	r2, #0
 c1013cc:	e5832000 	str	r2, [r3]
	INTMSK = ~(1 << 26);
 c1013d0:	e59f30f4 	ldr	r3, [pc, #244]	; c1014cc <sys_init+0x118>
 c1013d4:	e3e02301 	mvn	r2, #67108864	; 0x4000000
 c1013d8:	e5832000 	str	r2, [r3]

	GET_OPMODE(&mode);    // lee el modo de ejecución del procesador
 c1013dc:	e10f0000 	mrs	r0, CPSR
 c1013e0:	e200001f 	and	r0, r0, #31
 c1013e4:	e54b000d 	strb	r0, [fp, #-13]
	if ( mode != SVCMODE)
 c1013e8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1013ec:	e3530013 	cmp	r3, #19
 c1013f0:	0a000000 	beq	c1013f8 <sys_init+0x44>
		sys_recovery(); // si no es SVC (por una reejecución de la aplicación tras una excepción sin reset HW previo) recupera el modo SVC y restaura las pilas del sistema
 c1013f4:	eb0002a5 	bl	c101e90 <sys_recovery>

	LOCKTIME = 0xFFF;
 c1013f8:	e59f30d0 	ldr	r3, [pc, #208]	; c1014d0 <sys_init+0x11c>
 c1013fc:	e59f20d0 	ldr	r2, [pc, #208]	; c1014d4 <sys_init+0x120>
 c101400:	e5832000 	str	r2, [r3]
	PLLCON = 0x38021;
 c101404:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c101408:	e59f20c8 	ldr	r2, [pc, #200]	; c1014d8 <sys_init+0x124>
 c10140c:	e5832000 	str	r2, [r3]
	CLKSLOW = 0x8;
 c101410:	e59f30c4 	ldr	r3, [pc, #196]	; c1014dc <sys_init+0x128>
 c101414:	e3a02008 	mov	r2, #8
 c101418:	e5832000 	str	r2, [r3]
	CLKCON = 0x7FF8;
 c10141c:	e59f30bc 	ldr	r3, [pc, #188]	; c1014e0 <sys_init+0x12c>
 c101420:	e59f20bc 	ldr	r2, [pc, #188]	; c1014e4 <sys_init+0x130>
 c101424:	e5832000 	str	r2, [r3]

	SBUSCON = 0x8000001B;
 c101428:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c10142c:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c101430:	e5832000 	str	r2, [r3]

	SYSCFG = 0x0;
 c101434:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c101438:	e3a02000 	mov	r2, #0
 c10143c:	e5832000 	str	r2, [r3]

	I_PMST = 0x1f1b;
 c101440:	e59f30a0 	ldr	r3, [pc, #160]	; c1014e8 <sys_init+0x134>
 c101444:	e59f20a0 	ldr	r2, [pc, #160]	; c1014ec <sys_init+0x138>
 c101448:	e5832000 	str	r2, [r3]
	I_PSLV = 0x1b1b1b1b;
 c10144c:	e59f309c 	ldr	r3, [pc, #156]	; c1014f0 <sys_init+0x13c>
 c101450:	e59f209c 	ldr	r2, [pc, #156]	; c1014f4 <sys_init+0x140>
 c101454:	e5832000 	str	r2, [r3]
	INTMOD = 0x0;
 c101458:	e59f3098 	ldr	r3, [pc, #152]	; c1014f8 <sys_init+0x144>
 c10145c:	e3a02000 	mov	r2, #0
 c101460:	e5832000 	str	r2, [r3]
	install_dummy_isr();
 c101464:	eb000088 	bl	c10168c <install_dummy_isr>
	EXTINTPND = 0x0;     //creo que esta bien
 c101468:	e59f308c 	ldr	r3, [pc, #140]	; c1014fc <sys_init+0x148>
 c10146c:	e3a02000 	mov	r2, #0
 c101470:	e5832000 	str	r2, [r3]
	I_ISPC = 0x1;     //creo que esta bien
 c101474:	e59f3084 	ldr	r3, [pc, #132]	; c101500 <sys_init+0x14c>
 c101478:	e3a02001 	mov	r2, #1
 c10147c:	e5832000 	str	r2, [r3]
	INTCON = 0x1;
 c101480:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c101484:	e3a02001 	mov	r2, #1
 c101488:	e5832000 	str	r2, [r3]
	SET_IRQFLAG(0);
 c10148c:	e10f0000 	mrs	r0, CPSR
 c101490:	e3c00080 	bic	r0, r0, #128	; 0x80
 c101494:	e3800000 	orr	r0, r0, #0
 c101498:	e121f000 	msr	CPSR_c, r0
	SET_FIQFLAG(1);
 c10149c:	e10f0000 	mrs	r0, CPSR
 c1014a0:	e3c00040 	bic	r0, r0, #64	; 0x40
 c1014a4:	e3800040 	orr	r0, r0, #64	; 0x40
 c1014a8:	e121f000 	msr	CPSR_c, r0

	port_init();
 c1014ac:	eb000014 	bl	c101504 <port_init>
	segs_init();
 c1014b0:	eb000713 	bl	c103104 <segs_init>
	uart0_init();
 c1014b4:	eb000591 	bl	c102b00 <uart0_init>

	show_sys_info();
 c1014b8:	eb00025f 	bl	c101e3c <show_sys_info>
}
 c1014bc:	e24bd00c 	sub	sp, fp, #12
 c1014c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1014c4:	e12fff1e 	bx	lr
 c1014c8:	01d30000 	.word	0x01d30000
 c1014cc:	01e0000c 	.word	0x01e0000c
 c1014d0:	01d8000c 	.word	0x01d8000c
 c1014d4:	00000fff 	.word	0x00000fff
 c1014d8:	00038021 	.word	0x00038021
 c1014dc:	01d80008 	.word	0x01d80008
 c1014e0:	01d80004 	.word	0x01d80004
 c1014e4:	00007ff8 	.word	0x00007ff8
 c1014e8:	01e00014 	.word	0x01e00014
 c1014ec:	00001f1b 	.word	0x00001f1b
 c1014f0:	01e00010 	.word	0x01e00010
 c1014f4:	1b1b1b1b 	.word	0x1b1b1b1b
 c1014f8:	01e00008 	.word	0x01e00008
 c1014fc:	01d20054 	.word	0x01d20054
 c101500:	01e00024 	.word	0x01e00024

0c101504 <port_init>:

static void port_init(void) {
 c101504:	e1a0c00d 	mov	ip, sp
 c101508:	e92dd800 	push	{fp, ip, lr, pc}
 c10150c:	e24cb004 	sub	fp, ip, #4
	PDATA = ~0;
 c101510:	e59f3100 	ldr	r3, [pc, #256]	; c101618 <port_init+0x114>
 c101514:	e3e02000 	mvn	r2, #0
 c101518:	e5832000 	str	r2, [r3]
	PCONA = 0xfe;
 c10151c:	e59f30f8 	ldr	r3, [pc, #248]	; c10161c <port_init+0x118>
 c101520:	e3a020fe 	mov	r2, #254	; 0xfe
 c101524:	e5832000 	str	r2, [r3]

	PDATB = ~0;
 c101528:	e59f30f0 	ldr	r3, [pc, #240]	; c101620 <port_init+0x11c>
 c10152c:	e3e02000 	mvn	r2, #0
 c101530:	e5832000 	str	r2, [r3]
	PCONB = 0x14f;
 c101534:	e59f30e8 	ldr	r3, [pc, #232]	; c101624 <port_init+0x120>
 c101538:	e59f20e8 	ldr	r2, [pc, #232]	; c101628 <port_init+0x124>
 c10153c:	e5832000 	str	r2, [r3]

	PDATC = ~0;
 c101540:	e59f30e4 	ldr	r3, [pc, #228]	; c10162c <port_init+0x128>
 c101544:	e3e02000 	mvn	r2, #0
 c101548:	e5832000 	str	r2, [r3]
	PCONC = 0x5ff555ff;
 c10154c:	e59f30dc 	ldr	r3, [pc, #220]	; c101630 <port_init+0x12c>
 c101550:	e59f20dc 	ldr	r2, [pc, #220]	; c101634 <port_init+0x130>
 c101554:	e5832000 	str	r2, [r3]
	PUPC = 0x94fb;
 c101558:	e59f30d8 	ldr	r3, [pc, #216]	; c101638 <port_init+0x134>
 c10155c:	e59f20d8 	ldr	r2, [pc, #216]	; c10163c <port_init+0x138>
 c101560:	e5832000 	str	r2, [r3]

	PDATD = ~0;
 c101564:	e59f30d4 	ldr	r3, [pc, #212]	; c101640 <port_init+0x13c>
 c101568:	e3e02000 	mvn	r2, #0
 c10156c:	e5832000 	str	r2, [r3]
	PCOND = 0xaaaa;
 c101570:	e59f30cc 	ldr	r3, [pc, #204]	; c101644 <port_init+0x140>
 c101574:	e59f20cc 	ldr	r2, [pc, #204]	; c101648 <port_init+0x144>
 c101578:	e5832000 	str	r2, [r3]
	PUPD = 0xff;
 c10157c:	e59f30c8 	ldr	r3, [pc, #200]	; c10164c <port_init+0x148>
 c101580:	e3a020ff 	mov	r2, #255	; 0xff
 c101584:	e5832000 	str	r2, [r3]

	PDATE = ~0;
 c101588:	e59f30c0 	ldr	r3, [pc, #192]	; c101650 <port_init+0x14c>
 c10158c:	e3e02000 	mvn	r2, #0
 c101590:	e5832000 	str	r2, [r3]
	PCONE = 0x255a9;
 c101594:	e59f30b8 	ldr	r3, [pc, #184]	; c101654 <port_init+0x150>
 c101598:	e59f20b8 	ldr	r2, [pc, #184]	; c101658 <port_init+0x154>
 c10159c:	e5832000 	str	r2, [r3]
	PUPE = 0xfb;
 c1015a0:	e59f30b4 	ldr	r3, [pc, #180]	; c10165c <port_init+0x158>
 c1015a4:	e3a020fb 	mov	r2, #251	; 0xfb
 c1015a8:	e5832000 	str	r2, [r3]

	PDATF = ~0;
 c1015ac:	e59f30ac 	ldr	r3, [pc, #172]	; c101660 <port_init+0x15c>
 c1015b0:	e3e02000 	mvn	r2, #0
 c1015b4:	e5832000 	str	r2, [r3]
	PCONF = 0x251a;
 c1015b8:	e59f30a4 	ldr	r3, [pc, #164]	; c101664 <port_init+0x160>
 c1015bc:	e59f20a4 	ldr	r2, [pc, #164]	; c101668 <port_init+0x164>
 c1015c0:	e5832000 	str	r2, [r3]
	PUPF = 0x74;
 c1015c4:	e59f30a0 	ldr	r3, [pc, #160]	; c10166c <port_init+0x168>
 c1015c8:	e3a02074 	mov	r2, #116	; 0x74
 c1015cc:	e5832000 	str	r2, [r3]

	PDATG = ~0;
 c1015d0:	e59f3098 	ldr	r3, [pc, #152]	; c101670 <port_init+0x16c>
 c1015d4:	e3e02000 	mvn	r2, #0
 c1015d8:	e5832000 	str	r2, [r3]
	PCONG = 0xf5ff;
 c1015dc:	e59f3090 	ldr	r3, [pc, #144]	; c101674 <port_init+0x170>
 c1015e0:	e59f2090 	ldr	r2, [pc, #144]	; c101678 <port_init+0x174>
 c1015e4:	e5832000 	str	r2, [r3]
	PUPG = 0x30;
 c1015e8:	e59f308c 	ldr	r3, [pc, #140]	; c10167c <port_init+0x178>
 c1015ec:	e3a02030 	mov	r2, #48	; 0x30
 c1015f0:	e5832000 	str	r2, [r3]

	SPUCR = 0x7;
 c1015f4:	e59f3084 	ldr	r3, [pc, #132]	; c101680 <port_init+0x17c>
 c1015f8:	e3a02007 	mov	r2, #7
 c1015fc:	e5832000 	str	r2, [r3]

	EXTINT = 0x22000220;
 c101600:	e59f307c 	ldr	r3, [pc, #124]	; c101684 <port_init+0x180>
 c101604:	e59f207c 	ldr	r2, [pc, #124]	; c101688 <port_init+0x184>
 c101608:	e5832000 	str	r2, [r3]
}
 c10160c:	e24bd00c 	sub	sp, fp, #12
 c101610:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101614:	e12fff1e 	bx	lr
 c101618:	01d20004 	.word	0x01d20004
 c10161c:	01d20000 	.word	0x01d20000
 c101620:	01d2000c 	.word	0x01d2000c
 c101624:	01d20008 	.word	0x01d20008
 c101628:	0000014f 	.word	0x0000014f
 c10162c:	01d20014 	.word	0x01d20014
 c101630:	01d20010 	.word	0x01d20010
 c101634:	5ff555ff 	.word	0x5ff555ff
 c101638:	01d20018 	.word	0x01d20018
 c10163c:	000094fb 	.word	0x000094fb
 c101640:	01d20020 	.word	0x01d20020
 c101644:	01d2001c 	.word	0x01d2001c
 c101648:	0000aaaa 	.word	0x0000aaaa
 c10164c:	01d20024 	.word	0x01d20024
 c101650:	01d2002c 	.word	0x01d2002c
 c101654:	01d20028 	.word	0x01d20028
 c101658:	000255a9 	.word	0x000255a9
 c10165c:	01d20030 	.word	0x01d20030
 c101660:	01d20038 	.word	0x01d20038
 c101664:	01d20034 	.word	0x01d20034
 c101668:	0000251a 	.word	0x0000251a
 c10166c:	01d2003c 	.word	0x01d2003c
 c101670:	01d20044 	.word	0x01d20044
 c101674:	01d20040 	.word	0x01d20040
 c101678:	0000f5ff 	.word	0x0000f5ff
 c10167c:	01d20048 	.word	0x01d20048
 c101680:	01d2004c 	.word	0x01d2004c
 c101684:	01d20050 	.word	0x01d20050
 c101688:	22000220 	.word	0x22000220

0c10168c <install_dummy_isr>:
//A LO MEJOR EL ORDEN ESTA MAL
static void install_dummy_isr(void) {
 c10168c:	e1a0c00d 	mov	ip, sp
 c101690:	e92dd800 	push	{fp, ip, lr, pc}
 c101694:	e24cb004 	sub	fp, ip, #4
	pISR_UNDEF = (uint32) isr_UNDEF_dummy;
 c101698:	e59f3184 	ldr	r3, [pc, #388]	; c101824 <install_dummy_isr+0x198>
 c10169c:	e59f2184 	ldr	r2, [pc, #388]	; c101828 <install_dummy_isr+0x19c>
 c1016a0:	e5832000 	str	r2, [r3]
	pISR_SWI = (uint32) isr_SWI_dummy;
 c1016a4:	e59f3180 	ldr	r3, [pc, #384]	; c10182c <install_dummy_isr+0x1a0>
 c1016a8:	e59f2180 	ldr	r2, [pc, #384]	; c101830 <install_dummy_isr+0x1a4>
 c1016ac:	e5832000 	str	r2, [r3]
	pISR_PABORT = (uint32) isr_PABORT_dummy;
 c1016b0:	e59f317c 	ldr	r3, [pc, #380]	; c101834 <install_dummy_isr+0x1a8>
 c1016b4:	e59f217c 	ldr	r2, [pc, #380]	; c101838 <install_dummy_isr+0x1ac>
 c1016b8:	e5832000 	str	r2, [r3]
	pISR_DABORT = (uint32) isr_DABORT_dummy;
 c1016bc:	e59f3178 	ldr	r3, [pc, #376]	; c10183c <install_dummy_isr+0x1b0>
 c1016c0:	e59f2178 	ldr	r2, [pc, #376]	; c101840 <install_dummy_isr+0x1b4>
 c1016c4:	e5832000 	str	r2, [r3]
	pISR_IRQ = (uint32) isr_IRQ_dummy;
 c1016c8:	e59f3174 	ldr	r3, [pc, #372]	; c101844 <install_dummy_isr+0x1b8>
 c1016cc:	e59f2174 	ldr	r2, [pc, #372]	; c101848 <install_dummy_isr+0x1bc>
 c1016d0:	e5832000 	str	r2, [r3]
	pISR_FIQ = (uint32) isr_FIQ_dummy;
 c1016d4:	e59f3170 	ldr	r3, [pc, #368]	; c10184c <install_dummy_isr+0x1c0>
 c1016d8:	e59f2170 	ldr	r2, [pc, #368]	; c101850 <install_dummy_isr+0x1c4>
 c1016dc:	e5832000 	str	r2, [r3]
	pISR_ADC = (uint32) isr_ADC_dummy;
 c1016e0:	e59f316c 	ldr	r3, [pc, #364]	; c101854 <install_dummy_isr+0x1c8>
 c1016e4:	e59f216c 	ldr	r2, [pc, #364]	; c101858 <install_dummy_isr+0x1cc>
 c1016e8:	e5832000 	str	r2, [r3]
	pISR_RTC = (uint32) isr_RTC_dummy;
 c1016ec:	e59f3168 	ldr	r3, [pc, #360]	; c10185c <install_dummy_isr+0x1d0>
 c1016f0:	e59f2168 	ldr	r2, [pc, #360]	; c101860 <install_dummy_isr+0x1d4>
 c1016f4:	e5832000 	str	r2, [r3]
	pISR_UTXD1 = (uint32) isr_UTXD1_dummy;
 c1016f8:	e59f3164 	ldr	r3, [pc, #356]	; c101864 <install_dummy_isr+0x1d8>
 c1016fc:	e59f2164 	ldr	r2, [pc, #356]	; c101868 <install_dummy_isr+0x1dc>
 c101700:	e5832000 	str	r2, [r3]
	pISR_UTXD0 = (uint32) isr_UTXD0_dummy;
 c101704:	e59f3160 	ldr	r3, [pc, #352]	; c10186c <install_dummy_isr+0x1e0>
 c101708:	e59f2160 	ldr	r2, [pc, #352]	; c101870 <install_dummy_isr+0x1e4>
 c10170c:	e5832000 	str	r2, [r3]
	pISR_SIO = (uint32) isr_SIO_dummy;
 c101710:	e59f315c 	ldr	r3, [pc, #348]	; c101874 <install_dummy_isr+0x1e8>
 c101714:	e59f215c 	ldr	r2, [pc, #348]	; c101878 <install_dummy_isr+0x1ec>
 c101718:	e5832000 	str	r2, [r3]
	pISR_IIC = (uint32) isr_IIC_dummy;
 c10171c:	e59f3158 	ldr	r3, [pc, #344]	; c10187c <install_dummy_isr+0x1f0>
 c101720:	e59f2158 	ldr	r2, [pc, #344]	; c101880 <install_dummy_isr+0x1f4>
 c101724:	e5832000 	str	r2, [r3]
	pISR_URXD1 = (uint32) isr_URXD1_dummy;
 c101728:	e59f3154 	ldr	r3, [pc, #340]	; c101884 <install_dummy_isr+0x1f8>
 c10172c:	e59f2154 	ldr	r2, [pc, #340]	; c101888 <install_dummy_isr+0x1fc>
 c101730:	e5832000 	str	r2, [r3]
	pISR_URXD0 = (uint32) isr_URXD0_dummy;
 c101734:	e59f3150 	ldr	r3, [pc, #336]	; c10188c <install_dummy_isr+0x200>
 c101738:	e59f2150 	ldr	r2, [pc, #336]	; c101890 <install_dummy_isr+0x204>
 c10173c:	e5832000 	str	r2, [r3]
	pISR_TIMER5 = (uint32) isr_TIMER5_dummy;
 c101740:	e59f314c 	ldr	r3, [pc, #332]	; c101894 <install_dummy_isr+0x208>
 c101744:	e59f214c 	ldr	r2, [pc, #332]	; c101898 <install_dummy_isr+0x20c>
 c101748:	e5832000 	str	r2, [r3]
	pISR_TIMER4 = (uint32) isr_TIMER4_dummy;
 c10174c:	e59f3148 	ldr	r3, [pc, #328]	; c10189c <install_dummy_isr+0x210>
 c101750:	e59f2148 	ldr	r2, [pc, #328]	; c1018a0 <install_dummy_isr+0x214>
 c101754:	e5832000 	str	r2, [r3]
	pISR_TIMER3 = (uint32) isr_TIMER3_dummy;
 c101758:	e59f3144 	ldr	r3, [pc, #324]	; c1018a4 <install_dummy_isr+0x218>
 c10175c:	e59f2144 	ldr	r2, [pc, #324]	; c1018a8 <install_dummy_isr+0x21c>
 c101760:	e5832000 	str	r2, [r3]
	pISR_TIMER2 = (uint32) isr_TIMER2_dummy;
 c101764:	e59f3140 	ldr	r3, [pc, #320]	; c1018ac <install_dummy_isr+0x220>
 c101768:	e59f2140 	ldr	r2, [pc, #320]	; c1018b0 <install_dummy_isr+0x224>
 c10176c:	e5832000 	str	r2, [r3]
	pISR_TIMER1 = (uint32) isr_TIMER1_dummy;
 c101770:	e59f313c 	ldr	r3, [pc, #316]	; c1018b4 <install_dummy_isr+0x228>
 c101774:	e59f213c 	ldr	r2, [pc, #316]	; c1018b8 <install_dummy_isr+0x22c>
 c101778:	e5832000 	str	r2, [r3]
	pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c10177c:	e59f3138 	ldr	r3, [pc, #312]	; c1018bc <install_dummy_isr+0x230>
 c101780:	e59f2138 	ldr	r2, [pc, #312]	; c1018c0 <install_dummy_isr+0x234>
 c101784:	e5832000 	str	r2, [r3]
	pISR_UERR01 = (uint32) isr_UERR01_dummy;
 c101788:	e59f3134 	ldr	r3, [pc, #308]	; c1018c4 <install_dummy_isr+0x238>
 c10178c:	e59f2134 	ldr	r2, [pc, #308]	; c1018c8 <install_dummy_isr+0x23c>
 c101790:	e5832000 	str	r2, [r3]
	pISR_WDT = (uint32) isr_WDT_dummy;
 c101794:	e59f3130 	ldr	r3, [pc, #304]	; c1018cc <install_dummy_isr+0x240>
 c101798:	e59f2130 	ldr	r2, [pc, #304]	; c1018d0 <install_dummy_isr+0x244>
 c10179c:	e5832000 	str	r2, [r3]
	pISR_BDMA1 = (uint32) isr_BDMA1_dummy;
 c1017a0:	e59f312c 	ldr	r3, [pc, #300]	; c1018d4 <install_dummy_isr+0x248>
 c1017a4:	e59f212c 	ldr	r2, [pc, #300]	; c1018d8 <install_dummy_isr+0x24c>
 c1017a8:	e5832000 	str	r2, [r3]
	pISR_BDMA0 = (uint32) isr_BDMA0_dummy;
 c1017ac:	e59f3128 	ldr	r3, [pc, #296]	; c1018dc <install_dummy_isr+0x250>
 c1017b0:	e59f2128 	ldr	r2, [pc, #296]	; c1018e0 <install_dummy_isr+0x254>
 c1017b4:	e5832000 	str	r2, [r3]
	pISR_ZDMA1 = (uint32) isr_ZDMA1_dummy;
 c1017b8:	e59f3124 	ldr	r3, [pc, #292]	; c1018e4 <install_dummy_isr+0x258>
 c1017bc:	e59f2124 	ldr	r2, [pc, #292]	; c1018e8 <install_dummy_isr+0x25c>
 c1017c0:	e5832000 	str	r2, [r3]
	pISR_ZDMA0 = (uint32) isr_ZDMA0_dummy;
 c1017c4:	e59f3120 	ldr	r3, [pc, #288]	; c1018ec <install_dummy_isr+0x260>
 c1017c8:	e59f2120 	ldr	r2, [pc, #288]	; c1018f0 <install_dummy_isr+0x264>
 c1017cc:	e5832000 	str	r2, [r3]
	pISR_PB = (uint32) isr_PB_dummy;
 c1017d0:	e59f311c 	ldr	r3, [pc, #284]	; c1018f4 <install_dummy_isr+0x268>
 c1017d4:	e59f211c 	ldr	r2, [pc, #284]	; c1018f8 <install_dummy_isr+0x26c>
 c1017d8:	e5832000 	str	r2, [r3]
	pISR_ETHERNET = (uint32) isr_ETHERNET_dummy;
 c1017dc:	e59f3118 	ldr	r3, [pc, #280]	; c1018fc <install_dummy_isr+0x270>
 c1017e0:	e59f2118 	ldr	r2, [pc, #280]	; c101900 <install_dummy_isr+0x274>
 c1017e4:	e5832000 	str	r2, [r3]
	pISR_TICK = (uint32) isr_TICK_dummy;
 c1017e8:	e59f3114 	ldr	r3, [pc, #276]	; c101904 <install_dummy_isr+0x278>
 c1017ec:	e59f2114 	ldr	r2, [pc, #276]	; c101908 <install_dummy_isr+0x27c>
 c1017f0:	e5832000 	str	r2, [r3]
	pISR_TS = (uint32) isr_TS_dummy;
 c1017f4:	e59f3110 	ldr	r3, [pc, #272]	; c10190c <install_dummy_isr+0x280>
 c1017f8:	e59f2110 	ldr	r2, [pc, #272]	; c101910 <install_dummy_isr+0x284>
 c1017fc:	e5832000 	str	r2, [r3]
	pISR_KEYPAD = (uint32) isr_KEYPAD_dummy;
 c101800:	e59f310c 	ldr	r3, [pc, #268]	; c101914 <install_dummy_isr+0x288>
 c101804:	e59f210c 	ldr	r2, [pc, #268]	; c101918 <install_dummy_isr+0x28c>
 c101808:	e5832000 	str	r2, [r3]
	pISR_USB = (uint32) isr_USB_dummy;
 c10180c:	e59f3108 	ldr	r3, [pc, #264]	; c10191c <install_dummy_isr+0x290>
 c101810:	e59f2108 	ldr	r2, [pc, #264]	; c101920 <install_dummy_isr+0x294>
 c101814:	e5832000 	str	r2, [r3]
}
 c101818:	e24bd00c 	sub	sp, fp, #12
 c10181c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101820:	e12fff1e 	bx	lr
 c101824:	0c7fff04 	.word	0x0c7fff04
 c101828:	0c101950 	.word	0x0c101950
 c10182c:	0c7fff08 	.word	0x0c7fff08
 c101830:	0c101924 	.word	0x0c101924
 c101834:	0c7fff0c 	.word	0x0c7fff0c
 c101838:	0c1019d4 	.word	0x0c1019d4
 c10183c:	0c7fff10 	.word	0x0c7fff10
 c101840:	0c101a00 	.word	0x0c101a00
 c101844:	0c7fff18 	.word	0x0c7fff18
 c101848:	0c10197c 	.word	0x0c10197c
 c10184c:	0c7fff1c 	.word	0x0c7fff1c
 c101850:	0c1019a8 	.word	0x0c1019a8
 c101854:	0c7fff20 	.word	0x0c7fff20
 c101858:	0c101a2c 	.word	0x0c101a2c
 c10185c:	0c7fff24 	.word	0x0c7fff24
 c101860:	0c101a54 	.word	0x0c101a54
 c101864:	0c7fff28 	.word	0x0c7fff28
 c101868:	0c101a7c 	.word	0x0c101a7c
 c10186c:	0c7fff2c 	.word	0x0c7fff2c
 c101870:	0c101aa4 	.word	0x0c101aa4
 c101874:	0c7fff30 	.word	0x0c7fff30
 c101878:	0c101acc 	.word	0x0c101acc
 c10187c:	0c7fff34 	.word	0x0c7fff34
 c101880:	0c101af4 	.word	0x0c101af4
 c101884:	0c7fff38 	.word	0x0c7fff38
 c101888:	0c101b1c 	.word	0x0c101b1c
 c10188c:	0c7fff3c 	.word	0x0c7fff3c
 c101890:	0c101b44 	.word	0x0c101b44
 c101894:	0c7fff40 	.word	0x0c7fff40
 c101898:	0c101b6c 	.word	0x0c101b6c
 c10189c:	0c7fff44 	.word	0x0c7fff44
 c1018a0:	0c101b94 	.word	0x0c101b94
 c1018a4:	0c7fff48 	.word	0x0c7fff48
 c1018a8:	0c101bbc 	.word	0x0c101bbc
 c1018ac:	0c7fff4c 	.word	0x0c7fff4c
 c1018b0:	0c101be4 	.word	0x0c101be4
 c1018b4:	0c7fff50 	.word	0x0c7fff50
 c1018b8:	0c101c0c 	.word	0x0c101c0c
 c1018bc:	0c7fff54 	.word	0x0c7fff54
 c1018c0:	0c101c34 	.word	0x0c101c34
 c1018c4:	0c7fff58 	.word	0x0c7fff58
 c1018c8:	0c101c5c 	.word	0x0c101c5c
 c1018cc:	0c7fff5c 	.word	0x0c7fff5c
 c1018d0:	0c101c84 	.word	0x0c101c84
 c1018d4:	0c7fff60 	.word	0x0c7fff60
 c1018d8:	0c101cac 	.word	0x0c101cac
 c1018dc:	0c7fff64 	.word	0x0c7fff64
 c1018e0:	0c101cd4 	.word	0x0c101cd4
 c1018e4:	0c7fff68 	.word	0x0c7fff68
 c1018e8:	0c101cfc 	.word	0x0c101cfc
 c1018ec:	0c7fff6c 	.word	0x0c7fff6c
 c1018f0:	0c101d24 	.word	0x0c101d24
 c1018f4:	0c7fff74 	.word	0x0c7fff74
 c1018f8:	0c101d74 	.word	0x0c101d74
 c1018fc:	0c7fff78 	.word	0x0c7fff78
 c101900:	0c101d9c 	.word	0x0c101d9c
 c101904:	0c7fff70 	.word	0x0c7fff70
 c101908:	0c101d4c 	.word	0x0c101d4c
 c10190c:	0c7fff7c 	.word	0x0c7fff7c
 c101910:	0c101dc4 	.word	0x0c101dc4
 c101914:	0c7fff80 	.word	0x0c7fff80
 c101918:	0c101dec 	.word	0x0c101dec
 c10191c:	0c7fff84 	.word	0x0c7fff84
 c101920:	0c101e14 	.word	0x0c101e14

0c101924 <isr_SWI_dummy>:
//NO SE SI SE PONE EN TODOS LOS SEGS 0X75
void isr_SWI_dummy(void) {
 c101924:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101928:	e1a0c00d 	mov	ip, sp
 c10192c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101930:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy");
 c101934:	e59f0010 	ldr	r0, [pc, #16]	; c10194c <isr_SWI_dummy+0x28>
 c101938:	eb0004b3 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c10193c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101940:	e3a02075 	mov	r2, #117	; 0x75
 c101944:	e5c32000 	strb	r2, [r3]
	while (1);
 c101948:	eafffffe 	b	c101948 <isr_SWI_dummy+0x24>
 c10194c:	0c1045ac 	.word	0x0c1045ac

0c101950 <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy(void) {
 c101950:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101954:	e1a0c00d 	mov	ip, sp
 c101958:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10195c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy");
 c101960:	e59f0010 	ldr	r0, [pc, #16]	; c101978 <isr_UNDEF_dummy+0x28>
 c101964:	eb0004a8 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101968:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10196c:	e3a02075 	mov	r2, #117	; 0x75
 c101970:	e5c32000 	strb	r2, [r3]
	while (1);
 c101974:	eafffffe 	b	c101974 <isr_UNDEF_dummy+0x24>
 c101978:	0c1045d8 	.word	0x0c1045d8

0c10197c <isr_IRQ_dummy>:
}

void isr_IRQ_dummy(void) {
 c10197c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101980:	e1a0c00d 	mov	ip, sp
 c101984:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101988:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy");
 c10198c:	e59f0010 	ldr	r0, [pc, #16]	; c1019a4 <isr_IRQ_dummy+0x28>
 c101990:	eb00049d 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101994:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101998:	e3a02075 	mov	r2, #117	; 0x75
 c10199c:	e5c32000 	strb	r2, [r3]
	while (1);
 c1019a0:	eafffffe 	b	c1019a0 <isr_IRQ_dummy+0x24>
 c1019a4:	0c104608 	.word	0x0c104608

0c1019a8 <isr_FIQ_dummy>:
}

void isr_FIQ_dummy(void) {
 c1019a8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1019ac:	e1a0c00d 	mov	ip, sp
 c1019b0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1019b4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy");
 c1019b8:	e59f0010 	ldr	r0, [pc, #16]	; c1019d0 <isr_FIQ_dummy+0x28>
 c1019bc:	eb000492 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c1019c0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1019c4:	e3a02075 	mov	r2, #117	; 0x75
 c1019c8:	e5c32000 	strb	r2, [r3]
	while (1);
 c1019cc:	eafffffe 	b	c1019cc <isr_FIQ_dummy+0x24>
 c1019d0:	0c104634 	.word	0x0c104634

0c1019d4 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy(void) {
 c1019d4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1019d8:	e1a0c00d 	mov	ip, sp
 c1019dc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1019e0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy");
 c1019e4:	e59f0010 	ldr	r0, [pc, #16]	; c1019fc <isr_PABORT_dummy+0x28>
 c1019e8:	eb000487 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c1019ec:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1019f0:	e3a02075 	mov	r2, #117	; 0x75
 c1019f4:	e5c32000 	strb	r2, [r3]
	while (1);
 c1019f8:	eafffffe 	b	c1019f8 <isr_PABORT_dummy+0x24>
 c1019fc:	0c104660 	.word	0x0c104660

0c101a00 <isr_DABORT_dummy>:
}

void isr_DABORT_dummy(void) {
 c101a00:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101a04:	e1a0c00d 	mov	ip, sp
 c101a08:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101a0c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy");
 c101a10:	e59f0010 	ldr	r0, [pc, #16]	; c101a28 <isr_DABORT_dummy+0x28>
 c101a14:	eb00047c 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101a18:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a1c:	e3a02075 	mov	r2, #117	; 0x75
 c101a20:	e5c32000 	strb	r2, [r3]
	while (1);
 c101a24:	eafffffe 	b	c101a24 <isr_DABORT_dummy+0x24>
 c101a28:	0c104690 	.word	0x0c104690

0c101a2c <isr_ADC_dummy>:
}

void isr_ADC_dummy(void) {
 c101a2c:	e1a0c00d 	mov	ip, sp
 c101a30:	e92dd800 	push	{fp, ip, lr, pc}
 c101a34:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy");
 c101a38:	e59f0010 	ldr	r0, [pc, #16]	; c101a50 <isr_ADC_dummy+0x24>
 c101a3c:	eb000472 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101a40:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a44:	e3a02075 	mov	r2, #117	; 0x75
 c101a48:	e5c32000 	strb	r2, [r3]
	while (1);
 c101a4c:	eafffffe 	b	c101a4c <isr_ADC_dummy+0x20>
 c101a50:	0c1046c0 	.word	0x0c1046c0

0c101a54 <isr_RTC_dummy>:
}

void isr_RTC_dummy(void) {
 c101a54:	e1a0c00d 	mov	ip, sp
 c101a58:	e92dd800 	push	{fp, ip, lr, pc}
 c101a5c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy");
 c101a60:	e59f0010 	ldr	r0, [pc, #16]	; c101a78 <isr_RTC_dummy+0x24>
 c101a64:	eb000468 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101a68:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a6c:	e3a02075 	mov	r2, #117	; 0x75
 c101a70:	e5c32000 	strb	r2, [r3]
	while (1);
 c101a74:	eafffffe 	b	c101a74 <isr_RTC_dummy+0x20>
 c101a78:	0c1046ec 	.word	0x0c1046ec

0c101a7c <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy(void) {
 c101a7c:	e1a0c00d 	mov	ip, sp
 c101a80:	e92dd800 	push	{fp, ip, lr, pc}
 c101a84:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy");
 c101a88:	e59f0010 	ldr	r0, [pc, #16]	; c101aa0 <isr_UTXD1_dummy+0x24>
 c101a8c:	eb00045e 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101a90:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a94:	e3a02075 	mov	r2, #117	; 0x75
 c101a98:	e5c32000 	strb	r2, [r3]
	while (1);
 c101a9c:	eafffffe 	b	c101a9c <isr_UTXD1_dummy+0x20>
 c101aa0:	0c104718 	.word	0x0c104718

0c101aa4 <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy(void) {
 c101aa4:	e1a0c00d 	mov	ip, sp
 c101aa8:	e92dd800 	push	{fp, ip, lr, pc}
 c101aac:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy");
 c101ab0:	e59f0010 	ldr	r0, [pc, #16]	; c101ac8 <isr_UTXD0_dummy+0x24>
 c101ab4:	eb000454 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101ab8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101abc:	e3a02075 	mov	r2, #117	; 0x75
 c101ac0:	e5c32000 	strb	r2, [r3]
	while (1);
 c101ac4:	eafffffe 	b	c101ac4 <isr_UTXD0_dummy+0x20>
 c101ac8:	0c104748 	.word	0x0c104748

0c101acc <isr_SIO_dummy>:
}

void isr_SIO_dummy(void) {
 c101acc:	e1a0c00d 	mov	ip, sp
 c101ad0:	e92dd800 	push	{fp, ip, lr, pc}
 c101ad4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy");
 c101ad8:	e59f0010 	ldr	r0, [pc, #16]	; c101af0 <isr_SIO_dummy+0x24>
 c101adc:	eb00044a 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101ae0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ae4:	e3a02075 	mov	r2, #117	; 0x75
 c101ae8:	e5c32000 	strb	r2, [r3]
	while (1);
 c101aec:	eafffffe 	b	c101aec <isr_SIO_dummy+0x20>
 c101af0:	0c104778 	.word	0x0c104778

0c101af4 <isr_IIC_dummy>:
}

void isr_IIC_dummy(void) {
 c101af4:	e1a0c00d 	mov	ip, sp
 c101af8:	e92dd800 	push	{fp, ip, lr, pc}
 c101afc:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy");
 c101b00:	e59f0010 	ldr	r0, [pc, #16]	; c101b18 <isr_IIC_dummy+0x24>
 c101b04:	eb000440 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101b08:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b0c:	e3a02075 	mov	r2, #117	; 0x75
 c101b10:	e5c32000 	strb	r2, [r3]
	while (1);
 c101b14:	eafffffe 	b	c101b14 <isr_IIC_dummy+0x20>
 c101b18:	0c1047a4 	.word	0x0c1047a4

0c101b1c <isr_URXD1_dummy>:
}

void isr_URXD1_dummy(void) {
 c101b1c:	e1a0c00d 	mov	ip, sp
 c101b20:	e92dd800 	push	{fp, ip, lr, pc}
 c101b24:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD1_dummy");
 c101b28:	e59f0010 	ldr	r0, [pc, #16]	; c101b40 <isr_URXD1_dummy+0x24>
 c101b2c:	eb000436 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101b30:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b34:	e3a02075 	mov	r2, #117	; 0x75
 c101b38:	e5c32000 	strb	r2, [r3]
	while (1);
 c101b3c:	eafffffe 	b	c101b3c <isr_URXD1_dummy+0x20>
 c101b40:	0c1047d0 	.word	0x0c1047d0

0c101b44 <isr_URXD0_dummy>:
}

void isr_URXD0_dummy(void) {
 c101b44:	e1a0c00d 	mov	ip, sp
 c101b48:	e92dd800 	push	{fp, ip, lr, pc}
 c101b4c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD0_dummy");
 c101b50:	e59f0010 	ldr	r0, [pc, #16]	; c101b68 <isr_URXD0_dummy+0x24>
 c101b54:	eb00042c 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101b58:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b5c:	e3a02075 	mov	r2, #117	; 0x75
 c101b60:	e5c32000 	strb	r2, [r3]
	while (1);
 c101b64:	eafffffe 	b	c101b64 <isr_URXD0_dummy+0x20>
 c101b68:	0c104800 	.word	0x0c104800

0c101b6c <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy(void) {
 c101b6c:	e1a0c00d 	mov	ip, sp
 c101b70:	e92dd800 	push	{fp, ip, lr, pc}
 c101b74:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy");
 c101b78:	e59f0010 	ldr	r0, [pc, #16]	; c101b90 <isr_TIMER5_dummy+0x24>
 c101b7c:	eb000422 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101b80:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b84:	e3a02075 	mov	r2, #117	; 0x75
 c101b88:	e5c32000 	strb	r2, [r3]
	while (1);
 c101b8c:	eafffffe 	b	c101b8c <isr_TIMER5_dummy+0x20>
 c101b90:	0c104830 	.word	0x0c104830

0c101b94 <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy(void) {
 c101b94:	e1a0c00d 	mov	ip, sp
 c101b98:	e92dd800 	push	{fp, ip, lr, pc}
 c101b9c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy");
 c101ba0:	e59f0010 	ldr	r0, [pc, #16]	; c101bb8 <isr_TIMER4_dummy+0x24>
 c101ba4:	eb000418 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101ba8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101bac:	e3a02075 	mov	r2, #117	; 0x75
 c101bb0:	e5c32000 	strb	r2, [r3]
	while (1);
 c101bb4:	eafffffe 	b	c101bb4 <isr_TIMER4_dummy+0x20>
 c101bb8:	0c104860 	.word	0x0c104860

0c101bbc <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy(void) {
 c101bbc:	e1a0c00d 	mov	ip, sp
 c101bc0:	e92dd800 	push	{fp, ip, lr, pc}
 c101bc4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy");
 c101bc8:	e59f0010 	ldr	r0, [pc, #16]	; c101be0 <isr_TIMER3_dummy+0x24>
 c101bcc:	eb00040e 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101bd0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101bd4:	e3a02075 	mov	r2, #117	; 0x75
 c101bd8:	e5c32000 	strb	r2, [r3]
	while (1);
 c101bdc:	eafffffe 	b	c101bdc <isr_TIMER3_dummy+0x20>
 c101be0:	0c104890 	.word	0x0c104890

0c101be4 <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy(void) {
 c101be4:	e1a0c00d 	mov	ip, sp
 c101be8:	e92dd800 	push	{fp, ip, lr, pc}
 c101bec:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c101bf0:	e59f0010 	ldr	r0, [pc, #16]	; c101c08 <isr_TIMER2_dummy+0x24>
 c101bf4:	eb000404 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101bf8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101bfc:	e3a02075 	mov	r2, #117	; 0x75
 c101c00:	e5c32000 	strb	r2, [r3]
	while (1);
 c101c04:	eafffffe 	b	c101c04 <isr_TIMER2_dummy+0x20>
 c101c08:	0c1048c0 	.word	0x0c1048c0

0c101c0c <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy(void) {
 c101c0c:	e1a0c00d 	mov	ip, sp
 c101c10:	e92dd800 	push	{fp, ip, lr, pc}
 c101c14:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c101c18:	e59f0010 	ldr	r0, [pc, #16]	; c101c30 <isr_TIMER1_dummy+0x24>
 c101c1c:	eb0003fa 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101c20:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c24:	e3a02075 	mov	r2, #117	; 0x75
 c101c28:	e5c32000 	strb	r2, [r3]
	while (1);
 c101c2c:	eafffffe 	b	c101c2c <isr_TIMER1_dummy+0x20>
 c101c30:	0c1048c0 	.word	0x0c1048c0

0c101c34 <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy(void) {
 c101c34:	e1a0c00d 	mov	ip, sp
 c101c38:	e92dd800 	push	{fp, ip, lr, pc}
 c101c3c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy");
 c101c40:	e59f0010 	ldr	r0, [pc, #16]	; c101c58 <isr_TIMER0_dummy+0x24>
 c101c44:	eb0003f0 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101c48:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c4c:	e3a02075 	mov	r2, #117	; 0x75
 c101c50:	e5c32000 	strb	r2, [r3]
	while (1);
 c101c54:	eafffffe 	b	c101c54 <isr_TIMER0_dummy+0x20>
 c101c58:	0c1048f0 	.word	0x0c1048f0

0c101c5c <isr_UERR01_dummy>:
}

void isr_UERR01_dummy(void) {
 c101c5c:	e1a0c00d 	mov	ip, sp
 c101c60:	e92dd800 	push	{fp, ip, lr, pc}
 c101c64:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy");
 c101c68:	e59f0010 	ldr	r0, [pc, #16]	; c101c80 <isr_UERR01_dummy+0x24>
 c101c6c:	eb0003e6 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101c70:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c74:	e3a02075 	mov	r2, #117	; 0x75
 c101c78:	e5c32000 	strb	r2, [r3]
	while (1);
 c101c7c:	eafffffe 	b	c101c7c <isr_UERR01_dummy+0x20>
 c101c80:	0c104920 	.word	0x0c104920

0c101c84 <isr_WDT_dummy>:
}

void isr_WDT_dummy(void) {
 c101c84:	e1a0c00d 	mov	ip, sp
 c101c88:	e92dd800 	push	{fp, ip, lr, pc}
 c101c8c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy");
 c101c90:	e59f0010 	ldr	r0, [pc, #16]	; c101ca8 <isr_WDT_dummy+0x24>
 c101c94:	eb0003dc 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101c98:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c9c:	e3a02075 	mov	r2, #117	; 0x75
 c101ca0:	e5c32000 	strb	r2, [r3]
	while (1);
 c101ca4:	eafffffe 	b	c101ca4 <isr_WDT_dummy+0x20>
 c101ca8:	0c104950 	.word	0x0c104950

0c101cac <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy(void) {
 c101cac:	e1a0c00d 	mov	ip, sp
 c101cb0:	e92dd800 	push	{fp, ip, lr, pc}
 c101cb4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy");
 c101cb8:	e59f0010 	ldr	r0, [pc, #16]	; c101cd0 <isr_BDMA1_dummy+0x24>
 c101cbc:	eb0003d2 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101cc0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101cc4:	e3a02075 	mov	r2, #117	; 0x75
 c101cc8:	e5c32000 	strb	r2, [r3]
	while (1);
 c101ccc:	eafffffe 	b	c101ccc <isr_BDMA1_dummy+0x20>
 c101cd0:	0c10497c 	.word	0x0c10497c

0c101cd4 <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy(void) {
 c101cd4:	e1a0c00d 	mov	ip, sp
 c101cd8:	e92dd800 	push	{fp, ip, lr, pc}
 c101cdc:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy");
 c101ce0:	e59f0010 	ldr	r0, [pc, #16]	; c101cf8 <isr_BDMA0_dummy+0x24>
 c101ce4:	eb0003c8 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101ce8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101cec:	e3a02075 	mov	r2, #117	; 0x75
 c101cf0:	e5c32000 	strb	r2, [r3]
	while (1);
 c101cf4:	eafffffe 	b	c101cf4 <isr_BDMA0_dummy+0x20>
 c101cf8:	0c1049ac 	.word	0x0c1049ac

0c101cfc <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy(void) {
 c101cfc:	e1a0c00d 	mov	ip, sp
 c101d00:	e92dd800 	push	{fp, ip, lr, pc}
 c101d04:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy");
 c101d08:	e59f0010 	ldr	r0, [pc, #16]	; c101d20 <isr_ZDMA1_dummy+0x24>
 c101d0c:	eb0003be 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101d10:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d14:	e3a02075 	mov	r2, #117	; 0x75
 c101d18:	e5c32000 	strb	r2, [r3]
	while (1);
 c101d1c:	eafffffe 	b	c101d1c <isr_ZDMA1_dummy+0x20>
 c101d20:	0c1049dc 	.word	0x0c1049dc

0c101d24 <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy(void) {
 c101d24:	e1a0c00d 	mov	ip, sp
 c101d28:	e92dd800 	push	{fp, ip, lr, pc}
 c101d2c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy");
 c101d30:	e59f0010 	ldr	r0, [pc, #16]	; c101d48 <isr_ZDMA0_dummy+0x24>
 c101d34:	eb0003b4 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101d38:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d3c:	e3a02075 	mov	r2, #117	; 0x75
 c101d40:	e5c32000 	strb	r2, [r3]
	while (1);
 c101d44:	eafffffe 	b	c101d44 <isr_ZDMA0_dummy+0x20>
 c101d48:	0c104a0c 	.word	0x0c104a0c

0c101d4c <isr_TICK_dummy>:
}

void isr_TICK_dummy(void) {
 c101d4c:	e1a0c00d 	mov	ip, sp
 c101d50:	e92dd800 	push	{fp, ip, lr, pc}
 c101d54:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy");
 c101d58:	e59f0010 	ldr	r0, [pc, #16]	; c101d70 <isr_TICK_dummy+0x24>
 c101d5c:	eb0003aa 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101d60:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d64:	e3a02075 	mov	r2, #117	; 0x75
 c101d68:	e5c32000 	strb	r2, [r3]
	while (1);
 c101d6c:	eafffffe 	b	c101d6c <isr_TICK_dummy+0x20>
 c101d70:	0c104a3c 	.word	0x0c104a3c

0c101d74 <isr_PB_dummy>:
}

void isr_PB_dummy(void) {
 c101d74:	e1a0c00d 	mov	ip, sp
 c101d78:	e92dd800 	push	{fp, ip, lr, pc}
 c101d7c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PB_dummy");
 c101d80:	e59f0010 	ldr	r0, [pc, #16]	; c101d98 <isr_PB_dummy+0x24>
 c101d84:	eb0003a0 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101d88:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d8c:	e3a02075 	mov	r2, #117	; 0x75
 c101d90:	e5c32000 	strb	r2, [r3]
	while (1);
 c101d94:	eafffffe 	b	c101d94 <isr_PB_dummy+0x20>
 c101d98:	0c104a6c 	.word	0x0c104a6c

0c101d9c <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy(void) {
 c101d9c:	e1a0c00d 	mov	ip, sp
 c101da0:	e92dd800 	push	{fp, ip, lr, pc}
 c101da4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy");
 c101da8:	e59f0010 	ldr	r0, [pc, #16]	; c101dc0 <isr_ETHERNET_dummy+0x24>
 c101dac:	eb000396 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101db0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101db4:	e3a02075 	mov	r2, #117	; 0x75
 c101db8:	e5c32000 	strb	r2, [r3]
	while (1);
 c101dbc:	eafffffe 	b	c101dbc <isr_ETHERNET_dummy+0x20>
 c101dc0:	0c104a98 	.word	0x0c104a98

0c101dc4 <isr_TS_dummy>:
}

void isr_TS_dummy(void) {
 c101dc4:	e1a0c00d 	mov	ip, sp
 c101dc8:	e92dd800 	push	{fp, ip, lr, pc}
 c101dcc:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TS_dummy");
 c101dd0:	e59f0010 	ldr	r0, [pc, #16]	; c101de8 <isr_TS_dummy+0x24>
 c101dd4:	eb00038c 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101dd8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ddc:	e3a02075 	mov	r2, #117	; 0x75
 c101de0:	e5c32000 	strb	r2, [r3]
	while (1);
 c101de4:	eafffffe 	b	c101de4 <isr_TS_dummy+0x20>
 c101de8:	0c104acc 	.word	0x0c104acc

0c101dec <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy(void) {
 c101dec:	e1a0c00d 	mov	ip, sp
 c101df0:	e92dd800 	push	{fp, ip, lr, pc}
 c101df4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy");
 c101df8:	e59f0010 	ldr	r0, [pc, #16]	; c101e10 <isr_KEYPAD_dummy+0x24>
 c101dfc:	eb000382 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101e00:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101e04:	e3a02075 	mov	r2, #117	; 0x75
 c101e08:	e5c32000 	strb	r2, [r3]
	while (1);
 c101e0c:	eafffffe 	b	c101e0c <isr_KEYPAD_dummy+0x20>
 c101e10:	0c104af8 	.word	0x0c104af8

0c101e14 <isr_USB_dummy>:
}

void isr_USB_dummy(void) {
 c101e14:	e1a0c00d 	mov	ip, sp
 c101e18:	e92dd800 	push	{fp, ip, lr, pc}
 c101e1c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_USB_dummy");
 c101e20:	e59f0010 	ldr	r0, [pc, #16]	; c101e38 <isr_USB_dummy+0x24>
 c101e24:	eb000378 	bl	c102c0c <uart0_puts>
	SEGS = 0x75;
 c101e28:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101e2c:	e3a02075 	mov	r2, #117	; 0x75
 c101e30:	e5c32000 	strb	r2, [r3]
	while (1);
 c101e34:	eafffffe 	b	c101e34 <isr_USB_dummy+0x20>
 c101e38:	0c104b28 	.word	0x0c104b28

0c101e3c <show_sys_info>:
}
//NO SE QUE HAY QUE PONER AQUI
static void show_sys_info(void) {
 c101e3c:	e1a0c00d 	mov	ip, sp
 c101e40:	e92dd800 	push	{fp, ip, lr, pc}
 c101e44:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n Choriso");
 c101e48:	e59f000c 	ldr	r0, [pc, #12]	; c101e5c <show_sys_info+0x20>
 c101e4c:	eb00036e 	bl	c102c0c <uart0_puts>
}
 c101e50:	e24bd00c 	sub	sp, fp, #12
 c101e54:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101e58:	e12fff1e 	bx	lr
 c101e5c:	0c104b54 	.word	0x0c104b54

0c101e60 <sleep>:

inline void sleep(void) {
 c101e60:	e1a0c00d 	mov	ip, sp
 c101e64:	e92dd800 	push	{fp, ip, lr, pc}
 c101e68:	e24cb004 	sub	fp, ip, #4
	CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c101e6c:	e59f3018 	ldr	r3, [pc, #24]	; c101e8c <sleep+0x2c>
 c101e70:	e59f2014 	ldr	r2, [pc, #20]	; c101e8c <sleep+0x2c>
 c101e74:	e5922000 	ldr	r2, [r2]
 c101e78:	e3822004 	orr	r2, r2, #4
 c101e7c:	e5832000 	str	r2, [r3]
}
 c101e80:	e24bd00c 	sub	sp, fp, #12
 c101e84:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101e88:	e12fff1e 	bx	lr
 c101e8c:	01d80004 	.word	0x01d80004

0c101e90 <sys_recovery>:

static void sys_recovery(void) {
 c101e90:	e1a0c00d 	mov	ip, sp
 c101e94:	e92dd800 	push	{fp, ip, lr, pc}
 c101e98:	e24cb004 	sub	fp, ip, #4
 c101e9c:	e24dd018 	sub	sp, sp, #24
uint8 mode;
uint32 sp, fp;
uint32 *addrSrc, *addrDst;
uint32 diffStacks;

asm volatile ( "str sp, %0" : "=m" (sp) : : );
 c101ea0:	e50bd01c 	str	sp, [fp, #-28]	; 0xffffffe4
    // lee el puntero a la cima de la pila de excepción (SP)
asm volatile ( "str fp, %0" : "=m" (fp) : : );
 c101ea4:	e50bb020 	str	fp, [fp, #-32]	; 0xffffffe0
 // lee el puntero al marco de activación (FP) de sys_recovery() en la pila de excepción

GET_OPMODE(&mode);    // lee el modo de ejecución del procesador
 c101ea8:	e10f0000 	mrs	r0, CPSR
 c101eac:	e200001f 	and	r0, r0, #31
 c101eb0:	e54b0015 	strb	r0, [fp, #-21]	; 0xffffffeb
switch (mode) {
 c101eb4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101eb8:	e2433011 	sub	r3, r3, #17
 c101ebc:	e353000a 	cmp	r3, #10
 c101ec0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c101ec4:	ea00001e 	b	c101f44 <sys_recovery+0xb4>
 c101ec8:	0c101f08 	.word	0x0c101f08
 c101ecc:	0c101ef4 	.word	0x0c101ef4
 c101ed0:	0c101f44 	.word	0x0c101f44
 c101ed4:	0c101f44 	.word	0x0c101f44
 c101ed8:	0c101f44 	.word	0x0c101f44
 c101edc:	0c101f44 	.word	0x0c101f44
 c101ee0:	0c101f1c 	.word	0x0c101f1c
 c101ee4:	0c101f44 	.word	0x0c101f44
 c101ee8:	0c101f44 	.word	0x0c101f44
 c101eec:	0c101f44 	.word	0x0c101f44
 c101ef0:	0c101f30 	.word	0x0c101f30
case IRQMODE:
diffStacks = IRQSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila IRQ y la SVC
 c101ef4:	e3a03c03 	mov	r3, #768	; 0x300
 c101ef8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) IRQSTACK;         // base de la pila IRQ
 c101efc:	e59f3198 	ldr	r3, [pc, #408]	; c10209c <sys_recovery+0x20c>
 c101f00:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c101f04:	ea00000f 	b	c101f48 <sys_recovery+0xb8>
case FIQMODE:
diffStacks = FIQSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila FIQ y la SVC
 c101f08:	e3a03b01 	mov	r3, #1024	; 0x400
 c101f0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) FIQSTACK;         // base de la pila FIQ
 c101f10:	e59f3188 	ldr	r3, [pc, #392]	; c1020a0 <sys_recovery+0x210>
 c101f14:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c101f18:	ea00000a 	b	c101f48 <sys_recovery+0xb8>
case ABTMODE:
diffStacks = ABTSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila ABT y la SVC
 c101f1c:	e3a03c02 	mov	r3, #512	; 0x200
 c101f20:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) ABTSTACK;         // base de la pila ABT
 c101f24:	e59f3178 	ldr	r3, [pc, #376]	; c1020a4 <sys_recovery+0x214>
 c101f28:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c101f2c:	ea000005 	b	c101f48 <sys_recovery+0xb8>
case UNDMODE:
diffStacks = UNDSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila UND y la SVC
 c101f30:	e3a03c01 	mov	r3, #256	; 0x100
 c101f34:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) UNDSTACK;         // base de la pila UND
 c101f38:	e59f3168 	ldr	r3, [pc, #360]	; c1020a8 <sys_recovery+0x218>
 c101f3c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c101f40:	ea000000 	b	c101f48 <sys_recovery+0xb8>
 // Habría que hacer algo análogo a lo anterior y además para volver a modo SVC dado que no es válido SET_OPMODE( SVCMODE ), es necesario esto:
 // pISR_SWI = (uint32) isr_SWI;
 // SWI( 0 );
default:
while (1)
;                           // aquí no debería llegarse
 c101f44:	eafffffe 	b	c101f44 <sys_recovery+0xb4>
break;
}

asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );
 c101f48:	e51bd024 	ldr	sp, [fp, #-36]	; 0xffffffdc
 // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento

for (addrDst = (uint32 *) SVCSTACK; addrSrc > (uint32 *) sp;) // copia el contenido completo de la pila excepción en la pila SVC
 c101f4c:	e59f3158 	ldr	r3, [pc, #344]	; c1020ac <sys_recovery+0x21c>
 c101f50:	e50b3010 	str	r3, [fp, #-16]
 c101f54:	ea000009 	b	c101f80 <sys_recovery+0xf0>
*(--addrDst) = *(--addrSrc);
 c101f58:	e51b3010 	ldr	r3, [fp, #-16]
 c101f5c:	e2433004 	sub	r3, r3, #4
 c101f60:	e50b3010 	str	r3, [fp, #-16]
 c101f64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101f68:	e2433004 	sub	r3, r3, #4
 c101f6c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
 c101f70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101f74:	e5932000 	ldr	r2, [r3]
 c101f78:	e51b3010 	ldr	r3, [fp, #-16]
 c101f7c:	e5832000 	str	r2, [r3]
}

asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );
 // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento

for (addrDst = (uint32 *) SVCSTACK; addrSrc > (uint32 *) sp;) // copia el contenido completo de la pila excepción en la pila SVC
 c101f80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c101f84:	e1a02003 	mov	r2, r3
 c101f88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101f8c:	e1520003 	cmp	r2, r3
 c101f90:	3afffff0 	bcc	c101f58 <sys_recovery+0xc8>
*(--addrDst) = *(--addrSrc);

addrDst = (uint32 *) (fp - diffStacks); // carga el puntero al marco de activación de sys_recovery() en la pila SVC
 c101f94:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101f9c:	e0633002 	rsb	r3, r3, r2
 c101fa0:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el PC apilado
 c101fa4:	e51b3010 	ldr	r3, [fp, #-16]
 c101fa8:	e2433004 	sub	r3, r3, #4
 c101fac:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el LR apilado
 c101fb0:	e51b3010 	ldr	r3, [fp, #-16]
 c101fb4:	e2433004 	sub	r3, r3, #4
 c101fb8:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks;    // actualiza SP apilado para que apunte a la pila SVC
 c101fbc:	e51b3010 	ldr	r3, [fp, #-16]
 c101fc0:	e5932000 	ldr	r2, [r3]
 c101fc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101fc8:	e0632002 	rsb	r2, r3, r2
 c101fcc:	e51b3010 	ldr	r3, [fp, #-16]
 c101fd0:	e5832000 	str	r2, [r3]
addrDst--;                             // salta el SP apilado
 c101fd4:	e51b3010 	ldr	r3, [fp, #-16]
 c101fd8:	e2433004 	sub	r3, r3, #4
 c101fdc:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks; // actualiza el FP apilado para que apunte a la pila SVC
 c101fe0:	e51b3010 	ldr	r3, [fp, #-16]
 c101fe4:	e5932000 	ldr	r2, [r3]
 c101fe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101fec:	e0632002 	rsb	r2, r3, r2
 c101ff0:	e51b3010 	ldr	r3, [fp, #-16]
 c101ff4:	e5832000 	str	r2, [r3]

addrDst = (uint32 *) (*addrDst); // carga el puntero al marco de activación de sys_init()
 c101ff8:	e51b3010 	ldr	r3, [fp, #-16]
 c101ffc:	e5933000 	ldr	r3, [r3]
 c102000:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el PC apilado
 c102004:	e51b3010 	ldr	r3, [fp, #-16]
 c102008:	e2433004 	sub	r3, r3, #4
 c10200c:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el LR apilado
 c102010:	e51b3010 	ldr	r3, [fp, #-16]
 c102014:	e2433004 	sub	r3, r3, #4
 c102018:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks;    // actualiza SP apilado para que apunte a la pila SVC
 c10201c:	e51b3010 	ldr	r3, [fp, #-16]
 c102020:	e5932000 	ldr	r2, [r3]
 c102024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102028:	e0632002 	rsb	r2, r3, r2
 c10202c:	e51b3010 	ldr	r3, [fp, #-16]
 c102030:	e5832000 	str	r2, [r3]
addrDst--;                             // salta el SP apilado
 c102034:	e51b3010 	ldr	r3, [fp, #-16]
 c102038:	e2433004 	sub	r3, r3, #4
 c10203c:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks; // actualiza el FP apilado para que apunte a la pila SVC
 c102040:	e51b3010 	ldr	r3, [fp, #-16]
 c102044:	e5932000 	ldr	r2, [r3]
 c102048:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10204c:	e0632002 	rsb	r2, r3, r2
 c102050:	e51b3010 	ldr	r3, [fp, #-16]
 c102054:	e5832000 	str	r2, [r3]

SET_OPMODE(SVCMODE);                           // cambia a modo SVC
 c102058:	e10f0000 	mrs	r0, CPSR
 c10205c:	e3c0001f 	bic	r0, r0, #31
 c102060:	e3800013 	orr	r0, r0, #19
 c102064:	e121f000 	msr	CPSR_c, r0

sp -= diffStacks;
 c102068:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10206c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102070:	e0633002 	rsb	r3, r3, r2
 c102074:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
asm volatile ( "ldr sp, %0" : : "m" (sp) : );
 c102078:	e51bd01c 	ldr	sp, [fp, #-28]	; 0xffffffe4
    // actualiza SP_svc para que apunte a la cima de la pila SVC

fp -= diffStacks;
 c10207c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102080:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102084:	e0633002 	rsb	r3, r3, r2
 c102088:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
asm volatile ( "ldr fp, %0" : : "m" (fp) : );
 c10208c:	e51bb020 	ldr	fp, [fp, #-32]	; 0xffffffe0
 // actualiza FP para que apunte al marco de la pila SVC, debe ser siempre la última sentencia
}
 c102090:	e24bd00c 	sub	sp, fp, #12
 c102094:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102098:	e12fff1e 	bx	lr
 c10209c:	0c7ff400 	.word	0x0c7ff400
 c1020a0:	0c7ff500 	.word	0x0c7ff500
 c1020a4:	0c7ff300 	.word	0x0c7ff300
 c1020a8:	0c7ff200 	.word	0x0c7ff200
 c1020ac:	0c7ff100 	.word	0x0c7ff100

0c1020b0 <timers_init>:
static uint32 loop_s = 0;

static void sw_delay_init( void );

void timers_init( void )
{
 c1020b0:	e1a0c00d 	mov	ip, sp
 c1020b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1020b8:	e24cb004 	sub	fp, ip, #4
    TCFG0 = 0x0;
 c1020bc:	e59f30bc 	ldr	r3, [pc, #188]	; c102180 <timers_init+0xd0>
 c1020c0:	e3a02000 	mov	r2, #0
 c1020c4:	e5832000 	str	r2, [r3]
    TCFG1 = 0x0;
 c1020c8:	e59f30b4 	ldr	r3, [pc, #180]	; c102184 <timers_init+0xd4>
 c1020cc:	e3a02000 	mov	r2, #0
 c1020d0:	e5832000 	str	r2, [r3]

    TCNTB0 = 0x0;
 c1020d4:	e59f30ac 	ldr	r3, [pc, #172]	; c102188 <timers_init+0xd8>
 c1020d8:	e3a02000 	mov	r2, #0
 c1020dc:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c1020e0:	e59f30a4 	ldr	r3, [pc, #164]	; c10218c <timers_init+0xdc>
 c1020e4:	e3a02000 	mov	r2, #0
 c1020e8:	e5832000 	str	r2, [r3]
    TCNTB1 = 0x0;
 c1020ec:	e59f309c 	ldr	r3, [pc, #156]	; c102190 <timers_init+0xe0>
 c1020f0:	e3a02000 	mov	r2, #0
 c1020f4:	e5832000 	str	r2, [r3]
    TCMPB1 = 0x0;
 c1020f8:	e59f3094 	ldr	r3, [pc, #148]	; c102194 <timers_init+0xe4>
 c1020fc:	e3a02000 	mov	r2, #0
 c102100:	e5832000 	str	r2, [r3]
    TCNTB2 = 0x0;
 c102104:	e59f308c 	ldr	r3, [pc, #140]	; c102198 <timers_init+0xe8>
 c102108:	e3a02000 	mov	r2, #0
 c10210c:	e5832000 	str	r2, [r3]
    TCMPB2 = 0x0;
 c102110:	e59f3084 	ldr	r3, [pc, #132]	; c10219c <timers_init+0xec>
 c102114:	e3a02000 	mov	r2, #0
 c102118:	e5832000 	str	r2, [r3]
    TCNTB3 = 0x0;
 c10211c:	e59f307c 	ldr	r3, [pc, #124]	; c1021a0 <timers_init+0xf0>
 c102120:	e3a02000 	mov	r2, #0
 c102124:	e5832000 	str	r2, [r3]
    TCMPB3 = 0x0;
 c102128:	e59f3074 	ldr	r3, [pc, #116]	; c1021a4 <timers_init+0xf4>
 c10212c:	e3a02000 	mov	r2, #0
 c102130:	e5832000 	str	r2, [r3]
    TCNTB4 = 0x0;
 c102134:	e59f306c 	ldr	r3, [pc, #108]	; c1021a8 <timers_init+0xf8>
 c102138:	e3a02000 	mov	r2, #0
 c10213c:	e5832000 	str	r2, [r3]
    TCMPB4 = 0x0;
 c102140:	e59f3064 	ldr	r3, [pc, #100]	; c1021ac <timers_init+0xfc>
 c102144:	e3a02000 	mov	r2, #0
 c102148:	e5832000 	str	r2, [r3]
    TCNTB5 = 0x0;
 c10214c:	e59f305c 	ldr	r3, [pc, #92]	; c1021b0 <timers_init+0x100>
 c102150:	e3a02000 	mov	r2, #0
 c102154:	e5832000 	str	r2, [r3]

    TCON = 0x444442;//no estamos muy allï¿½
 c102158:	e59f3054 	ldr	r3, [pc, #84]	; c1021b4 <timers_init+0x104>
 c10215c:	e59f2054 	ldr	r2, [pc, #84]	; c1021b8 <timers_init+0x108>
 c102160:	e5832000 	str	r2, [r3]
    TCON = 0x0;//azpiricuetos
 c102164:	e59f3048 	ldr	r3, [pc, #72]	; c1021b4 <timers_init+0x104>
 c102168:	e3a02000 	mov	r2, #0
 c10216c:	e5832000 	str	r2, [r3]

    sw_delay_init();
 c102170:	eb000011 	bl	c1021bc <sw_delay_init>
}
 c102174:	e24bd00c 	sub	sp, fp, #12
 c102178:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10217c:	e12fff1e 	bx	lr
 c102180:	01d50000 	.word	0x01d50000
 c102184:	01d50004 	.word	0x01d50004
 c102188:	01d5000c 	.word	0x01d5000c
 c10218c:	01d50010 	.word	0x01d50010
 c102190:	01d50018 	.word	0x01d50018
 c102194:	01d5001c 	.word	0x01d5001c
 c102198:	01d50024 	.word	0x01d50024
 c10219c:	01d50028 	.word	0x01d50028
 c1021a0:	01d50030 	.word	0x01d50030
 c1021a4:	01d50034 	.word	0x01d50034
 c1021a8:	01d5003c 	.word	0x01d5003c
 c1021ac:	01d50040 	.word	0x01d50040
 c1021b0:	01d50048 	.word	0x01d50048
 c1021b4:	01d50008 	.word	0x01d50008
 c1021b8:	00444442 	.word	0x00444442

0c1021bc <sw_delay_init>:

static void sw_delay_init( void )
{
 c1021bc:	e1a0c00d 	mov	ip, sp
 c1021c0:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1021c4:	e24cb004 	sub	fp, ip, #4
 c1021c8:	e24dd00c 	sub	sp, sp, #12
    uint32 i;
    
    timer3_start();
 c1021cc:	eb0000d4 	bl	c102524 <timer3_start>
    for( i=1000000; i; i--);
 c1021d0:	e59f3088 	ldr	r3, [pc, #136]	; c102260 <sw_delay_init+0xa4>
 c1021d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1021d8:	ea000002 	b	c1021e8 <sw_delay_init+0x2c>
 c1021dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1021e0:	e2433001 	sub	r3, r3, #1
 c1021e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1021e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1021ec:	e3530000 	cmp	r3, #0
 c1021f0:	1afffff9 	bne	c1021dc <sw_delay_init+0x20>
    loop_s = ((uint64)1000000*10000)/timer3_stop();
 c1021f4:	eb0000f6 	bl	c1025d4 <timer3_stop>
 c1021f8:	e1a03000 	mov	r3, r0
 c1021fc:	e1a02003 	mov	r2, r3
 c102200:	e1a03002 	mov	r3, r2
 c102204:	e3a04000 	mov	r4, #0
 c102208:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c10220c:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c102210:	e2800b01 	add	r0, r0, #1024	; 0x400
 c102214:	e3a01002 	mov	r1, #2
 c102218:	e1a02003 	mov	r2, r3
 c10221c:	e1a03004 	mov	r3, r4
 c102220:	eb000432 	bl	c1032f0 <__aeabi_uldivmod>
 c102224:	e1a03000 	mov	r3, r0
 c102228:	e1a04001 	mov	r4, r1
 c10222c:	e1a02003 	mov	r2, r3
 c102230:	e59f302c 	ldr	r3, [pc, #44]	; c102264 <sw_delay_init+0xa8>
 c102234:	e5832000 	str	r2, [r3]
    loop_ms = loop_s / 1000;
 c102238:	e59f3024 	ldr	r3, [pc, #36]	; c102264 <sw_delay_init+0xa8>
 c10223c:	e5932000 	ldr	r2, [r3]
 c102240:	e59f3020 	ldr	r3, [pc, #32]	; c102268 <sw_delay_init+0xac>
 c102244:	e0831392 	umull	r1, r3, r2, r3
 c102248:	e1a02323 	lsr	r2, r3, #6
 c10224c:	e59f3018 	ldr	r3, [pc, #24]	; c10226c <sw_delay_init+0xb0>
 c102250:	e5832000 	str	r2, [r3]
};
 c102254:	e24bd010 	sub	sp, fp, #16
 c102258:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c10225c:	e12fff1e 	bx	lr
 c102260:	000f4240 	.word	0x000f4240
 c102264:	0c104b7c 	.word	0x0c104b7c
 c102268:	10624dd3 	.word	0x10624dd3
 c10226c:	0c104b78 	.word	0x0c104b78

0c102270 <wait_for_1ms>:

void wait_for_1ms(){
 c102270:	e1a0c00d 	mov	ip, sp
 c102274:	e92dd800 	push	{fp, ip, lr, pc}
 c102278:	e24cb004 	sub	fp, ip, #4
	//para 64MHz, N = 0, D = 2, C = 32000 de las diapos
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (0 << 8);//N
 c10227c:	e59f3090 	ldr	r3, [pc, #144]	; c102314 <wait_for_1ms+0xa4>
 c102280:	e59f208c 	ldr	r2, [pc, #140]	; c102314 <wait_for_1ms+0xa4>
 c102284:	e5922000 	ldr	r2, [r2]
 c102288:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10228c:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (0 << 12);//D
 c102290:	e59f3080 	ldr	r3, [pc, #128]	; c102318 <wait_for_1ms+0xa8>
 c102294:	e59f207c 	ldr	r2, [pc, #124]	; c102318 <wait_for_1ms+0xa8>
 c102298:	e5922000 	ldr	r2, [r2]
 c10229c:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1022a0:	e5832000 	str	r2, [r3]
	TCNTB3 = 32000;//C
 c1022a4:	e59f3070 	ldr	r3, [pc, #112]	; c10231c <wait_for_1ms+0xac>
 c1022a8:	e3a02c7d 	mov	r2, #32000	; 0x7d00
 c1022ac:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c1022b0:	e59f3068 	ldr	r3, [pc, #104]	; c102320 <wait_for_1ms+0xb0>
 c1022b4:	e59f2064 	ldr	r2, [pc, #100]	; c102320 <wait_for_1ms+0xb0>
 c1022b8:	e5922000 	ldr	r2, [r2]
 c1022bc:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1022c0:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c1022c4:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c1022c8:	e59f3050 	ldr	r3, [pc, #80]	; c102320 <wait_for_1ms+0xb0>
 c1022cc:	e59f204c 	ldr	r2, [pc, #76]	; c102320 <wait_for_1ms+0xb0>
 c1022d0:	e5922000 	ldr	r2, [r2]
 c1022d4:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1022d8:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c1022dc:	e5832000 	str	r2, [r3]
	while( !TCNTO3 );
 c1022e0:	e1a00000 	nop			; (mov r0, r0)
 c1022e4:	e59f3038 	ldr	r3, [pc, #56]	; c102324 <wait_for_1ms+0xb4>
 c1022e8:	e5933000 	ldr	r3, [r3]
 c1022ec:	e3530000 	cmp	r3, #0
 c1022f0:	0afffffb 	beq	c1022e4 <wait_for_1ms+0x74>
	while( TCNTO3 );
 c1022f4:	e1a00000 	nop			; (mov r0, r0)
 c1022f8:	e59f3024 	ldr	r3, [pc, #36]	; c102324 <wait_for_1ms+0xb4>
 c1022fc:	e5933000 	ldr	r3, [r3]
 c102300:	e3530000 	cmp	r3, #0
 c102304:	1afffffb 	bne	c1022f8 <wait_for_1ms+0x88>
}
 c102308:	e24bd00c 	sub	sp, fp, #12
 c10230c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102310:	e12fff1e 	bx	lr
 c102314:	01d50000 	.word	0x01d50000
 c102318:	01d50004 	.word	0x01d50004
 c10231c:	01d50030 	.word	0x01d50030
 c102320:	01d50008 	.word	0x01d50008
 c102324:	01d50038 	.word	0x01d50038

0c102328 <timer3_delay_ms>:
void timer3_delay_ms( uint16 n )
{
 c102328:	e1a0c00d 	mov	ip, sp
 c10232c:	e92dd800 	push	{fp, ip, lr, pc}
 c102330:	e24cb004 	sub	fp, ip, #4
 c102334:	e24dd008 	sub	sp, sp, #8
 c102338:	e1a03000 	mov	r3, r0
 c10233c:	e14b30be 	strh	r3, [fp, #-14]
    for(;n;n--){
 c102340:	ea000003 	b	c102354 <timer3_delay_ms+0x2c>
        wait_for_1ms();
 c102344:	ebffffc9 	bl	c102270 <wait_for_1ms>
	while( !TCNTO3 );
	while( TCNTO3 );
}
void timer3_delay_ms( uint16 n )
{
    for(;n;n--){
 c102348:	e15b30be 	ldrh	r3, [fp, #-14]
 c10234c:	e2433001 	sub	r3, r3, #1
 c102350:	e14b30be 	strh	r3, [fp, #-14]
 c102354:	e15b30be 	ldrh	r3, [fp, #-14]
 c102358:	e3530000 	cmp	r3, #0
 c10235c:	1afffff8 	bne	c102344 <timer3_delay_ms+0x1c>
        wait_for_1ms();
    }
}
 c102360:	e24bd00c 	sub	sp, fp, #12
 c102364:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102368:	e12fff1e 	bx	lr

0c10236c <sw_delay_ms>:



void sw_delay_ms( uint16 n )
{
 c10236c:	e1a0c00d 	mov	ip, sp
 c102370:	e92dd800 	push	{fp, ip, lr, pc}
 c102374:	e24cb004 	sub	fp, ip, #4
 c102378:	e24dd010 	sub	sp, sp, #16
 c10237c:	e1a03000 	mov	r3, r0
 c102380:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_ms*n; i; i-- );
 c102384:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c102388:	e59f2030 	ldr	r2, [pc, #48]	; c1023c0 <sw_delay_ms+0x54>
 c10238c:	e5922000 	ldr	r2, [r2]
 c102390:	e0030392 	mul	r3, r2, r3
 c102394:	e50b3010 	str	r3, [fp, #-16]
 c102398:	ea000002 	b	c1023a8 <sw_delay_ms+0x3c>
 c10239c:	e51b3010 	ldr	r3, [fp, #-16]
 c1023a0:	e2433001 	sub	r3, r3, #1
 c1023a4:	e50b3010 	str	r3, [fp, #-16]
 c1023a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1023ac:	e3530000 	cmp	r3, #0
 c1023b0:	1afffff9 	bne	c10239c <sw_delay_ms+0x30>
}
 c1023b4:	e24bd00c 	sub	sp, fp, #12
 c1023b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1023bc:	e12fff1e 	bx	lr
 c1023c0:	0c104b78 	.word	0x0c104b78

0c1023c4 <wait_for_1s>:
void wait_for_1s( void )
{
 c1023c4:	e1a0c00d 	mov	ip, sp
 c1023c8:	e92dd800 	push	{fp, ip, lr, pc}
 c1023cc:	e24cb004 	sub	fp, ip, #4
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (63 << 8);
 c1023d0:	e59f3098 	ldr	r3, [pc, #152]	; c102470 <wait_for_1s+0xac>
 c1023d4:	e59f2094 	ldr	r2, [pc, #148]	; c102470 <wait_for_1s+0xac>
 c1023d8:	e5922000 	ldr	r2, [r2]
 c1023dc:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1023e0:	e3822c3f 	orr	r2, r2, #16128	; 0x3f00
 c1023e4:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1023e8:	e59f3084 	ldr	r3, [pc, #132]	; c102474 <wait_for_1s+0xb0>
 c1023ec:	e59f2080 	ldr	r2, [pc, #128]	; c102474 <wait_for_1s+0xb0>
 c1023f0:	e5922000 	ldr	r2, [r2]
 c1023f4:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1023f8:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1023fc:	e5832000 	str	r2, [r3]
	TCNTB3 = 31250;
 c102400:	e59f3070 	ldr	r3, [pc, #112]	; c102478 <wait_for_1s+0xb4>
 c102404:	e59f2070 	ldr	r2, [pc, #112]	; c10247c <wait_for_1s+0xb8>
 c102408:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c10240c:	e59f306c 	ldr	r3, [pc, #108]	; c102480 <wait_for_1s+0xbc>
 c102410:	e59f2068 	ldr	r2, [pc, #104]	; c102480 <wait_for_1s+0xbc>
 c102414:	e5922000 	ldr	r2, [r2]
 c102418:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10241c:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c102420:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c102424:	e59f3054 	ldr	r3, [pc, #84]	; c102480 <wait_for_1s+0xbc>
 c102428:	e59f2050 	ldr	r2, [pc, #80]	; c102480 <wait_for_1s+0xbc>
 c10242c:	e5922000 	ldr	r2, [r2]
 c102430:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102434:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102438:	e5832000 	str	r2, [r3]
	while( !TCNTO3 );
 c10243c:	e1a00000 	nop			; (mov r0, r0)
 c102440:	e59f303c 	ldr	r3, [pc, #60]	; c102484 <wait_for_1s+0xc0>
 c102444:	e5933000 	ldr	r3, [r3]
 c102448:	e3530000 	cmp	r3, #0
 c10244c:	0afffffb 	beq	c102440 <wait_for_1s+0x7c>
	while( TCNTO3 );
 c102450:	e1a00000 	nop			; (mov r0, r0)
 c102454:	e59f3028 	ldr	r3, [pc, #40]	; c102484 <wait_for_1s+0xc0>
 c102458:	e5933000 	ldr	r3, [r3]
 c10245c:	e3530000 	cmp	r3, #0
 c102460:	1afffffb 	bne	c102454 <wait_for_1s+0x90>
}
 c102464:	e24bd00c 	sub	sp, fp, #12
 c102468:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10246c:	e12fff1e 	bx	lr
 c102470:	01d50000 	.word	0x01d50000
 c102474:	01d50004 	.word	0x01d50004
 c102478:	01d50030 	.word	0x01d50030
 c10247c:	00007a12 	.word	0x00007a12
 c102480:	01d50008 	.word	0x01d50008
 c102484:	01d50038 	.word	0x01d50038

0c102488 <timer3_delay_s>:
void timer3_delay_s( uint16 n )
{
 c102488:	e1a0c00d 	mov	ip, sp
 c10248c:	e92dd800 	push	{fp, ip, lr, pc}
 c102490:	e24cb004 	sub	fp, ip, #4
 c102494:	e24dd008 	sub	sp, sp, #8
 c102498:	e1a03000 	mov	r3, r0
 c10249c:	e14b30be 	strh	r3, [fp, #-14]
    for(;n;n--){
 c1024a0:	ea000003 	b	c1024b4 <timer3_delay_s+0x2c>
    	wait_for_1s();
 c1024a4:	ebffffc6 	bl	c1023c4 <wait_for_1s>
	while( !TCNTO3 );
	while( TCNTO3 );
}
void timer3_delay_s( uint16 n )
{
    for(;n;n--){
 c1024a8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1024ac:	e2433001 	sub	r3, r3, #1
 c1024b0:	e14b30be 	strh	r3, [fp, #-14]
 c1024b4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1024b8:	e3530000 	cmp	r3, #0
 c1024bc:	1afffff8 	bne	c1024a4 <timer3_delay_s+0x1c>
    	wait_for_1s();
    }
}
 c1024c0:	e24bd00c 	sub	sp, fp, #12
 c1024c4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1024c8:	e12fff1e 	bx	lr

0c1024cc <sw_delay_s>:



void sw_delay_s( uint16 n )
{
 c1024cc:	e1a0c00d 	mov	ip, sp
 c1024d0:	e92dd800 	push	{fp, ip, lr, pc}
 c1024d4:	e24cb004 	sub	fp, ip, #4
 c1024d8:	e24dd010 	sub	sp, sp, #16
 c1024dc:	e1a03000 	mov	r3, r0
 c1024e0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_s*n; i; i-- );
 c1024e4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1024e8:	e59f2030 	ldr	r2, [pc, #48]	; c102520 <sw_delay_s+0x54>
 c1024ec:	e5922000 	ldr	r2, [r2]
 c1024f0:	e0030392 	mul	r3, r2, r3
 c1024f4:	e50b3010 	str	r3, [fp, #-16]
 c1024f8:	ea000002 	b	c102508 <sw_delay_s+0x3c>
 c1024fc:	e51b3010 	ldr	r3, [fp, #-16]
 c102500:	e2433001 	sub	r3, r3, #1
 c102504:	e50b3010 	str	r3, [fp, #-16]
 c102508:	e51b3010 	ldr	r3, [fp, #-16]
 c10250c:	e3530000 	cmp	r3, #0
 c102510:	1afffff9 	bne	c1024fc <sw_delay_s+0x30>
}
 c102514:	e24bd00c 	sub	sp, fp, #12
 c102518:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10251c:	e12fff1e 	bx	lr
 c102520:	0c104b7c 	.word	0x0c104b7c

0c102524 <timer3_start>:

void timer3_start( void ) 
{
 c102524:	e1a0c00d 	mov	ip, sp
 c102528:	e92dd800 	push	{fp, ip, lr, pc}
 c10252c:	e24cb004 	sub	fp, ip, #4
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);    
 c102530:	e59f3084 	ldr	r3, [pc, #132]	; c1025bc <timer3_start+0x98>
 c102534:	e59f2080 	ldr	r2, [pc, #128]	; c1025bc <timer3_start+0x98>
 c102538:	e5922000 	ldr	r2, [r2]
 c10253c:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c102540:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c102544:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c102548:	e59f3070 	ldr	r3, [pc, #112]	; c1025c0 <timer3_start+0x9c>
 c10254c:	e59f206c 	ldr	r2, [pc, #108]	; c1025c0 <timer3_start+0x9c>
 c102550:	e5922000 	ldr	r2, [r2]
 c102554:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c102558:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c10255c:	e5832000 	str	r2, [r3]
    
    TCNTB3 = 0xffff; 
 c102560:	e59f305c 	ldr	r3, [pc, #92]	; c1025c4 <timer3_start+0xa0>
 c102564:	e59f205c 	ldr	r2, [pc, #92]	; c1025c8 <timer3_start+0xa4>
 c102568:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c10256c:	e59f3058 	ldr	r3, [pc, #88]	; c1025cc <timer3_start+0xa8>
 c102570:	e59f2054 	ldr	r2, [pc, #84]	; c1025cc <timer3_start+0xa8>
 c102574:	e5922000 	ldr	r2, [r2]
 c102578:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10257c:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c102580:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c102584:	e59f3040 	ldr	r3, [pc, #64]	; c1025cc <timer3_start+0xa8>
 c102588:	e59f203c 	ldr	r2, [pc, #60]	; c1025cc <timer3_start+0xa8>
 c10258c:	e5922000 	ldr	r2, [r2]
 c102590:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102594:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102598:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c10259c:	e1a00000 	nop			; (mov r0, r0)
 c1025a0:	e59f3028 	ldr	r3, [pc, #40]	; c1025d0 <timer3_start+0xac>
 c1025a4:	e5933000 	ldr	r3, [r3]
 c1025a8:	e3530000 	cmp	r3, #0
 c1025ac:	0afffffb 	beq	c1025a0 <timer3_start+0x7c>
}
 c1025b0:	e24bd00c 	sub	sp, fp, #12
 c1025b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1025b8:	e12fff1e 	bx	lr
 c1025bc:	01d50000 	.word	0x01d50000
 c1025c0:	01d50004 	.word	0x01d50004
 c1025c4:	01d50030 	.word	0x01d50030
 c1025c8:	0000ffff 	.word	0x0000ffff
 c1025cc:	01d50008 	.word	0x01d50008
 c1025d0:	01d50038 	.word	0x01d50038

0c1025d4 <timer3_stop>:

uint16 timer3_stop( void )
{
 c1025d4:	e1a0c00d 	mov	ip, sp
 c1025d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1025dc:	e24cb004 	sub	fp, ip, #4
    TCON &= ~(1 << 16);
 c1025e0:	e59f3038 	ldr	r3, [pc, #56]	; c102620 <timer3_stop+0x4c>
 c1025e4:	e59f2034 	ldr	r2, [pc, #52]	; c102620 <timer3_stop+0x4c>
 c1025e8:	e5922000 	ldr	r2, [r2]
 c1025ec:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c1025f0:	e5832000 	str	r2, [r3]
    return 0xffff - TCNTO3;
 c1025f4:	e59f3028 	ldr	r3, [pc, #40]	; c102624 <timer3_stop+0x50>
 c1025f8:	e5933000 	ldr	r3, [r3]
 c1025fc:	e1a03803 	lsl	r3, r3, #16
 c102600:	e1a03823 	lsr	r3, r3, #16
 c102604:	e1e03003 	mvn	r3, r3
 c102608:	e1a03803 	lsl	r3, r3, #16
 c10260c:	e1a03823 	lsr	r3, r3, #16
}
 c102610:	e1a00003 	mov	r0, r3
 c102614:	e24bd00c 	sub	sp, fp, #12
 c102618:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10261c:	e12fff1e 	bx	lr
 c102620:	01d50008 	.word	0x01d50008
 c102624:	01d50038 	.word	0x01d50038

0c102628 <timer3_start_timeout>:

void timer3_start_timeout( uint16 n ) 
{
 c102628:	e1a0c00d 	mov	ip, sp
 c10262c:	e92dd800 	push	{fp, ip, lr, pc}
 c102630:	e24cb004 	sub	fp, ip, #4
 c102634:	e24dd008 	sub	sp, sp, #8
 c102638:	e1a03000 	mov	r3, r0
 c10263c:	e14b30be 	strh	r3, [fp, #-14]
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);          
 c102640:	e59f3084 	ldr	r3, [pc, #132]	; c1026cc <timer3_start_timeout+0xa4>
 c102644:	e59f2080 	ldr	r2, [pc, #128]	; c1026cc <timer3_start_timeout+0xa4>
 c102648:	e5922000 	ldr	r2, [r2]
 c10264c:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c102650:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c102654:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c102658:	e59f3070 	ldr	r3, [pc, #112]	; c1026d0 <timer3_start_timeout+0xa8>
 c10265c:	e59f206c 	ldr	r2, [pc, #108]	; c1026d0 <timer3_start_timeout+0xa8>
 c102660:	e5922000 	ldr	r2, [r2]
 c102664:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c102668:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c10266c:	e5832000 	str	r2, [r3]
    
    TCNTB3 = n; 
 c102670:	e59f305c 	ldr	r3, [pc, #92]	; c1026d4 <timer3_start_timeout+0xac>
 c102674:	e15b20be 	ldrh	r2, [fp, #-14]
 c102678:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c10267c:	e59f3054 	ldr	r3, [pc, #84]	; c1026d8 <timer3_start_timeout+0xb0>
 c102680:	e59f2050 	ldr	r2, [pc, #80]	; c1026d8 <timer3_start_timeout+0xb0>
 c102684:	e5922000 	ldr	r2, [r2]
 c102688:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10268c:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c102690:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c102694:	e59f303c 	ldr	r3, [pc, #60]	; c1026d8 <timer3_start_timeout+0xb0>
 c102698:	e59f2038 	ldr	r2, [pc, #56]	; c1026d8 <timer3_start_timeout+0xb0>
 c10269c:	e5922000 	ldr	r2, [r2]
 c1026a0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1026a4:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c1026a8:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c1026ac:	e1a00000 	nop			; (mov r0, r0)
 c1026b0:	e59f3024 	ldr	r3, [pc, #36]	; c1026dc <timer3_start_timeout+0xb4>
 c1026b4:	e5933000 	ldr	r3, [r3]
 c1026b8:	e3530000 	cmp	r3, #0
 c1026bc:	0afffffb 	beq	c1026b0 <timer3_start_timeout+0x88>
}
 c1026c0:	e24bd00c 	sub	sp, fp, #12
 c1026c4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1026c8:	e12fff1e 	bx	lr
 c1026cc:	01d50000 	.word	0x01d50000
 c1026d0:	01d50004 	.word	0x01d50004
 c1026d4:	01d50030 	.word	0x01d50030
 c1026d8:	01d50008 	.word	0x01d50008
 c1026dc:	01d50038 	.word	0x01d50038

0c1026e0 <timer3_timeout>:

uint16 timer3_timeout( )
{
 c1026e0:	e1a0c00d 	mov	ip, sp
 c1026e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1026e8:	e24cb004 	sub	fp, ip, #4
    return !TCNTO3;
 c1026ec:	e59f3024 	ldr	r3, [pc, #36]	; c102718 <timer3_timeout+0x38>
 c1026f0:	e5933000 	ldr	r3, [r3]
 c1026f4:	e3530000 	cmp	r3, #0
 c1026f8:	13a03000 	movne	r3, #0
 c1026fc:	03a03001 	moveq	r3, #1
 c102700:	e1a03803 	lsl	r3, r3, #16
 c102704:	e1a03823 	lsr	r3, r3, #16
}    
 c102708:	e1a00003 	mov	r0, r3
 c10270c:	e24bd00c 	sub	sp, fp, #12
 c102710:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102714:	e12fff1e 	bx	lr
 c102718:	01d50038 	.word	0x01d50038

0c10271c <timer0_open_tick>:
//He cambiado todos los N D y ahora van perfe pero no tienen ningun puto sentido
void timer0_open_tick( void (*isr)(void), uint16 tps )
{
 c10271c:	e1a0c00d 	mov	ip, sp
 c102720:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c102724:	e24cb004 	sub	fp, ip, #4
 c102728:	e24dd00c 	sub	sp, sp, #12
 c10272c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c102730:	e1a03001 	mov	r3, r1
 c102734:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
	 pISR_TIMER0 = (uint32) isr;
 c102738:	e59f31f4 	ldr	r3, [pc, #500]	; c102934 <timer0_open_tick+0x218>
 c10273c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102740:	e5832000 	str	r2, [r3]
	 I_ISPC      = BIT_TIMER0;
 c102744:	e59f31ec 	ldr	r3, [pc, #492]	; c102938 <timer0_open_tick+0x21c>
 c102748:	e3a02a02 	mov	r2, #8192	; 0x2000
 c10274c:	e5832000 	str	r2, [r3]
	 INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c102750:	e59f21e4 	ldr	r2, [pc, #484]	; c10293c <timer0_open_tick+0x220>
 c102754:	e59f31e0 	ldr	r3, [pc, #480]	; c10293c <timer0_open_tick+0x220>
 c102758:	e5933000 	ldr	r3, [r3]
 c10275c:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c102760:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c102764:	e5823000 	str	r3, [r2]

    if( tps > 0 && tps <= 10 ) {
 c102768:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10276c:	e3530000 	cmp	r3, #0
 c102770:	0a000018 	beq	c1027d8 <timer0_open_tick+0xbc>
 c102774:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102778:	e353000a 	cmp	r3, #10
 c10277c:	8a000015 	bhi	c1027d8 <timer0_open_tick+0xbc>
        TCFG0  = (TCFG0 & ~(0xff << 0)) | (49 << 0);
 c102780:	e59f31b8 	ldr	r3, [pc, #440]	; c102940 <timer0_open_tick+0x224>
 c102784:	e59f21b4 	ldr	r2, [pc, #436]	; c102940 <timer0_open_tick+0x224>
 c102788:	e5922000 	ldr	r2, [r2]
 c10278c:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102790:	e3822031 	orr	r2, r2, #49	; 0x31
 c102794:	e5832000 	str	r2, [r3]
        TCFG1  = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c102798:	e59f31a4 	ldr	r3, [pc, #420]	; c102944 <timer0_open_tick+0x228>
 c10279c:	e59f21a0 	ldr	r2, [pc, #416]	; c102944 <timer0_open_tick+0x228>
 c1027a0:	e5922000 	ldr	r2, [r2]
 c1027a4:	e3c2200f 	bic	r2, r2, #15
 c1027a8:	e3822004 	orr	r2, r2, #4
 c1027ac:	e5832000 	str	r2, [r3]
        TCNTB0 = (40000U / tps);
 c1027b0:	e59f4190 	ldr	r4, [pc, #400]	; c102948 <timer0_open_tick+0x22c>
 c1027b4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1027b8:	e59f018c 	ldr	r0, [pc, #396]	; c10294c <timer0_open_tick+0x230>
 c1027bc:	e1a01003 	mov	r1, r3
 c1027c0:	eb000284 	bl	c1031d8 <__aeabi_uidiv>
 c1027c4:	e1a03000 	mov	r3, r0
 c1027c8:	e1a03803 	lsl	r3, r3, #16
 c1027cc:	e1a03823 	lsr	r3, r3, #16
 c1027d0:	e5843000 	str	r3, [r4]
 c1027d4:	ea000047 	b	c1028f8 <timer0_open_tick+0x1dc>
    } else if( tps > 10 && tps <= 100 ) {
 c1027d8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1027dc:	e353000a 	cmp	r3, #10
 c1027e0:	9a000016 	bls	c102840 <timer0_open_tick+0x124>
 c1027e4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1027e8:	e3530064 	cmp	r3, #100	; 0x64
 c1027ec:	8a000013 	bhi	c102840 <timer0_open_tick+0x124>
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (4 << 0);
 c1027f0:	e59f3148 	ldr	r3, [pc, #328]	; c102940 <timer0_open_tick+0x224>
 c1027f4:	e59f2144 	ldr	r2, [pc, #324]	; c102940 <timer0_open_tick+0x224>
 c1027f8:	e5922000 	ldr	r2, [r2]
 c1027fc:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102800:	e3822004 	orr	r2, r2, #4
 c102804:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c102808:	e59f3134 	ldr	r3, [pc, #308]	; c102944 <timer0_open_tick+0x228>
 c10280c:	e59f2130 	ldr	r2, [pc, #304]	; c102944 <timer0_open_tick+0x228>
 c102810:	e5922000 	ldr	r2, [r2]
 c102814:	e3c2200f 	bic	r2, r2, #15
 c102818:	e3822004 	orr	r2, r2, #4
 c10281c:	e5832000 	str	r2, [r3]
        TCNTB0 = (400000U / (uint32) tps);
 c102820:	e59f4120 	ldr	r4, [pc, #288]	; c102948 <timer0_open_tick+0x22c>
 c102824:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102828:	e59f0120 	ldr	r0, [pc, #288]	; c102950 <timer0_open_tick+0x234>
 c10282c:	e1a01003 	mov	r1, r3
 c102830:	eb000268 	bl	c1031d8 <__aeabi_uidiv>
 c102834:	e1a03000 	mov	r3, r0
 c102838:	e5843000 	str	r3, [r4]
 c10283c:	ea00002d 	b	c1028f8 <timer0_open_tick+0x1dc>
    } else if( tps > 100 && tps <= 1000 ) {
 c102840:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102844:	e3530064 	cmp	r3, #100	; 0x64
 c102848:	9a000016 	bls	c1028a8 <timer0_open_tick+0x18c>
 c10284c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102850:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c102854:	8a000013 	bhi	c1028a8 <timer0_open_tick+0x18c>
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (1 << 0);
 c102858:	e59f30e0 	ldr	r3, [pc, #224]	; c102940 <timer0_open_tick+0x224>
 c10285c:	e59f20dc 	ldr	r2, [pc, #220]	; c102940 <timer0_open_tick+0x224>
 c102860:	e5922000 	ldr	r2, [r2]
 c102864:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102868:	e3822001 	orr	r2, r2, #1
 c10286c:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf << 0)) | (2 << 0);
 c102870:	e59f30cc 	ldr	r3, [pc, #204]	; c102944 <timer0_open_tick+0x228>
 c102874:	e59f20c8 	ldr	r2, [pc, #200]	; c102944 <timer0_open_tick+0x228>
 c102878:	e5922000 	ldr	r2, [r2]
 c10287c:	e3c2200f 	bic	r2, r2, #15
 c102880:	e3822002 	orr	r2, r2, #2
 c102884:	e5832000 	str	r2, [r3]
        TCNTB0 = (4000000U / (uint32) tps);
 c102888:	e59f40b8 	ldr	r4, [pc, #184]	; c102948 <timer0_open_tick+0x22c>
 c10288c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102890:	e59f00bc 	ldr	r0, [pc, #188]	; c102954 <timer0_open_tick+0x238>
 c102894:	e1a01003 	mov	r1, r3
 c102898:	eb00024e 	bl	c1031d8 <__aeabi_uidiv>
 c10289c:	e1a03000 	mov	r3, r0
 c1028a0:	e5843000 	str	r3, [r4]
 c1028a4:	ea000013 	b	c1028f8 <timer0_open_tick+0x1dc>
    } else if ( tps > 1000 ) {
 c1028a8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1028ac:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c1028b0:	9a000010 	bls	c1028f8 <timer0_open_tick+0x1dc>
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (0 << 0);
 c1028b4:	e59f3084 	ldr	r3, [pc, #132]	; c102940 <timer0_open_tick+0x224>
 c1028b8:	e59f2080 	ldr	r2, [pc, #128]	; c102940 <timer0_open_tick+0x224>
 c1028bc:	e5922000 	ldr	r2, [r2]
 c1028c0:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1028c4:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf << 0)) | (0 << 0);
 c1028c8:	e59f3074 	ldr	r3, [pc, #116]	; c102944 <timer0_open_tick+0x228>
 c1028cc:	e59f2070 	ldr	r2, [pc, #112]	; c102944 <timer0_open_tick+0x228>
 c1028d0:	e5922000 	ldr	r2, [r2]
 c1028d4:	e3c2200f 	bic	r2, r2, #15
 c1028d8:	e5832000 	str	r2, [r3]
        TCNTB0 = (32000000U / (uint32) tps);
 c1028dc:	e59f4064 	ldr	r4, [pc, #100]	; c102948 <timer0_open_tick+0x22c>
 c1028e0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1028e4:	e59f006c 	ldr	r0, [pc, #108]	; c102958 <timer0_open_tick+0x23c>
 c1028e8:	e1a01003 	mov	r1, r3
 c1028ec:	eb000239 	bl	c1031d8 <__aeabi_uidiv>
 c1028f0:	e1a03000 	mov	r3, r0
 c1028f4:	e5843000 	str	r3, [r4]
    }

    TCON = (TCON & ~(0xf << 0)) | (1<<3) | (1<<1) | (0<<0);
 c1028f8:	e59f305c 	ldr	r3, [pc, #92]	; c10295c <timer0_open_tick+0x240>
 c1028fc:	e59f2058 	ldr	r2, [pc, #88]	; c10295c <timer0_open_tick+0x240>
 c102900:	e5922000 	ldr	r2, [r2]
 c102904:	e3c2200f 	bic	r2, r2, #15
 c102908:	e382200a 	orr	r2, r2, #10
 c10290c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 0)) | (1<<3) | (0<<1) | (1<<0);
 c102910:	e59f3044 	ldr	r3, [pc, #68]	; c10295c <timer0_open_tick+0x240>
 c102914:	e59f2040 	ldr	r2, [pc, #64]	; c10295c <timer0_open_tick+0x240>
 c102918:	e5922000 	ldr	r2, [r2]
 c10291c:	e3c2200f 	bic	r2, r2, #15
 c102920:	e3822009 	orr	r2, r2, #9
 c102924:	e5832000 	str	r2, [r3]
}
 c102928:	e24bd010 	sub	sp, fp, #16
 c10292c:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c102930:	e12fff1e 	bx	lr
 c102934:	0c7fff54 	.word	0x0c7fff54
 c102938:	01e00024 	.word	0x01e00024
 c10293c:	01e0000c 	.word	0x01e0000c
 c102940:	01d50000 	.word	0x01d50000
 c102944:	01d50004 	.word	0x01d50004
 c102948:	01d5000c 	.word	0x01d5000c
 c10294c:	00009c40 	.word	0x00009c40
 c102950:	00061a80 	.word	0x00061a80
 c102954:	003d0900 	.word	0x003d0900
 c102958:	01e84800 	.word	0x01e84800
 c10295c:	01d50008 	.word	0x01d50008

0c102960 <timer0_open_ms>:

void timer0_open_ms( void (*isr)(void), uint16 ms, uint8 mode )
{
 c102960:	e1a0c00d 	mov	ip, sp
 c102964:	e92dd800 	push	{fp, ip, lr, pc}
 c102968:	e24cb004 	sub	fp, ip, #4
 c10296c:	e24dd008 	sub	sp, sp, #8
 c102970:	e50b0010 	str	r0, [fp, #-16]
 c102974:	e1a03002 	mov	r3, r2
 c102978:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c10297c:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    pISR_TIMER0 = (uint32) isr;
 c102980:	e59f30c8 	ldr	r3, [pc, #200]	; c102a50 <timer0_open_ms+0xf0>
 c102984:	e51b2010 	ldr	r2, [fp, #-16]
 c102988:	e5832000 	str	r2, [r3]
    I_ISPC      = BIT_TIMER0;
 c10298c:	e59f30c0 	ldr	r3, [pc, #192]	; c102a54 <timer0_open_ms+0xf4>
 c102990:	e3a02a02 	mov	r2, #8192	; 0x2000
 c102994:	e5832000 	str	r2, [r3]
    INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c102998:	e59f20b8 	ldr	r2, [pc, #184]	; c102a58 <timer0_open_ms+0xf8>
 c10299c:	e59f30b4 	ldr	r3, [pc, #180]	; c102a58 <timer0_open_ms+0xf8>
 c1029a0:	e5933000 	ldr	r3, [r3]
 c1029a4:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c1029a8:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c1029ac:	e5823000 	str	r3, [r2]

    TCFG0 = (TCFG0 & ~(0xff << 0)) | (199 << 0);
 c1029b0:	e59f30a4 	ldr	r3, [pc, #164]	; c102a5c <timer0_open_ms+0xfc>
 c1029b4:	e59f20a0 	ldr	r2, [pc, #160]	; c102a5c <timer0_open_ms+0xfc>
 c1029b8:	e5922000 	ldr	r2, [r2]
 c1029bc:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1029c0:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c1029c4:	e5832000 	str	r2, [r3]
    TCFG1 =  (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c1029c8:	e59f3090 	ldr	r3, [pc, #144]	; c102a60 <timer0_open_ms+0x100>
 c1029cc:	e59f208c 	ldr	r2, [pc, #140]	; c102a60 <timer0_open_ms+0x100>
 c1029d0:	e5922000 	ldr	r2, [r2]
 c1029d4:	e3c2200f 	bic	r2, r2, #15
 c1029d8:	e3822004 	orr	r2, r2, #4
 c1029dc:	e5832000 	str	r2, [r3]
    TCNTB0 = 10*ms;
 c1029e0:	e59f107c 	ldr	r1, [pc, #124]	; c102a64 <timer0_open_ms+0x104>
 c1029e4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1029e8:	e1a03002 	mov	r3, r2
 c1029ec:	e1a03103 	lsl	r3, r3, #2
 c1029f0:	e0833002 	add	r3, r3, r2
 c1029f4:	e1a03083 	lsl	r3, r3, #1
 c1029f8:	e5813000 	str	r3, [r1]

    TCON =  (TCON & ~(0xf << 0)) | (mode << 3) | (1<<1) | (0<<0);
 c1029fc:	e59f3064 	ldr	r3, [pc, #100]	; c102a68 <timer0_open_ms+0x108>
 c102a00:	e59f2060 	ldr	r2, [pc, #96]	; c102a68 <timer0_open_ms+0x108>
 c102a04:	e5922000 	ldr	r2, [r2]
 c102a08:	e3c2100f 	bic	r1, r2, #15
 c102a0c:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c102a10:	e1a02182 	lsl	r2, r2, #3
 c102a14:	e1812002 	orr	r2, r1, r2
 c102a18:	e3822002 	orr	r2, r2, #2
 c102a1c:	e5832000 	str	r2, [r3]
    TCON =  (TCON & ~(0xf << 0)) | (mode << 3) | (0<<1) | (1<<0);
 c102a20:	e59f3040 	ldr	r3, [pc, #64]	; c102a68 <timer0_open_ms+0x108>
 c102a24:	e59f203c 	ldr	r2, [pc, #60]	; c102a68 <timer0_open_ms+0x108>
 c102a28:	e5922000 	ldr	r2, [r2]
 c102a2c:	e3c2100f 	bic	r1, r2, #15
 c102a30:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c102a34:	e1a02182 	lsl	r2, r2, #3
 c102a38:	e1812002 	orr	r2, r1, r2
 c102a3c:	e3822001 	orr	r2, r2, #1
 c102a40:	e5832000 	str	r2, [r3]
}
 c102a44:	e24bd00c 	sub	sp, fp, #12
 c102a48:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102a4c:	e12fff1e 	bx	lr
 c102a50:	0c7fff54 	.word	0x0c7fff54
 c102a54:	01e00024 	.word	0x01e00024
 c102a58:	01e0000c 	.word	0x01e0000c
 c102a5c:	01d50000 	.word	0x01d50000
 c102a60:	01d50004 	.word	0x01d50004
 c102a64:	01d5000c 	.word	0x01d5000c
 c102a68:	01d50008 	.word	0x01d50008

0c102a6c <timer0_close>:

void timer0_close( void )
{
 c102a6c:	e1a0c00d 	mov	ip, sp
 c102a70:	e92dd800 	push	{fp, ip, lr, pc}
 c102a74:	e24cb004 	sub	fp, ip, #4
    TCNTB0 = 0x0;
 c102a78:	e59f3068 	ldr	r3, [pc, #104]	; c102ae8 <timer0_close+0x7c>
 c102a7c:	e3a02000 	mov	r2, #0
 c102a80:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c102a84:	e59f3060 	ldr	r3, [pc, #96]	; c102aec <timer0_close+0x80>
 c102a88:	e3a02000 	mov	r2, #0
 c102a8c:	e5832000 	str	r2, [r3]

    TCON = (TCON & ~(0xf << 0)) | (1<<1) | (0<<0);
 c102a90:	e59f3058 	ldr	r3, [pc, #88]	; c102af0 <timer0_close+0x84>
 c102a94:	e59f2054 	ldr	r2, [pc, #84]	; c102af0 <timer0_close+0x84>
 c102a98:	e5922000 	ldr	r2, [r2]
 c102a9c:	e3c2200f 	bic	r2, r2, #15
 c102aa0:	e3822002 	orr	r2, r2, #2
 c102aa4:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 0)) | (0<<1) | (0<<0);
 c102aa8:	e59f3040 	ldr	r3, [pc, #64]	; c102af0 <timer0_close+0x84>
 c102aac:	e59f203c 	ldr	r2, [pc, #60]	; c102af0 <timer0_close+0x84>
 c102ab0:	e5922000 	ldr	r2, [r2]
 c102ab4:	e3c2200f 	bic	r2, r2, #15
 c102ab8:	e5832000 	str	r2, [r3]
    
    INTMSK     |= BIT_TIMER0;
 c102abc:	e59f3030 	ldr	r3, [pc, #48]	; c102af4 <timer0_close+0x88>
 c102ac0:	e59f202c 	ldr	r2, [pc, #44]	; c102af4 <timer0_close+0x88>
 c102ac4:	e5922000 	ldr	r2, [r2]
 c102ac8:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c102acc:	e5832000 	str	r2, [r3]
    pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c102ad0:	e59f3020 	ldr	r3, [pc, #32]	; c102af8 <timer0_close+0x8c>
 c102ad4:	e59f2020 	ldr	r2, [pc, #32]	; c102afc <timer0_close+0x90>
 c102ad8:	e5832000 	str	r2, [r3]
}
 c102adc:	e24bd00c 	sub	sp, fp, #12
 c102ae0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102ae4:	e12fff1e 	bx	lr
 c102ae8:	01d5000c 	.word	0x01d5000c
 c102aec:	01d50010 	.word	0x01d50010
 c102af0:	01d50008 	.word	0x01d50008
 c102af4:	01e0000c 	.word	0x01e0000c
 c102af8:	0c7fff54 	.word	0x0c7fff54
 c102afc:	0c101c34 	.word	0x0c101c34

0c102b00 <uart0_init>:
#include <s3c44b0x.h>
#include <uart.h>

void uart0_init( void )
{
 c102b00:	e1a0c00d 	mov	ip, sp
 c102b04:	e92dd800 	push	{fp, ip, lr, pc}
 c102b08:	e24cb004 	sub	fp, ip, #4
UFCON0 = 0x1;
 c102b0c:	e59f3040 	ldr	r3, [pc, #64]	; c102b54 <uart0_init+0x54>
 c102b10:	e3a02001 	mov	r2, #1
 c102b14:	e5832000 	str	r2, [r3]
UMCON0 = 0x0;
 c102b18:	e59f3038 	ldr	r3, [pc, #56]	; c102b58 <uart0_init+0x58>
 c102b1c:	e3a02000 	mov	r2, #0
 c102b20:	e5832000 	str	r2, [r3]
ULCON0 = 0x3;
 c102b24:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c102b28:	e3a02003 	mov	r2, #3
 c102b2c:	e5832000 	str	r2, [r3]
UBRDIV0 = 0x22;
 c102b30:	e59f3024 	ldr	r3, [pc, #36]	; c102b5c <uart0_init+0x5c>
 c102b34:	e3a02022 	mov	r2, #34	; 0x22
 c102b38:	e5832000 	str	r2, [r3]
UCON0 = 0x5;
 c102b3c:	e59f301c 	ldr	r3, [pc, #28]	; c102b60 <uart0_init+0x60>
 c102b40:	e3a02005 	mov	r2, #5
 c102b44:	e5832000 	str	r2, [r3]
}
 c102b48:	e24bd00c 	sub	sp, fp, #12
 c102b4c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102b50:	e12fff1e 	bx	lr
 c102b54:	01d00008 	.word	0x01d00008
 c102b58:	01d0000c 	.word	0x01d0000c
 c102b5c:	01d00028 	.word	0x01d00028
 c102b60:	01d00004 	.word	0x01d00004

0c102b64 <uart0_putchar>:

void uart0_putchar( char ch )
{
 c102b64:	e1a0c00d 	mov	ip, sp
 c102b68:	e92dd800 	push	{fp, ip, lr, pc}
 c102b6c:	e24cb004 	sub	fp, ip, #4
 c102b70:	e24dd008 	sub	sp, sp, #8
 c102b74:	e1a03000 	mov	r3, r0
 c102b78:	e54b300d 	strb	r3, [fp, #-13]
    while(UFSTAT0 & (1<<9));
 c102b7c:	e1a00000 	nop			; (mov r0, r0)
 c102b80:	e59f3034 	ldr	r3, [pc, #52]	; c102bbc <uart0_putchar+0x58>
 c102b84:	e5933000 	ldr	r3, [r3]
 c102b88:	e2033c02 	and	r3, r3, #512	; 0x200
 c102b8c:	e3530000 	cmp	r3, #0
 c102b90:	1afffffa 	bne	c102b80 <uart0_putchar+0x1c>
    UTXH0 = (UTXH0<<8) | ch;
 c102b94:	e59f3024 	ldr	r3, [pc, #36]	; c102bc0 <uart0_putchar+0x5c>
 c102b98:	e59f2020 	ldr	r2, [pc, #32]	; c102bc0 <uart0_putchar+0x5c>
 c102b9c:	e5922000 	ldr	r2, [r2]
 c102ba0:	e1a01402 	lsl	r1, r2, #8
 c102ba4:	e55b200d 	ldrb	r2, [fp, #-13]
 c102ba8:	e1812002 	orr	r2, r1, r2
 c102bac:	e5832000 	str	r2, [r3]

}        
 c102bb0:	e24bd00c 	sub	sp, fp, #12
 c102bb4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102bb8:	e12fff1e 	bx	lr
 c102bbc:	01d00018 	.word	0x01d00018
 c102bc0:	01d00020 	.word	0x01d00020

0c102bc4 <uart0_getchar>:

char uart0_getchar( void )
{//AZPIRICUETOS
 c102bc4:	e1a0c00d 	mov	ip, sp
 c102bc8:	e92dd800 	push	{fp, ip, lr, pc}
 c102bcc:	e24cb004 	sub	fp, ip, #4
    while(!(UFSTAT0 & 0xf));
 c102bd0:	e1a00000 	nop			; (mov r0, r0)
 c102bd4:	e59f3028 	ldr	r3, [pc, #40]	; c102c04 <uart0_getchar+0x40>
 c102bd8:	e5933000 	ldr	r3, [r3]
 c102bdc:	e203300f 	and	r3, r3, #15
 c102be0:	e3530000 	cmp	r3, #0
 c102be4:	0afffffa 	beq	c102bd4 <uart0_getchar+0x10>
    return URXH0;
 c102be8:	e59f3018 	ldr	r3, [pc, #24]	; c102c08 <uart0_getchar+0x44>
 c102bec:	e5933000 	ldr	r3, [r3]
 c102bf0:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c102bf4:	e1a00003 	mov	r0, r3
 c102bf8:	e24bd00c 	sub	sp, fp, #12
 c102bfc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102c00:	e12fff1e 	bx	lr
 c102c04:	01d00018 	.word	0x01d00018
 c102c08:	01d00024 	.word	0x01d00024

0c102c0c <uart0_puts>:

void uart0_puts( char *s )
{
 c102c0c:	e1a0c00d 	mov	ip, sp
 c102c10:	e92dd800 	push	{fp, ip, lr, pc}
 c102c14:	e24cb004 	sub	fp, ip, #4
 c102c18:	e24dd010 	sub	sp, sp, #16
 c102c1c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	int i = 0;
 c102c20:	e3a03000 	mov	r3, #0
 c102c24:	e50b3010 	str	r3, [fp, #-16]
	while(s[i] != '\0'){
 c102c28:	ea000008 	b	c102c50 <uart0_puts+0x44>
		uart0_putchar(s[i]);
 c102c2c:	e51b3010 	ldr	r3, [fp, #-16]
 c102c30:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102c34:	e0823003 	add	r3, r2, r3
 c102c38:	e5d33000 	ldrb	r3, [r3]
 c102c3c:	e1a00003 	mov	r0, r3
 c102c40:	ebffffc7 	bl	c102b64 <uart0_putchar>
		i++;
 c102c44:	e51b3010 	ldr	r3, [fp, #-16]
 c102c48:	e2833001 	add	r3, r3, #1
 c102c4c:	e50b3010 	str	r3, [fp, #-16]
}

void uart0_puts( char *s )
{
	int i = 0;
	while(s[i] != '\0'){
 c102c50:	e51b3010 	ldr	r3, [fp, #-16]
 c102c54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102c58:	e0823003 	add	r3, r2, r3
 c102c5c:	e5d33000 	ldrb	r3, [r3]
 c102c60:	e3530000 	cmp	r3, #0
 c102c64:	1afffff0 	bne	c102c2c <uart0_puts+0x20>
		uart0_putchar(s[i]);
		i++;
	}

}
 c102c68:	e24bd00c 	sub	sp, fp, #12
 c102c6c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102c70:	e12fff1e 	bx	lr

0c102c74 <uart0_putint>:

void uart0_putint( int32 i )
{
 c102c74:	e1a0c00d 	mov	ip, sp
 c102c78:	e92dd800 	push	{fp, ip, lr, pc}
 c102c7c:	e24cb004 	sub	fp, ip, #4
 c102c80:	e24dd020 	sub	sp, sp, #32
 c102c84:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    char buf[10 + 1 + 1];
	char *p = buf+11;
 c102c88:	e24b3020 	sub	r3, fp, #32
 c102c8c:	e283300b 	add	r3, r3, #11
 c102c90:	e50b3010 	str	r3, [fp, #-16]
	uint8 signo;//0 es negativo
	uint8 c;
	*p = '\0';
 c102c94:	e51b3010 	ldr	r3, [fp, #-16]
 c102c98:	e3a02000 	mov	r2, #0
 c102c9c:	e5c32000 	strb	r2, [r3]

	if(i<0){
 c102ca0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102ca4:	e3530000 	cmp	r3, #0
 c102ca8:	aa000005 	bge	c102cc4 <uart0_putint+0x50>
		signo = 0;
 c102cac:	e3a03000 	mov	r3, #0
 c102cb0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i *= -1;
 c102cb4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102cb8:	e2633000 	rsb	r3, r3, #0
 c102cbc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c102cc0:	ea000001 	b	c102ccc <uart0_putint+0x58>
	}
	else{
		signo = 1;
 c102cc4:	e3a03001 	mov	r3, #1
 c102cc8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	}

	do{
		c = i%10;
 c102ccc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c102cd0:	e59f30a8 	ldr	r3, [pc, #168]	; c102d80 <uart0_putint+0x10c>
 c102cd4:	e0c32391 	smull	r2, r3, r1, r3
 c102cd8:	e1a02143 	asr	r2, r3, #2
 c102cdc:	e1a03fc1 	asr	r3, r1, #31
 c102ce0:	e0632002 	rsb	r2, r3, r2
 c102ce4:	e1a03002 	mov	r3, r2
 c102ce8:	e1a03103 	lsl	r3, r3, #2
 c102cec:	e0833002 	add	r3, r3, r2
 c102cf0:	e1a03083 	lsl	r3, r3, #1
 c102cf4:	e0632001 	rsb	r2, r3, r1
 c102cf8:	e1a03002 	mov	r3, r2
 c102cfc:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		i = i/10;
 c102d00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102d04:	e59f2074 	ldr	r2, [pc, #116]	; c102d80 <uart0_putint+0x10c>
 c102d08:	e0c21293 	smull	r1, r2, r3, r2
 c102d0c:	e1a02142 	asr	r2, r2, #2
 c102d10:	e1a03fc3 	asr	r3, r3, #31
 c102d14:	e0633002 	rsb	r3, r3, r2
 c102d18:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		*--p= c + '0';
 c102d1c:	e51b3010 	ldr	r3, [fp, #-16]
 c102d20:	e2433001 	sub	r3, r3, #1
 c102d24:	e50b3010 	str	r3, [fp, #-16]
 c102d28:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c102d2c:	e2833030 	add	r3, r3, #48	; 0x30
 c102d30:	e20320ff 	and	r2, r3, #255	; 0xff
 c102d34:	e51b3010 	ldr	r3, [fp, #-16]
 c102d38:	e5c32000 	strb	r2, [r3]
	}while(i);
 c102d3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102d40:	e3530000 	cmp	r3, #0
 c102d44:	1affffe0 	bne	c102ccc <uart0_putint+0x58>

	if(!signo){
 c102d48:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102d4c:	e3530000 	cmp	r3, #0
 c102d50:	1a000005 	bne	c102d6c <uart0_putint+0xf8>
		*--p= '-';
 c102d54:	e51b3010 	ldr	r3, [fp, #-16]
 c102d58:	e2433001 	sub	r3, r3, #1
 c102d5c:	e50b3010 	str	r3, [fp, #-16]
 c102d60:	e51b3010 	ldr	r3, [fp, #-16]
 c102d64:	e3a0202d 	mov	r2, #45	; 0x2d
 c102d68:	e5c32000 	strb	r2, [r3]
	}

	uart0_puts(p);
 c102d6c:	e51b0010 	ldr	r0, [fp, #-16]
 c102d70:	ebffffa5 	bl	c102c0c <uart0_puts>
}
 c102d74:	e24bd00c 	sub	sp, fp, #12
 c102d78:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102d7c:	e12fff1e 	bx	lr
 c102d80:	66666667 	.word	0x66666667

0c102d84 <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c102d84:	e1a0c00d 	mov	ip, sp
 c102d88:	e92dd800 	push	{fp, ip, lr, pc}
 c102d8c:	e24cb004 	sub	fp, ip, #4
 c102d90:	e24dd018 	sub	sp, sp, #24
 c102d94:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c102d98:	e24b301c 	sub	r3, fp, #28
 c102d9c:	e2833008 	add	r3, r3, #8
 c102da0:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c102da4:	e51b3010 	ldr	r3, [fp, #-16]
 c102da8:	e3a02000 	mov	r2, #0
 c102dac:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c102db0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102db4:	e20330ff 	and	r3, r3, #255	; 0xff
 c102db8:	e203300f 	and	r3, r3, #15
 c102dbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c102dc0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102dc4:	e3530009 	cmp	r3, #9
 c102dc8:	8a000008 	bhi	c102df0 <uart0_puthex+0x6c>
            *--p = '0' + c;
 c102dcc:	e51b3010 	ldr	r3, [fp, #-16]
 c102dd0:	e2433001 	sub	r3, r3, #1
 c102dd4:	e50b3010 	str	r3, [fp, #-16]
 c102dd8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102ddc:	e2833030 	add	r3, r3, #48	; 0x30
 c102de0:	e20320ff 	and	r2, r3, #255	; 0xff
 c102de4:	e51b3010 	ldr	r3, [fp, #-16]
 c102de8:	e5c32000 	strb	r2, [r3]
 c102dec:	ea000007 	b	c102e10 <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c102df0:	e51b3010 	ldr	r3, [fp, #-16]
 c102df4:	e2433001 	sub	r3, r3, #1
 c102df8:	e50b3010 	str	r3, [fp, #-16]
 c102dfc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102e00:	e2833057 	add	r3, r3, #87	; 0x57
 c102e04:	e20320ff 	and	r2, r3, #255	; 0xff
 c102e08:	e51b3010 	ldr	r3, [fp, #-16]
 c102e0c:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c102e10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102e14:	e1a03223 	lsr	r3, r3, #4
 c102e18:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c102e1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102e20:	e3530000 	cmp	r3, #0
 c102e24:	1affffe1 	bne	c102db0 <uart0_puthex+0x2c>

    uart0_puts( p );
 c102e28:	e51b0010 	ldr	r0, [fp, #-16]
 c102e2c:	ebffff76 	bl	c102c0c <uart0_puts>
}
 c102e30:	e24bd00c 	sub	sp, fp, #12
 c102e34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e38:	e12fff1e 	bx	lr

0c102e3c <uart0_gets>:

void uart0_gets( char *s )
{
 c102e3c:	e1a0c00d 	mov	ip, sp
 c102e40:	e92dd800 	push	{fp, ip, lr, pc}
 c102e44:	e24cb004 	sub	fp, ip, #4
 c102e48:	e24dd010 	sub	sp, sp, #16
 c102e4c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8

	char c = uart0_getchar();
 c102e50:	ebffff5b 	bl	c102bc4 <uart0_getchar>
 c102e54:	e1a03000 	mov	r3, r0
 c102e58:	e54b300d 	strb	r3, [fp, #-13]
	while(c != '\n'){
 c102e5c:	ea000008 	b	c102e84 <uart0_gets+0x48>
		*s++ = c;
 c102e60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102e64:	e55b200d 	ldrb	r2, [fp, #-13]
 c102e68:	e5c32000 	strb	r2, [r3]
 c102e6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102e70:	e2833001 	add	r3, r3, #1
 c102e74:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		c =  uart0_getchar();
 c102e78:	ebffff51 	bl	c102bc4 <uart0_getchar>
 c102e7c:	e1a03000 	mov	r3, r0
 c102e80:	e54b300d 	strb	r3, [fp, #-13]

void uart0_gets( char *s )
{

	char c = uart0_getchar();
	while(c != '\n'){
 c102e84:	e55b300d 	ldrb	r3, [fp, #-13]
 c102e88:	e353000a 	cmp	r3, #10
 c102e8c:	1afffff3 	bne	c102e60 <uart0_gets+0x24>
		*s++ = c;
		c =  uart0_getchar();
	}
	*s = '\0';
 c102e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102e94:	e3a02000 	mov	r2, #0
 c102e98:	e5c32000 	strb	r2, [r3]
}
 c102e9c:	e24bd00c 	sub	sp, fp, #12
 c102ea0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102ea4:	e12fff1e 	bx	lr

0c102ea8 <uart0_getint>:

int32 uart0_getint( void )
{
 c102ea8:	e1a0c00d 	mov	ip, sp
 c102eac:	e92dd800 	push	{fp, ip, lr, pc}
 c102eb0:	e24cb004 	sub	fp, ip, #4
 c102eb4:	e24dd010 	sub	sp, sp, #16
	int32 sol = 0, signo = 1;
 c102eb8:	e3a03000 	mov	r3, #0
 c102ebc:	e50b3010 	str	r3, [fp, #-16]
 c102ec0:	e3a03001 	mov	r3, #1
 c102ec4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	char x = uart0_getchar();
 c102ec8:	ebffff3d 	bl	c102bc4 <uart0_getchar>
 c102ecc:	e1a03000 	mov	r3, r0
 c102ed0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	if(x == '-'){
 c102ed4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102ed8:	e353002d 	cmp	r3, #45	; 0x2d
 c102edc:	1a000015 	bne	c102f38 <uart0_getint+0x90>
		signo = -1;
 c102ee0:	e3e03000 	mvn	r3, #0
 c102ee4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		x = uart0_getchar();
 c102ee8:	ebffff35 	bl	c102bc4 <uart0_getchar>
 c102eec:	e1a03000 	mov	r3, r0
 c102ef0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	}
	while(x != '\n'){
 c102ef4:	ea00000f 	b	c102f38 <uart0_getint+0x90>
		sol *= 10;
 c102ef8:	e51b2010 	ldr	r2, [fp, #-16]
 c102efc:	e1a03002 	mov	r3, r2
 c102f00:	e1a03103 	lsl	r3, r3, #2
 c102f04:	e0833002 	add	r3, r3, r2
 c102f08:	e1a03083 	lsl	r3, r3, #1
 c102f0c:	e50b3010 	str	r3, [fp, #-16]
		int32 aux = x - '0';
 c102f10:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102f14:	e2433030 	sub	r3, r3, #48	; 0x30
 c102f18:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		sol += aux;
 c102f1c:	e51b2010 	ldr	r2, [fp, #-16]
 c102f20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c102f24:	e0823003 	add	r3, r2, r3
 c102f28:	e50b3010 	str	r3, [fp, #-16]
		x = uart0_getchar();
 c102f2c:	ebffff24 	bl	c102bc4 <uart0_getchar>
 c102f30:	e1a03000 	mov	r3, r0
 c102f34:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	char x = uart0_getchar();
	if(x == '-'){
		signo = -1;
		x = uart0_getchar();
	}
	while(x != '\n'){
 c102f38:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102f3c:	e353000a 	cmp	r3, #10
 c102f40:	1affffec 	bne	c102ef8 <uart0_getint+0x50>
		sol *= 10;
		int32 aux = x - '0';
		sol += aux;
		x = uart0_getchar();
	}
	return sol*signo;
 c102f44:	e51b3010 	ldr	r3, [fp, #-16]
 c102f48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c102f4c:	e0030392 	mul	r3, r2, r3
}
 c102f50:	e1a00003 	mov	r0, r3
 c102f54:	e24bd00c 	sub	sp, fp, #12
 c102f58:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102f5c:	e12fff1e 	bx	lr

0c102f60 <uart0_gethex>:

uint32 uart0_gethex( void )
{//no estoy completamente seguro
 c102f60:	e1a0c00d 	mov	ip, sp
 c102f64:	e92dd800 	push	{fp, ip, lr, pc}
 c102f68:	e24cb004 	sub	fp, ip, #4
 c102f6c:	e24dd020 	sub	sp, sp, #32
	uint32 sol = 0, aux;
 c102f70:	e3a03000 	mov	r3, #0
 c102f74:	e50b3010 	str	r3, [fp, #-16]
	char buf[8 + 1], x = uart0_getchar();
 c102f78:	ebffff11 	bl	c102bc4 <uart0_getchar>
 c102f7c:	e1a03000 	mov	r3, r0
 c102f80:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uint32 i = 0, j = 0;
 c102f84:	e3a03000 	mov	r3, #0
 c102f88:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c102f8c:	e3a03000 	mov	r3, #0
 c102f90:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	do{
		buf [i] = x;
 c102f94:	e3e0301f 	mvn	r3, #31
 c102f98:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102f9c:	e24b100c 	sub	r1, fp, #12
 c102fa0:	e0812002 	add	r2, r1, r2
 c102fa4:	e0823003 	add	r3, r2, r3
 c102fa8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c102fac:	e5c32000 	strb	r2, [r3]
		x = uart0_getchar();
 c102fb0:	ebffff03 	bl	c102bc4 <uart0_getchar>
 c102fb4:	e1a03000 	mov	r3, r0
 c102fb8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		i++;
 c102fbc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c102fc0:	e2833001 	add	r3, r3, #1
 c102fc4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	}while(x != '\n');
 c102fc8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102fcc:	e353000a 	cmp	r3, #10
 c102fd0:	1affffef 	bne	c102f94 <uart0_gethex+0x34>
	buf[i] = '\0';
 c102fd4:	e3e0301f 	mvn	r3, #31
 c102fd8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102fdc:	e24b100c 	sub	r1, fp, #12
 c102fe0:	e0812002 	add	r2, r1, r2
 c102fe4:	e0823003 	add	r3, r2, r3
 c102fe8:	e3a02000 	mov	r2, #0
 c102fec:	e5c32000 	strb	r2, [r3]
	while(buf[j] != '\0'){
 c102ff0:	ea000036 	b	c1030d0 <uart0_gethex+0x170>
		aux = buf[j];
 c102ff4:	e3e0301f 	mvn	r3, #31
 c102ff8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102ffc:	e24b100c 	sub	r1, fp, #12
 c103000:	e0812002 	add	r2, r1, r2
 c103004:	e0823003 	add	r3, r2, r3
 c103008:	e5d33000 	ldrb	r3, [r3]
 c10300c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if(buf[j] >= 97){
 c103010:	e3e0301f 	mvn	r3, #31
 c103014:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c103018:	e24b100c 	sub	r1, fp, #12
 c10301c:	e0812002 	add	r2, r1, r2
 c103020:	e0823003 	add	r3, r2, r3
 c103024:	e5d33000 	ldrb	r3, [r3]
 c103028:	e3530060 	cmp	r3, #96	; 0x60
 c10302c:	9a000006 	bls	c10304c <uart0_gethex+0xec>
			aux -= 'a';
 c103030:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103034:	e2433061 	sub	r3, r3, #97	; 0x61
 c103038:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			aux += 10;
 c10303c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103040:	e283300a 	add	r3, r3, #10
 c103044:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103048:	ea000011 	b	c103094 <uart0_gethex+0x134>
		}
		else if(buf[j] >= 65){
 c10304c:	e3e0301f 	mvn	r3, #31
 c103050:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c103054:	e24b100c 	sub	r1, fp, #12
 c103058:	e0812002 	add	r2, r1, r2
 c10305c:	e0823003 	add	r3, r2, r3
 c103060:	e5d33000 	ldrb	r3, [r3]
 c103064:	e3530040 	cmp	r3, #64	; 0x40
 c103068:	9a000006 	bls	c103088 <uart0_gethex+0x128>
			aux -= 'A';
 c10306c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103070:	e2433041 	sub	r3, r3, #65	; 0x41
 c103074:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			aux += 10;
 c103078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10307c:	e283300a 	add	r3, r3, #10
 c103080:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103084:	ea000002 	b	c103094 <uart0_gethex+0x134>
		}
		else{ aux -= '0';}
 c103088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10308c:	e2433030 	sub	r3, r3, #48	; 0x30
 c103090:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		sol += aux;
 c103094:	e51b2010 	ldr	r2, [fp, #-16]
 c103098:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10309c:	e0823003 	add	r3, r2, r3
 c1030a0:	e50b3010 	str	r3, [fp, #-16]
		if(j < i - 1){
 c1030a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1030a8:	e2432001 	sub	r2, r3, #1
 c1030ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1030b0:	e1520003 	cmp	r2, r3
 c1030b4:	9a000002 	bls	c1030c4 <uart0_gethex+0x164>
			sol *= 16;
 c1030b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1030bc:	e1a03203 	lsl	r3, r3, #4
 c1030c0:	e50b3010 	str	r3, [fp, #-16]
		}
		j++;
 c1030c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1030c8:	e2833001 	add	r3, r3, #1
 c1030cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		buf [i] = x;
		x = uart0_getchar();
		i++;
	}while(x != '\n');
	buf[i] = '\0';
	while(buf[j] != '\0'){
 c1030d0:	e3e0301f 	mvn	r3, #31
 c1030d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1030d8:	e24b100c 	sub	r1, fp, #12
 c1030dc:	e0812002 	add	r2, r1, r2
 c1030e0:	e0823003 	add	r3, r2, r3
 c1030e4:	e5d33000 	ldrb	r3, [r3]
 c1030e8:	e3530000 	cmp	r3, #0
 c1030ec:	1affffc0 	bne	c102ff4 <uart0_gethex+0x94>
			sol *= 16;
		}
		j++;
	}

	return sol;
 c1030f0:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1030f4:	e1a00003 	mov	r0, r3
 c1030f8:	e24bd00c 	sub	sp, fp, #12
 c1030fc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103100:	e12fff1e 	bx	lr

0c103104 <segs_init>:
static const uint8 hex2segs[16] = {0x12, 0x9f, 0x31, 0x15, 0x9c, 0x54, 0x50, 0x1f, 0x10, 0x1c, 0x18, 0xd0, 0x72, 0x91, 0x70, 0x78, 0xef};

static uint8 state;
        
void segs_init( void )
{
 c103104:	e1a0c00d 	mov	ip, sp
 c103108:	e92dd800 	push	{fp, ip, lr, pc}
 c10310c:	e24cb004 	sub	fp, ip, #4
    segs_off();
 c103110:	eb000002 	bl	c103120 <segs_off>
}                                  
 c103114:	e24bd00c 	sub	sp, fp, #12
 c103118:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10311c:	e12fff1e 	bx	lr

0c103120 <segs_off>:
                          
void segs_off( void )
{
 c103120:	e1a0c00d 	mov	ip, sp
 c103124:	e92dd800 	push	{fp, ip, lr, pc}
 c103128:	e24cb004 	sub	fp, ip, #4
    state = SEGS_OFF;
 c10312c:	e59f3020 	ldr	r3, [pc, #32]	; c103154 <segs_off+0x34>
 c103130:	e3e02000 	mvn	r2, #0
 c103134:	e5c32000 	strb	r2, [r3]
    SEGS = state;
 c103138:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10313c:	e59f2010 	ldr	r2, [pc, #16]	; c103154 <segs_off+0x34>
 c103140:	e5d22000 	ldrb	r2, [r2]
 c103144:	e5c32000 	strb	r2, [r3]
}
 c103148:	e24bd00c 	sub	sp, fp, #12
 c10314c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103150:	e12fff1e 	bx	lr
 c103154:	0c104b80 	.word	0x0c104b80

0c103158 <segs_putchar>:

void segs_putchar( uint8 n )
{
 c103158:	e1a0c00d 	mov	ip, sp
 c10315c:	e92dd800 	push	{fp, ip, lr, pc}
 c103160:	e24cb004 	sub	fp, ip, #4
 c103164:	e24dd008 	sub	sp, sp, #8
 c103168:	e1a03000 	mov	r3, r0
 c10316c:	e54b300d 	strb	r3, [fp, #-13]
    state = n & 0x0f;
 c103170:	e55b300d 	ldrb	r3, [fp, #-13]
 c103174:	e203300f 	and	r3, r3, #15
 c103178:	e20320ff 	and	r2, r3, #255	; 0xff
 c10317c:	e59f3024 	ldr	r3, [pc, #36]	; c1031a8 <segs_putchar+0x50>
 c103180:	e5c32000 	strb	r2, [r3]
    SEGS = hex2segs[state];
 c103184:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103188:	e59f2018 	ldr	r2, [pc, #24]	; c1031a8 <segs_putchar+0x50>
 c10318c:	e5d22000 	ldrb	r2, [r2]
 c103190:	e59f1014 	ldr	r1, [pc, #20]	; c1031ac <segs_putchar+0x54>
 c103194:	e7d12002 	ldrb	r2, [r1, r2]
 c103198:	e5c32000 	strb	r2, [r3]
};
 c10319c:	e24bd00c 	sub	sp, fp, #12
 c1031a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1031a4:	e12fff1e 	bx	lr
 c1031a8:	0c104b80 	.word	0x0c104b80
 c1031ac:	0c104b60 	.word	0x0c104b60

0c1031b0 <segs_status>:

uint8 segs_status( void )
{
 c1031b0:	e1a0c00d 	mov	ip, sp
 c1031b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1031b8:	e24cb004 	sub	fp, ip, #4
    return state;
 c1031bc:	e59f3010 	ldr	r3, [pc, #16]	; c1031d4 <segs_status+0x24>
 c1031c0:	e5d33000 	ldrb	r3, [r3]
};
 c1031c4:	e1a00003 	mov	r0, r3
 c1031c8:	e24bd00c 	sub	sp, fp, #12
 c1031cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1031d0:	e12fff1e 	bx	lr
 c1031d4:	0c104b80 	.word	0x0c104b80

0c1031d8 <__aeabi_uidiv>:
 c1031d8:	e2512001 	subs	r2, r1, #1
 c1031dc:	012fff1e 	bxeq	lr
 c1031e0:	3a000036 	bcc	c1032c0 <__aeabi_uidiv+0xe8>
 c1031e4:	e1500001 	cmp	r0, r1
 c1031e8:	9a000022 	bls	c103278 <__aeabi_uidiv+0xa0>
 c1031ec:	e1110002 	tst	r1, r2
 c1031f0:	0a000023 	beq	c103284 <__aeabi_uidiv+0xac>
 c1031f4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c1031f8:	01a01181 	lsleq	r1, r1, #3
 c1031fc:	03a03008 	moveq	r3, #8
 c103200:	13a03001 	movne	r3, #1
 c103204:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c103208:	31510000 	cmpcc	r1, r0
 c10320c:	31a01201 	lslcc	r1, r1, #4
 c103210:	31a03203 	lslcc	r3, r3, #4
 c103214:	3afffffa 	bcc	c103204 <__aeabi_uidiv+0x2c>
 c103218:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c10321c:	31510000 	cmpcc	r1, r0
 c103220:	31a01081 	lslcc	r1, r1, #1
 c103224:	31a03083 	lslcc	r3, r3, #1
 c103228:	3afffffa 	bcc	c103218 <__aeabi_uidiv+0x40>
 c10322c:	e3a02000 	mov	r2, #0
 c103230:	e1500001 	cmp	r0, r1
 c103234:	20400001 	subcs	r0, r0, r1
 c103238:	21822003 	orrcs	r2, r2, r3
 c10323c:	e15000a1 	cmp	r0, r1, lsr #1
 c103240:	204000a1 	subcs	r0, r0, r1, lsr #1
 c103244:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c103248:	e1500121 	cmp	r0, r1, lsr #2
 c10324c:	20400121 	subcs	r0, r0, r1, lsr #2
 c103250:	21822123 	orrcs	r2, r2, r3, lsr #2
 c103254:	e15001a1 	cmp	r0, r1, lsr #3
 c103258:	204001a1 	subcs	r0, r0, r1, lsr #3
 c10325c:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c103260:	e3500000 	cmp	r0, #0
 c103264:	11b03223 	lsrsne	r3, r3, #4
 c103268:	11a01221 	lsrne	r1, r1, #4
 c10326c:	1affffef 	bne	c103230 <__aeabi_uidiv+0x58>
 c103270:	e1a00002 	mov	r0, r2
 c103274:	e12fff1e 	bx	lr
 c103278:	03a00001 	moveq	r0, #1
 c10327c:	13a00000 	movne	r0, #0
 c103280:	e12fff1e 	bx	lr
 c103284:	e3510801 	cmp	r1, #65536	; 0x10000
 c103288:	21a01821 	lsrcs	r1, r1, #16
 c10328c:	23a02010 	movcs	r2, #16
 c103290:	33a02000 	movcc	r2, #0
 c103294:	e3510c01 	cmp	r1, #256	; 0x100
 c103298:	21a01421 	lsrcs	r1, r1, #8
 c10329c:	22822008 	addcs	r2, r2, #8
 c1032a0:	e3510010 	cmp	r1, #16
 c1032a4:	21a01221 	lsrcs	r1, r1, #4
 c1032a8:	22822004 	addcs	r2, r2, #4
 c1032ac:	e3510004 	cmp	r1, #4
 c1032b0:	82822003 	addhi	r2, r2, #3
 c1032b4:	908220a1 	addls	r2, r2, r1, lsr #1
 c1032b8:	e1a00230 	lsr	r0, r0, r2
 c1032bc:	e12fff1e 	bx	lr
 c1032c0:	e3500000 	cmp	r0, #0
 c1032c4:	13e00000 	mvnne	r0, #0
 c1032c8:	ea000007 	b	c1032ec <__aeabi_idiv0>

0c1032cc <__aeabi_uidivmod>:
 c1032cc:	e3510000 	cmp	r1, #0
 c1032d0:	0afffffa 	beq	c1032c0 <__aeabi_uidiv+0xe8>
 c1032d4:	e92d4003 	push	{r0, r1, lr}
 c1032d8:	ebffffbe 	bl	c1031d8 <__aeabi_uidiv>
 c1032dc:	e8bd4006 	pop	{r1, r2, lr}
 c1032e0:	e0030092 	mul	r3, r2, r0
 c1032e4:	e0411003 	sub	r1, r1, r3
 c1032e8:	e12fff1e 	bx	lr

0c1032ec <__aeabi_idiv0>:
 c1032ec:	e12fff1e 	bx	lr

0c1032f0 <__aeabi_uldivmod>:
 c1032f0:	e3530000 	cmp	r3, #0
 c1032f4:	03520000 	cmpeq	r2, #0
 c1032f8:	1a000004 	bne	c103310 <__aeabi_uldivmod+0x20>
 c1032fc:	e3510000 	cmp	r1, #0
 c103300:	03500000 	cmpeq	r0, #0
 c103304:	13e01000 	mvnne	r1, #0
 c103308:	13e00000 	mvnne	r0, #0
 c10330c:	eafffff6 	b	c1032ec <__aeabi_idiv0>
 c103310:	e24dd008 	sub	sp, sp, #8
 c103314:	e92d6000 	push	{sp, lr}
 c103318:	eb000013 	bl	c10336c <__gnu_uldivmod_helper>
 c10331c:	e59de004 	ldr	lr, [sp, #4]
 c103320:	e28dd008 	add	sp, sp, #8
 c103324:	e8bd000c 	pop	{r2, r3}
 c103328:	e12fff1e 	bx	lr

0c10332c <__gnu_ldivmod_helper>:
 c10332c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c103330:	e1a04002 	mov	r4, r2
 c103334:	e1a07003 	mov	r7, r3
 c103338:	e1a05000 	mov	r5, r0
 c10333c:	e1a06001 	mov	r6, r1
 c103340:	eb000019 	bl	c1033ac <__divdi3>
 c103344:	e0070790 	mul	r7, r0, r7
 c103348:	e0832490 	umull	r2, r3, r0, r4
 c10334c:	e0247491 	mla	r4, r1, r4, r7
 c103350:	e0843003 	add	r3, r4, r3
 c103354:	e0555002 	subs	r5, r5, r2
 c103358:	e0c66003 	sbc	r6, r6, r3
 c10335c:	e59d3018 	ldr	r3, [sp, #24]
 c103360:	e8830060 	stm	r3, {r5, r6}
 c103364:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c103368:	e12fff1e 	bx	lr

0c10336c <__gnu_uldivmod_helper>:
 c10336c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c103370:	e1a04002 	mov	r4, r2
 c103374:	e1a07003 	mov	r7, r3
 c103378:	e1a05000 	mov	r5, r0
 c10337c:	e1a06001 	mov	r6, r1
 c103380:	eb000133 	bl	c103854 <__udivdi3>
 c103384:	e0070790 	mul	r7, r0, r7
 c103388:	e0832490 	umull	r2, r3, r0, r4
 c10338c:	e0247491 	mla	r4, r1, r4, r7
 c103390:	e0843003 	add	r3, r4, r3
 c103394:	e0555002 	subs	r5, r5, r2
 c103398:	e0c66003 	sbc	r6, r6, r3
 c10339c:	e59d3018 	ldr	r3, [sp, #24]
 c1033a0:	e8830060 	stm	r3, {r5, r6}
 c1033a4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c1033a8:	e12fff1e 	bx	lr

0c1033ac <__divdi3>:
 c1033ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c1033b0:	e3510000 	cmp	r1, #0
 c1033b4:	e24dd014 	sub	sp, sp, #20
 c1033b8:	e1a0c003 	mov	ip, r3
 c1033bc:	a3a07000 	movge	r7, #0
 c1033c0:	ba000094 	blt	c103618 <__divdi3+0x26c>
 c1033c4:	e35c0000 	cmp	ip, #0
 c1033c8:	ba00008e 	blt	c103608 <__divdi3+0x25c>
 c1033cc:	e253a000 	subs	sl, r3, #0
 c1033d0:	e1a0b000 	mov	fp, r0
 c1033d4:	e1a08001 	mov	r8, r1
 c1033d8:	e1a09002 	mov	r9, r2
 c1033dc:	e1a04002 	mov	r4, r2
 c1033e0:	e1a05000 	mov	r5, r0
 c1033e4:	e1a06001 	mov	r6, r1
 c1033e8:	1a00003e 	bne	c1034e8 <__divdi3+0x13c>
 c1033ec:	e1520001 	cmp	r2, r1
 c1033f0:	9a00004c 	bls	c103528 <__divdi3+0x17c>
 c1033f4:	e1a00002 	mov	r0, r2
 c1033f8:	eb000222 	bl	c103c88 <__clzsi2>
 c1033fc:	e3500000 	cmp	r0, #0
 c103400:	12603020 	rsbne	r3, r0, #32
 c103404:	11a0333b 	lsrne	r3, fp, r3
 c103408:	11a04019 	lslne	r4, r9, r0
 c10340c:	11836018 	orrne	r6, r3, r8, lsl r0
 c103410:	e1a09824 	lsr	r9, r4, #16
 c103414:	11a0501b 	lslne	r5, fp, r0
 c103418:	e1a01009 	mov	r1, r9
 c10341c:	e1a00006 	mov	r0, r6
 c103420:	ebffff6c 	bl	c1031d8 <__aeabi_uidiv>
 c103424:	e1a01009 	mov	r1, r9
 c103428:	e1a0a000 	mov	sl, r0
 c10342c:	e1a00006 	mov	r0, r6
 c103430:	ebffffa5 	bl	c1032cc <__aeabi_uidivmod>
 c103434:	e1a08804 	lsl	r8, r4, #16
 c103438:	e1a08828 	lsr	r8, r8, #16
 c10343c:	e0030a98 	mul	r3, r8, sl
 c103440:	e1a0b825 	lsr	fp, r5, #16
 c103444:	e18bb801 	orr	fp, fp, r1, lsl #16
 c103448:	e153000b 	cmp	r3, fp
 c10344c:	9a000005 	bls	c103468 <__divdi3+0xbc>
 c103450:	e09bb004 	adds	fp, fp, r4
 c103454:	e24aa001 	sub	sl, sl, #1
 c103458:	2a000002 	bcs	c103468 <__divdi3+0xbc>
 c10345c:	e153000b 	cmp	r3, fp
 c103460:	824aa001 	subhi	sl, sl, #1
 c103464:	808bb004 	addhi	fp, fp, r4
 c103468:	e063b00b 	rsb	fp, r3, fp
 c10346c:	e1a01009 	mov	r1, r9
 c103470:	e1a0000b 	mov	r0, fp
 c103474:	ebffff57 	bl	c1031d8 <__aeabi_uidiv>
 c103478:	e1a01009 	mov	r1, r9
 c10347c:	e1a06000 	mov	r6, r0
 c103480:	e1a0000b 	mov	r0, fp
 c103484:	ebffff90 	bl	c1032cc <__aeabi_uidivmod>
 c103488:	e0080896 	mul	r8, r6, r8
 c10348c:	e1a00805 	lsl	r0, r5, #16
 c103490:	e1a05820 	lsr	r5, r0, #16
 c103494:	e1855801 	orr	r5, r5, r1, lsl #16
 c103498:	e1580005 	cmp	r8, r5
 c10349c:	9a000004 	bls	c1034b4 <__divdi3+0x108>
 c1034a0:	e0955004 	adds	r5, r5, r4
 c1034a4:	e2466001 	sub	r6, r6, #1
 c1034a8:	2a000001 	bcs	c1034b4 <__divdi3+0x108>
 c1034ac:	e1580005 	cmp	r8, r5
 c1034b0:	82466001 	subhi	r6, r6, #1
 c1034b4:	e186680a 	orr	r6, r6, sl, lsl #16
 c1034b8:	e3a09000 	mov	r9, #0
 c1034bc:	e3570000 	cmp	r7, #0
 c1034c0:	e1a03006 	mov	r3, r6
 c1034c4:	e1a04009 	mov	r4, r9
 c1034c8:	0a000001 	beq	c1034d4 <__divdi3+0x128>
 c1034cc:	e2733000 	rsbs	r3, r3, #0
 c1034d0:	e2e44000 	rsc	r4, r4, #0
 c1034d4:	e1a00003 	mov	r0, r3
 c1034d8:	e1a01004 	mov	r1, r4
 c1034dc:	e28dd014 	add	sp, sp, #20
 c1034e0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c1034e4:	e12fff1e 	bx	lr
 c1034e8:	e15a0001 	cmp	sl, r1
 c1034ec:	83a09000 	movhi	r9, #0
 c1034f0:	81a06009 	movhi	r6, r9
 c1034f4:	8afffff0 	bhi	c1034bc <__divdi3+0x110>
 c1034f8:	e1a00003 	mov	r0, r3
 c1034fc:	eb0001e1 	bl	c103c88 <__clzsi2>
 c103500:	e2504000 	subs	r4, r0, #0
 c103504:	1a00007a 	bne	c1036f4 <__divdi3+0x348>
 c103508:	e15a0008 	cmp	sl, r8
 c10350c:	2159000b 	cmpcs	r9, fp
 c103510:	83a09000 	movhi	r9, #0
 c103514:	93a09001 	movls	r9, #1
 c103518:	93a06001 	movls	r6, #1
 c10351c:	91a09004 	movls	r9, r4
 c103520:	81a06009 	movhi	r6, r9
 c103524:	eaffffe4 	b	c1034bc <__divdi3+0x110>
 c103528:	e3520000 	cmp	r2, #0
 c10352c:	1a000003 	bne	c103540 <__divdi3+0x194>
 c103530:	e3a00001 	mov	r0, #1
 c103534:	e1a01002 	mov	r1, r2
 c103538:	ebffff26 	bl	c1031d8 <__aeabi_uidiv>
 c10353c:	e1a04000 	mov	r4, r0
 c103540:	e1a00004 	mov	r0, r4
 c103544:	eb0001cf 	bl	c103c88 <__clzsi2>
 c103548:	e2503000 	subs	r3, r0, #0
 c10354c:	1a000035 	bne	c103628 <__divdi3+0x27c>
 c103550:	e3a01001 	mov	r1, #1
 c103554:	e1a09804 	lsl	r9, r4, #16
 c103558:	e58d1008 	str	r1, [sp, #8]
 c10355c:	e0646006 	rsb	r6, r4, r6
 c103560:	e1a08824 	lsr	r8, r4, #16
 c103564:	e1a09829 	lsr	r9, r9, #16
 c103568:	e1a01008 	mov	r1, r8
 c10356c:	e1a00006 	mov	r0, r6
 c103570:	ebffff18 	bl	c1031d8 <__aeabi_uidiv>
 c103574:	e1a01008 	mov	r1, r8
 c103578:	e1a0a000 	mov	sl, r0
 c10357c:	e1a00006 	mov	r0, r6
 c103580:	ebffff51 	bl	c1032cc <__aeabi_uidivmod>
 c103584:	e0030a99 	mul	r3, r9, sl
 c103588:	e1a0c825 	lsr	ip, r5, #16
 c10358c:	e18cb801 	orr	fp, ip, r1, lsl #16
 c103590:	e153000b 	cmp	r3, fp
 c103594:	9a000005 	bls	c1035b0 <__divdi3+0x204>
 c103598:	e09bb004 	adds	fp, fp, r4
 c10359c:	e24aa001 	sub	sl, sl, #1
 c1035a0:	2a000002 	bcs	c1035b0 <__divdi3+0x204>
 c1035a4:	e153000b 	cmp	r3, fp
 c1035a8:	824aa001 	subhi	sl, sl, #1
 c1035ac:	808bb004 	addhi	fp, fp, r4
 c1035b0:	e063b00b 	rsb	fp, r3, fp
 c1035b4:	e1a01008 	mov	r1, r8
 c1035b8:	e1a0000b 	mov	r0, fp
 c1035bc:	ebffff05 	bl	c1031d8 <__aeabi_uidiv>
 c1035c0:	e1a01008 	mov	r1, r8
 c1035c4:	e1a06000 	mov	r6, r0
 c1035c8:	e1a0000b 	mov	r0, fp
 c1035cc:	ebffff3e 	bl	c1032cc <__aeabi_uidivmod>
 c1035d0:	e0090996 	mul	r9, r6, r9
 c1035d4:	e1a00805 	lsl	r0, r5, #16
 c1035d8:	e1a05820 	lsr	r5, r0, #16
 c1035dc:	e1855801 	orr	r5, r5, r1, lsl #16
 c1035e0:	e1590005 	cmp	r9, r5
 c1035e4:	9a000004 	bls	c1035fc <__divdi3+0x250>
 c1035e8:	e0955004 	adds	r5, r5, r4
 c1035ec:	e2466001 	sub	r6, r6, #1
 c1035f0:	2a000001 	bcs	c1035fc <__divdi3+0x250>
 c1035f4:	e1590005 	cmp	r9, r5
 c1035f8:	82466001 	subhi	r6, r6, #1
 c1035fc:	e186680a 	orr	r6, r6, sl, lsl #16
 c103600:	e59d9008 	ldr	r9, [sp, #8]
 c103604:	eaffffac 	b	c1034bc <__divdi3+0x110>
 c103608:	e1e07007 	mvn	r7, r7
 c10360c:	e2722000 	rsbs	r2, r2, #0
 c103610:	e2e33000 	rsc	r3, r3, #0
 c103614:	eaffff6c 	b	c1033cc <__divdi3+0x20>
 c103618:	e2700000 	rsbs	r0, r0, #0
 c10361c:	e2e11000 	rsc	r1, r1, #0
 c103620:	e3e07000 	mvn	r7, #0
 c103624:	eaffff66 	b	c1033c4 <__divdi3+0x18>
 c103628:	e2638020 	rsb	r8, r3, #32
 c10362c:	e1a0b835 	lsr	fp, r5, r8
 c103630:	e1a04314 	lsl	r4, r4, r3
 c103634:	e1a0a836 	lsr	sl, r6, r8
 c103638:	e18be316 	orr	lr, fp, r6, lsl r3
 c10363c:	e1a08824 	lsr	r8, r4, #16
 c103640:	e1a0c804 	lsl	ip, r4, #16
 c103644:	e1a01008 	mov	r1, r8
 c103648:	e1a0000a 	mov	r0, sl
 c10364c:	e1a0982c 	lsr	r9, ip, #16
 c103650:	e1a05315 	lsl	r5, r5, r3
 c103654:	e58de008 	str	lr, [sp, #8]
 c103658:	ebfffede 	bl	c1031d8 <__aeabi_uidiv>
 c10365c:	e1a01008 	mov	r1, r8
 c103660:	e1a0b000 	mov	fp, r0
 c103664:	e1a0000a 	mov	r0, sl
 c103668:	ebffff17 	bl	c1032cc <__aeabi_uidivmod>
 c10366c:	e0030b99 	mul	r3, r9, fp
 c103670:	e59d2008 	ldr	r2, [sp, #8]
 c103674:	e1a06822 	lsr	r6, r2, #16
 c103678:	e1866801 	orr	r6, r6, r1, lsl #16
 c10367c:	e1530006 	cmp	r3, r6
 c103680:	9a000002 	bls	c103690 <__divdi3+0x2e4>
 c103684:	e0966004 	adds	r6, r6, r4
 c103688:	e24bb001 	sub	fp, fp, #1
 c10368c:	3a00006c 	bcc	c103844 <__divdi3+0x498>
 c103690:	e0636006 	rsb	r6, r3, r6
 c103694:	e1a01008 	mov	r1, r8
 c103698:	e1a00006 	mov	r0, r6
 c10369c:	ebfffecd 	bl	c1031d8 <__aeabi_uidiv>
 c1036a0:	e1a01008 	mov	r1, r8
 c1036a4:	e1a0a000 	mov	sl, r0
 c1036a8:	e1a00006 	mov	r0, r6
 c1036ac:	ebffff06 	bl	c1032cc <__aeabi_uidivmod>
 c1036b0:	e0030a99 	mul	r3, r9, sl
 c1036b4:	e59d2008 	ldr	r2, [sp, #8]
 c1036b8:	e1a06802 	lsl	r6, r2, #16
 c1036bc:	e1a00826 	lsr	r0, r6, #16
 c1036c0:	e1806801 	orr	r6, r0, r1, lsl #16
 c1036c4:	e1530006 	cmp	r3, r6
 c1036c8:	9a000005 	bls	c1036e4 <__divdi3+0x338>
 c1036cc:	e0966004 	adds	r6, r6, r4
 c1036d0:	e24aa001 	sub	sl, sl, #1
 c1036d4:	2a000002 	bcs	c1036e4 <__divdi3+0x338>
 c1036d8:	e1530006 	cmp	r3, r6
 c1036dc:	824aa001 	subhi	sl, sl, #1
 c1036e0:	80866004 	addhi	r6, r6, r4
 c1036e4:	e0636006 	rsb	r6, r3, r6
 c1036e8:	e18a380b 	orr	r3, sl, fp, lsl #16
 c1036ec:	e58d3008 	str	r3, [sp, #8]
 c1036f0:	eaffff9c 	b	c103568 <__divdi3+0x1bc>
 c1036f4:	e2641020 	rsb	r1, r4, #32
 c1036f8:	e1a00139 	lsr	r0, r9, r1
 c1036fc:	e1a0213b 	lsr	r2, fp, r1
 c103700:	e180a41a 	orr	sl, r0, sl, lsl r4
 c103704:	e1a06138 	lsr	r6, r8, r1
 c103708:	e1828418 	orr	r8, r2, r8, lsl r4
 c10370c:	e1a0380a 	lsl	r3, sl, #16
 c103710:	e1a0b82a 	lsr	fp, sl, #16
 c103714:	e1a0e823 	lsr	lr, r3, #16
 c103718:	e1a0100b 	mov	r1, fp
 c10371c:	e1a00006 	mov	r0, r6
 c103720:	e58d8008 	str	r8, [sp, #8]
 c103724:	e58de00c 	str	lr, [sp, #12]
 c103728:	ebfffeaa 	bl	c1031d8 <__aeabi_uidiv>
 c10372c:	e1a0100b 	mov	r1, fp
 c103730:	e1a08000 	mov	r8, r0
 c103734:	e1a00006 	mov	r0, r6
 c103738:	ebfffee3 	bl	c1032cc <__aeabi_uidivmod>
 c10373c:	e59dc00c 	ldr	ip, [sp, #12]
 c103740:	e002089c 	mul	r2, ip, r8
 c103744:	e59d3008 	ldr	r3, [sp, #8]
 c103748:	e1a06823 	lsr	r6, r3, #16
 c10374c:	e1861801 	orr	r1, r6, r1, lsl #16
 c103750:	e1520001 	cmp	r2, r1
 c103754:	e1a03419 	lsl	r3, r9, r4
 c103758:	9a000002 	bls	c103768 <__divdi3+0x3bc>
 c10375c:	e091100a 	adds	r1, r1, sl
 c103760:	e2488001 	sub	r8, r8, #1
 c103764:	3a000032 	bcc	c103834 <__divdi3+0x488>
 c103768:	e0629001 	rsb	r9, r2, r1
 c10376c:	e1a00009 	mov	r0, r9
 c103770:	e1a0100b 	mov	r1, fp
 c103774:	e58d3004 	str	r3, [sp, #4]
 c103778:	ebfffe96 	bl	c1031d8 <__aeabi_uidiv>
 c10377c:	e1a0100b 	mov	r1, fp
 c103780:	e1a06000 	mov	r6, r0
 c103784:	e1a00009 	mov	r0, r9
 c103788:	ebfffecf 	bl	c1032cc <__aeabi_uidivmod>
 c10378c:	e59d000c 	ldr	r0, [sp, #12]
 c103790:	e0020690 	mul	r2, r0, r6
 c103794:	e59d3008 	ldr	r3, [sp, #8]
 c103798:	e1a0c803 	lsl	ip, r3, #16
 c10379c:	e1a0982c 	lsr	r9, ip, #16
 c1037a0:	e1890801 	orr	r0, r9, r1, lsl #16
 c1037a4:	e1520000 	cmp	r2, r0
 c1037a8:	e59d3004 	ldr	r3, [sp, #4]
 c1037ac:	9a000002 	bls	c1037bc <__divdi3+0x410>
 c1037b0:	e090000a 	adds	r0, r0, sl
 c1037b4:	e2466001 	sub	r6, r6, #1
 c1037b8:	3a000019 	bcc	c103824 <__divdi3+0x478>
 c1037bc:	e062e000 	rsb	lr, r2, r0
 c1037c0:	e1866808 	orr	r6, r6, r8, lsl #16
 c1037c4:	e1a02826 	lsr	r2, r6, #16
 c1037c8:	e1a01823 	lsr	r1, r3, #16
 c1037cc:	e1c6c802 	bic	ip, r6, r2, lsl #16
 c1037d0:	e1c39801 	bic	r9, r3, r1, lsl #16
 c1037d4:	e003099c 	mul	r3, ip, r9
 c1037d8:	e0090992 	mul	r9, r2, r9
 c1037dc:	e00c0c91 	mul	ip, r1, ip
 c1037e0:	e0010192 	mul	r1, r2, r1
 c1037e4:	e099c00c 	adds	ip, r9, ip
 c1037e8:	22811801 	addcs	r1, r1, #65536	; 0x10000
 c1037ec:	e093380c 	adds	r3, r3, ip, lsl #16
 c1037f0:	e0a1182c 	adc	r1, r1, ip, lsr #16
 c1037f4:	e15e0001 	cmp	lr, r1
 c1037f8:	3a000006 	bcc	c103818 <__divdi3+0x46c>
 c1037fc:	13a02000 	movne	r2, #0
 c103800:	03a02001 	moveq	r2, #1
 c103804:	e1530415 	cmp	r3, r5, lsl r4
 c103808:	93a09000 	movls	r9, #0
 c10380c:	82029001 	andhi	r9, r2, #1
 c103810:	e3590000 	cmp	r9, #0
 c103814:	0affff28 	beq	c1034bc <__divdi3+0x110>
 c103818:	e2466001 	sub	r6, r6, #1
 c10381c:	e3a09000 	mov	r9, #0
 c103820:	eaffff25 	b	c1034bc <__divdi3+0x110>
 c103824:	e1520000 	cmp	r2, r0
 c103828:	82466001 	subhi	r6, r6, #1
 c10382c:	8080000a 	addhi	r0, r0, sl
 c103830:	eaffffe1 	b	c1037bc <__divdi3+0x410>
 c103834:	e1520001 	cmp	r2, r1
 c103838:	82488001 	subhi	r8, r8, #1
 c10383c:	8081100a 	addhi	r1, r1, sl
 c103840:	eaffffc8 	b	c103768 <__divdi3+0x3bc>
 c103844:	e1530006 	cmp	r3, r6
 c103848:	824bb001 	subhi	fp, fp, #1
 c10384c:	80866004 	addhi	r6, r6, r4
 c103850:	eaffff8e 	b	c103690 <__divdi3+0x2e4>

0c103854 <__udivdi3>:
 c103854:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c103858:	e2538000 	subs	r8, r3, #0
 c10385c:	e24dd00c 	sub	sp, sp, #12
 c103860:	e1a05000 	mov	r5, r0
 c103864:	e1a04001 	mov	r4, r1
 c103868:	e1a06002 	mov	r6, r2
 c10386c:	e1a0a002 	mov	sl, r2
 c103870:	e1a0b000 	mov	fp, r0
 c103874:	e1a07001 	mov	r7, r1
 c103878:	1a000037 	bne	c10395c <__udivdi3+0x108>
 c10387c:	e1520001 	cmp	r2, r1
 c103880:	9a000045 	bls	c10399c <__udivdi3+0x148>
 c103884:	e1a00002 	mov	r0, r2
 c103888:	eb0000fe 	bl	c103c88 <__clzsi2>
 c10388c:	e3500000 	cmp	r0, #0
 c103890:	12603020 	rsbne	r3, r0, #32
 c103894:	11a03335 	lsrne	r3, r5, r3
 c103898:	11a0a016 	lslne	sl, r6, r0
 c10389c:	11837014 	orrne	r7, r3, r4, lsl r0
 c1038a0:	e1a0482a 	lsr	r4, sl, #16
 c1038a4:	11a0b015 	lslne	fp, r5, r0
 c1038a8:	e1a01004 	mov	r1, r4
 c1038ac:	e1a00007 	mov	r0, r7
 c1038b0:	ebfffe48 	bl	c1031d8 <__aeabi_uidiv>
 c1038b4:	e1a01004 	mov	r1, r4
 c1038b8:	e1a08000 	mov	r8, r0
 c1038bc:	e1a00007 	mov	r0, r7
 c1038c0:	ebfffe81 	bl	c1032cc <__aeabi_uidivmod>
 c1038c4:	e1a0680a 	lsl	r6, sl, #16
 c1038c8:	e1a06826 	lsr	r6, r6, #16
 c1038cc:	e0030896 	mul	r3, r6, r8
 c1038d0:	e1a0782b 	lsr	r7, fp, #16
 c1038d4:	e1877801 	orr	r7, r7, r1, lsl #16
 c1038d8:	e1530007 	cmp	r3, r7
 c1038dc:	9a000005 	bls	c1038f8 <__udivdi3+0xa4>
 c1038e0:	e097700a 	adds	r7, r7, sl
 c1038e4:	e2488001 	sub	r8, r8, #1
 c1038e8:	2a000002 	bcs	c1038f8 <__udivdi3+0xa4>
 c1038ec:	e1530007 	cmp	r3, r7
 c1038f0:	82488001 	subhi	r8, r8, #1
 c1038f4:	8087700a 	addhi	r7, r7, sl
 c1038f8:	e0637007 	rsb	r7, r3, r7
 c1038fc:	e1a01004 	mov	r1, r4
 c103900:	e1a00007 	mov	r0, r7
 c103904:	ebfffe33 	bl	c1031d8 <__aeabi_uidiv>
 c103908:	e1a01004 	mov	r1, r4
 c10390c:	e1a05000 	mov	r5, r0
 c103910:	e1a00007 	mov	r0, r7
 c103914:	ebfffe6c 	bl	c1032cc <__aeabi_uidivmod>
 c103918:	e0060695 	mul	r6, r5, r6
 c10391c:	e1a0080b 	lsl	r0, fp, #16
 c103920:	e1a0b820 	lsr	fp, r0, #16
 c103924:	e18bb801 	orr	fp, fp, r1, lsl #16
 c103928:	e156000b 	cmp	r6, fp
 c10392c:	9a000004 	bls	c103944 <__udivdi3+0xf0>
 c103930:	e09bb00a 	adds	fp, fp, sl
 c103934:	e2455001 	sub	r5, r5, #1
 c103938:	2a000001 	bcs	c103944 <__udivdi3+0xf0>
 c10393c:	e156000b 	cmp	r6, fp
 c103940:	82455001 	subhi	r5, r5, #1
 c103944:	e1858808 	orr	r8, r5, r8, lsl #16
 c103948:	e3a01000 	mov	r1, #0
 c10394c:	e1a00008 	mov	r0, r8
 c103950:	e28dd00c 	add	sp, sp, #12
 c103954:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c103958:	e12fff1e 	bx	lr
 c10395c:	e1580001 	cmp	r8, r1
 c103960:	83a01000 	movhi	r1, #0
 c103964:	81a08001 	movhi	r8, r1
 c103968:	8afffff7 	bhi	c10394c <__udivdi3+0xf8>
 c10396c:	e1a00008 	mov	r0, r8
 c103970:	eb0000c4 	bl	c103c88 <__clzsi2>
 c103974:	e2507000 	subs	r7, r0, #0
 c103978:	1a00003e 	bne	c103a78 <__udivdi3+0x224>
 c10397c:	e1580004 	cmp	r8, r4
 c103980:	21560005 	cmpcs	r6, r5
 c103984:	83a01000 	movhi	r1, #0
 c103988:	93a01001 	movls	r1, #1
 c10398c:	93a08001 	movls	r8, #1
 c103990:	91a01007 	movls	r1, r7
 c103994:	81a08001 	movhi	r8, r1
 c103998:	eaffffeb 	b	c10394c <__udivdi3+0xf8>
 c10399c:	e3520000 	cmp	r2, #0
 c1039a0:	1a000003 	bne	c1039b4 <__udivdi3+0x160>
 c1039a4:	e3a00001 	mov	r0, #1
 c1039a8:	e1a01002 	mov	r1, r2
 c1039ac:	ebfffe09 	bl	c1031d8 <__aeabi_uidiv>
 c1039b0:	e1a0a000 	mov	sl, r0
 c1039b4:	e1a0000a 	mov	r0, sl
 c1039b8:	eb0000b2 	bl	c103c88 <__clzsi2>
 c1039bc:	e2503000 	subs	r3, r0, #0
 c1039c0:	1a000075 	bne	c103b9c <__udivdi3+0x348>
 c1039c4:	e1a0180a 	lsl	r1, sl, #16
 c1039c8:	e06a4004 	rsb	r4, sl, r4
 c1039cc:	e1a0982a 	lsr	r9, sl, #16
 c1039d0:	e1a06821 	lsr	r6, r1, #16
 c1039d4:	e3a07001 	mov	r7, #1
 c1039d8:	e1a01009 	mov	r1, r9
 c1039dc:	e1a00004 	mov	r0, r4
 c1039e0:	ebfffdfc 	bl	c1031d8 <__aeabi_uidiv>
 c1039e4:	e1a01009 	mov	r1, r9
 c1039e8:	e1a05000 	mov	r5, r0
 c1039ec:	e1a00004 	mov	r0, r4
 c1039f0:	ebfffe35 	bl	c1032cc <__aeabi_uidivmod>
 c1039f4:	e0030596 	mul	r3, r6, r5
 c1039f8:	e1a0282b 	lsr	r2, fp, #16
 c1039fc:	e1824801 	orr	r4, r2, r1, lsl #16
 c103a00:	e1530004 	cmp	r3, r4
 c103a04:	9a000005 	bls	c103a20 <__udivdi3+0x1cc>
 c103a08:	e094400a 	adds	r4, r4, sl
 c103a0c:	e2455001 	sub	r5, r5, #1
 c103a10:	2a000002 	bcs	c103a20 <__udivdi3+0x1cc>
 c103a14:	e1530004 	cmp	r3, r4
 c103a18:	82455001 	subhi	r5, r5, #1
 c103a1c:	8084400a 	addhi	r4, r4, sl
 c103a20:	e0634004 	rsb	r4, r3, r4
 c103a24:	e1a01009 	mov	r1, r9
 c103a28:	e1a00004 	mov	r0, r4
 c103a2c:	ebfffde9 	bl	c1031d8 <__aeabi_uidiv>
 c103a30:	e1a01009 	mov	r1, r9
 c103a34:	e1a08000 	mov	r8, r0
 c103a38:	e1a00004 	mov	r0, r4
 c103a3c:	ebfffe22 	bl	c1032cc <__aeabi_uidivmod>
 c103a40:	e0060698 	mul	r6, r8, r6
 c103a44:	e1a0b80b 	lsl	fp, fp, #16
 c103a48:	e1a0382b 	lsr	r3, fp, #16
 c103a4c:	e183b801 	orr	fp, r3, r1, lsl #16
 c103a50:	e156000b 	cmp	r6, fp
 c103a54:	9a000004 	bls	c103a6c <__udivdi3+0x218>
 c103a58:	e09bb00a 	adds	fp, fp, sl
 c103a5c:	e2488001 	sub	r8, r8, #1
 c103a60:	2a000001 	bcs	c103a6c <__udivdi3+0x218>
 c103a64:	e156000b 	cmp	r6, fp
 c103a68:	82488001 	subhi	r8, r8, #1
 c103a6c:	e1888805 	orr	r8, r8, r5, lsl #16
 c103a70:	e1a01007 	mov	r1, r7
 c103a74:	eaffffb4 	b	c10394c <__udivdi3+0xf8>
 c103a78:	e267a020 	rsb	sl, r7, #32
 c103a7c:	e1a01a36 	lsr	r1, r6, sl
 c103a80:	e1a02a35 	lsr	r2, r5, sl
 c103a84:	e1818718 	orr	r8, r1, r8, lsl r7
 c103a88:	e1a0ba34 	lsr	fp, r4, sl
 c103a8c:	e1829714 	orr	r9, r2, r4, lsl r7
 c103a90:	e1a0a828 	lsr	sl, r8, #16
 c103a94:	e1a0e808 	lsl	lr, r8, #16
 c103a98:	e1a0100a 	mov	r1, sl
 c103a9c:	e1a0000b 	mov	r0, fp
 c103aa0:	e1a0482e 	lsr	r4, lr, #16
 c103aa4:	e58d9004 	str	r9, [sp, #4]
 c103aa8:	ebfffdca 	bl	c1031d8 <__aeabi_uidiv>
 c103aac:	e1a0100a 	mov	r1, sl
 c103ab0:	e1a09000 	mov	r9, r0
 c103ab4:	e1a0000b 	mov	r0, fp
 c103ab8:	ebfffe03 	bl	c1032cc <__aeabi_uidivmod>
 c103abc:	e0020994 	mul	r2, r4, r9
 c103ac0:	e59d0004 	ldr	r0, [sp, #4]
 c103ac4:	e1a0c820 	lsr	ip, r0, #16
 c103ac8:	e18cb801 	orr	fp, ip, r1, lsl #16
 c103acc:	e152000b 	cmp	r2, fp
 c103ad0:	e1a03716 	lsl	r3, r6, r7
 c103ad4:	9a000002 	bls	c103ae4 <__udivdi3+0x290>
 c103ad8:	e09bb008 	adds	fp, fp, r8
 c103adc:	e2499001 	sub	r9, r9, #1
 c103ae0:	3a000060 	bcc	c103c68 <__udivdi3+0x414>
 c103ae4:	e062b00b 	rsb	fp, r2, fp
 c103ae8:	e1a0100a 	mov	r1, sl
 c103aec:	e1a0000b 	mov	r0, fp
 c103af0:	e58d3000 	str	r3, [sp]
 c103af4:	ebfffdb7 	bl	c1031d8 <__aeabi_uidiv>
 c103af8:	e1a0100a 	mov	r1, sl
 c103afc:	e1a06000 	mov	r6, r0
 c103b00:	e1a0000b 	mov	r0, fp
 c103b04:	ebfffdf0 	bl	c1032cc <__aeabi_uidivmod>
 c103b08:	e0040496 	mul	r4, r6, r4
 c103b0c:	e59d0004 	ldr	r0, [sp, #4]
 c103b10:	e1a0c800 	lsl	ip, r0, #16
 c103b14:	e1a0382c 	lsr	r3, ip, #16
 c103b18:	e1832801 	orr	r2, r3, r1, lsl #16
 c103b1c:	e1540002 	cmp	r4, r2
 c103b20:	e59d3000 	ldr	r3, [sp]
 c103b24:	9a000002 	bls	c103b34 <__udivdi3+0x2e0>
 c103b28:	e0922008 	adds	r2, r2, r8
 c103b2c:	e2466001 	sub	r6, r6, #1
 c103b30:	3a000048 	bcc	c103c58 <__udivdi3+0x404>
 c103b34:	e0644002 	rsb	r4, r4, r2
 c103b38:	e1868809 	orr	r8, r6, r9, lsl #16
 c103b3c:	e1a02828 	lsr	r2, r8, #16
 c103b40:	e1a0e823 	lsr	lr, r3, #16
 c103b44:	e1c80802 	bic	r0, r8, r2, lsl #16
 c103b48:	e1c3680e 	bic	r6, r3, lr, lsl #16
 c103b4c:	e0030690 	mul	r3, r0, r6
 c103b50:	e0060692 	mul	r6, r2, r6
 c103b54:	e000009e 	mul	r0, lr, r0
 c103b58:	e00e0e92 	mul	lr, r2, lr
 c103b5c:	e0960000 	adds	r0, r6, r0
 c103b60:	228ee801 	addcs	lr, lr, #65536	; 0x10000
 c103b64:	e0933800 	adds	r3, r3, r0, lsl #16
 c103b68:	e0aee820 	adc	lr, lr, r0, lsr #16
 c103b6c:	e154000e 	cmp	r4, lr
 c103b70:	3a000006 	bcc	c103b90 <__udivdi3+0x33c>
 c103b74:	13a02000 	movne	r2, #0
 c103b78:	03a02001 	moveq	r2, #1
 c103b7c:	e1530715 	cmp	r3, r5, lsl r7
 c103b80:	93a01000 	movls	r1, #0
 c103b84:	82021001 	andhi	r1, r2, #1
 c103b88:	e3510000 	cmp	r1, #0
 c103b8c:	0affff6e 	beq	c10394c <__udivdi3+0xf8>
 c103b90:	e2488001 	sub	r8, r8, #1
 c103b94:	e3a01000 	mov	r1, #0
 c103b98:	eaffff6b 	b	c10394c <__udivdi3+0xf8>
 c103b9c:	e2639020 	rsb	r9, r3, #32
 c103ba0:	e1a0a31a 	lsl	sl, sl, r3
 c103ba4:	e1a07934 	lsr	r7, r4, r9
 c103ba8:	e1a08935 	lsr	r8, r5, r9
 c103bac:	e1a0982a 	lsr	r9, sl, #16
 c103bb0:	e1a0280a 	lsl	r2, sl, #16
 c103bb4:	e1a01009 	mov	r1, r9
 c103bb8:	e1a00007 	mov	r0, r7
 c103bbc:	e1888314 	orr	r8, r8, r4, lsl r3
 c103bc0:	e1a0b315 	lsl	fp, r5, r3
 c103bc4:	e1a06822 	lsr	r6, r2, #16
 c103bc8:	ebfffd82 	bl	c1031d8 <__aeabi_uidiv>
 c103bcc:	e1a01009 	mov	r1, r9
 c103bd0:	e1a05000 	mov	r5, r0
 c103bd4:	e1a00007 	mov	r0, r7
 c103bd8:	ebfffdbb 	bl	c1032cc <__aeabi_uidivmod>
 c103bdc:	e0030596 	mul	r3, r6, r5
 c103be0:	e1a04828 	lsr	r4, r8, #16
 c103be4:	e1844801 	orr	r4, r4, r1, lsl #16
 c103be8:	e1530004 	cmp	r3, r4
 c103bec:	9a000002 	bls	c103bfc <__udivdi3+0x3a8>
 c103bf0:	e094400a 	adds	r4, r4, sl
 c103bf4:	e2455001 	sub	r5, r5, #1
 c103bf8:	3a00001e 	bcc	c103c78 <__udivdi3+0x424>
 c103bfc:	e0634004 	rsb	r4, r3, r4
 c103c00:	e1a01009 	mov	r1, r9
 c103c04:	e1a00004 	mov	r0, r4
 c103c08:	ebfffd72 	bl	c1031d8 <__aeabi_uidiv>
 c103c0c:	e1a01009 	mov	r1, r9
 c103c10:	e1a07000 	mov	r7, r0
 c103c14:	e1a00004 	mov	r0, r4
 c103c18:	ebfffdab 	bl	c1032cc <__aeabi_uidivmod>
 c103c1c:	e0030796 	mul	r3, r6, r7
 c103c20:	e1a00808 	lsl	r0, r8, #16
 c103c24:	e1a0c820 	lsr	ip, r0, #16
 c103c28:	e18c4801 	orr	r4, ip, r1, lsl #16
 c103c2c:	e1530004 	cmp	r3, r4
 c103c30:	9a000005 	bls	c103c4c <__udivdi3+0x3f8>
 c103c34:	e094400a 	adds	r4, r4, sl
 c103c38:	e2477001 	sub	r7, r7, #1
 c103c3c:	2a000002 	bcs	c103c4c <__udivdi3+0x3f8>
 c103c40:	e1530004 	cmp	r3, r4
 c103c44:	82477001 	subhi	r7, r7, #1
 c103c48:	8084400a 	addhi	r4, r4, sl
 c103c4c:	e0634004 	rsb	r4, r3, r4
 c103c50:	e1877805 	orr	r7, r7, r5, lsl #16
 c103c54:	eaffff5f 	b	c1039d8 <__udivdi3+0x184>
 c103c58:	e1540002 	cmp	r4, r2
 c103c5c:	82466001 	subhi	r6, r6, #1
 c103c60:	80822008 	addhi	r2, r2, r8
 c103c64:	eaffffb2 	b	c103b34 <__udivdi3+0x2e0>
 c103c68:	e152000b 	cmp	r2, fp
 c103c6c:	82499001 	subhi	r9, r9, #1
 c103c70:	808bb008 	addhi	fp, fp, r8
 c103c74:	eaffff9a 	b	c103ae4 <__udivdi3+0x290>
 c103c78:	e1530004 	cmp	r3, r4
 c103c7c:	82455001 	subhi	r5, r5, #1
 c103c80:	8084400a 	addhi	r4, r4, sl
 c103c84:	eaffffdc 	b	c103bfc <__udivdi3+0x3a8>

0c103c88 <__clzsi2>:
 c103c88:	e3a0101c 	mov	r1, #28
 c103c8c:	e3500801 	cmp	r0, #65536	; 0x10000
 c103c90:	21a00820 	lsrcs	r0, r0, #16
 c103c94:	22411010 	subcs	r1, r1, #16
 c103c98:	e3500c01 	cmp	r0, #256	; 0x100
 c103c9c:	21a00420 	lsrcs	r0, r0, #8
 c103ca0:	22411008 	subcs	r1, r1, #8
 c103ca4:	e3500010 	cmp	r0, #16
 c103ca8:	21a00220 	lsrcs	r0, r0, #4
 c103cac:	22411004 	subcs	r1, r1, #4
 c103cb0:	e28f2008 	add	r2, pc, #8
 c103cb4:	e7d20000 	ldrb	r0, [r2, r0]
 c103cb8:	e0800001 	add	r0, r0, r1
 c103cbc:	e12fff1e 	bx	lr
 c103cc0:	02020304 	.word	0x02020304
 c103cc4:	01010101 	.word	0x01010101
	...
