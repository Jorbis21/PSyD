
lab13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005718  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001774  0c105718  0c105718  0000d718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0c106e8c  0c106e8c  0000ee8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000009  0c106e94  0c106e94  0000ee94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000096bc  0c106ea0  0c106ea0  0000ee9d  2**2
                  ALLOC
  5 .debug_abbrev 00000a85  00000000  00000000  0000ee9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f88  00000000  00000000  0000f922  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dc6  00000000  00000000  000118aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_macinfo 00035e72  00000000  00000000  00012670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000162c  00000000  00000000  000484e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000931  00000000  00000000  00049b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000240  00000000  00000000  0004a43f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000160  00000000  00000000  0004a67f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000903  00000000  00000000  0004a7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000002a  00000000  00000000  0004b0e2  2**0
                  CONTENTS, READONLY
 15 .ARM.attributes 00000032  00000000  00000000  0004b10c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001220  00000000  00000000  0004b140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <delete_task>:
#include <s3c44b0x.h>

static task_t tasks[MAX_TASKS];   /* Lista ordenada de TCBs */

void delete_task( uint32 id )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd008 	sub	sp, sp, #8
 c100010:	e50b0010 	str	r0, [fp, #-16]
    tasks[id].pfunction = NULL;
 c100014:	e59f3074 	ldr	r3, [pc, #116]	; c100090 <delete_task+0x90>
 c100018:	e51b2010 	ldr	r2, [fp, #-16]
 c10001c:	e3a01000 	mov	r1, #0
 c100020:	e7831202 	str	r1, [r3, r2, lsl #4]
    tasks[id].period = 0; 
 c100024:	e59f1064 	ldr	r1, [pc, #100]	; c100090 <delete_task+0x90>
 c100028:	e51b2010 	ldr	r2, [fp, #-16]
 c10002c:	e3a03004 	mov	r3, #4
 c100030:	e1a02202 	lsl	r2, r2, #4
 c100034:	e0812002 	add	r2, r1, r2
 c100038:	e0823003 	add	r3, r2, r3
 c10003c:	e3a02000 	mov	r2, #0
 c100040:	e5832000 	str	r2, [r3]
    tasks[id].ticks = 0;
 c100044:	e59f1044 	ldr	r1, [pc, #68]	; c100090 <delete_task+0x90>
 c100048:	e51b2010 	ldr	r2, [fp, #-16]
 c10004c:	e3a03008 	mov	r3, #8
 c100050:	e1a02202 	lsl	r2, r2, #4
 c100054:	e0812002 	add	r2, r1, r2
 c100058:	e0823003 	add	r3, r2, r3
 c10005c:	e3a02000 	mov	r2, #0
 c100060:	e5832000 	str	r2, [r3]
    tasks[id].ready = FALSE;     
 c100064:	e59f1024 	ldr	r1, [pc, #36]	; c100090 <delete_task+0x90>
 c100068:	e51b2010 	ldr	r2, [fp, #-16]
 c10006c:	e3a03008 	mov	r3, #8
 c100070:	e1a02202 	lsl	r2, r2, #4
 c100074:	e0812002 	add	r2, r1, r2
 c100078:	e0823003 	add	r3, r2, r3
 c10007c:	e3a02000 	mov	r2, #0
 c100080:	e5c32004 	strb	r2, [r3, #4]
}
 c100084:	e24bd00c 	sub	sp, fp, #12
 c100088:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10008c:	e12fff1e 	bx	lr
 c100090:	0c106ea0 	.word	0x0c106ea0

0c100094 <create_task>:

uint32 create_task( void (*pfunction)( void ), uint32 period )
{
 c100094:	e1a0c00d 	mov	ip, sp
 c100098:	e92dd800 	push	{fp, ip, lr, pc}
 c10009c:	e24cb004 	sub	fp, ip, #4
 c1000a0:	e24dd010 	sub	sp, sp, #16
 c1000a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1000a8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32 id;
    
    for( id=0; id<MAX_TASKS && tasks[id].pfunction ; id++ ); /* Busca la primera entrada libre (con función no NULL) de la lista de TCB */
 c1000ac:	e3a03000 	mov	r3, #0
 c1000b0:	e50b3010 	str	r3, [fp, #-16]
 c1000b4:	ea000002 	b	c1000c4 <create_task+0x30>
 c1000b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1000bc:	e2833001 	add	r3, r3, #1
 c1000c0:	e50b3010 	str	r3, [fp, #-16]
 c1000c4:	e51b3010 	ldr	r3, [fp, #-16]
 c1000c8:	e3530009 	cmp	r3, #9
 c1000cc:	8a000004 	bhi	c1000e4 <create_task+0x50>
 c1000d0:	e59f309c 	ldr	r3, [pc, #156]	; c100174 <create_task+0xe0>
 c1000d4:	e51b2010 	ldr	r2, [fp, #-16]
 c1000d8:	e7933202 	ldr	r3, [r3, r2, lsl #4]
 c1000dc:	e3530000 	cmp	r3, #0
 c1000e0:	1afffff4 	bne	c1000b8 <create_task+0x24>
    
    tasks[id].pfunction = pfunction;
 c1000e4:	e59f3088 	ldr	r3, [pc, #136]	; c100174 <create_task+0xe0>
 c1000e8:	e51b2010 	ldr	r2, [fp, #-16]
 c1000ec:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c1000f0:	e7831202 	str	r1, [r3, r2, lsl #4]
    tasks[id].period = period; 
 c1000f4:	e59f1078 	ldr	r1, [pc, #120]	; c100174 <create_task+0xe0>
 c1000f8:	e51b2010 	ldr	r2, [fp, #-16]
 c1000fc:	e3a03004 	mov	r3, #4
 c100100:	e1a02202 	lsl	r2, r2, #4
 c100104:	e0812002 	add	r2, r1, r2
 c100108:	e0823003 	add	r3, r2, r3
 c10010c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c100110:	e5832000 	str	r2, [r3]
    tasks[id].ticks = 0;
 c100114:	e59f1058 	ldr	r1, [pc, #88]	; c100174 <create_task+0xe0>
 c100118:	e51b2010 	ldr	r2, [fp, #-16]
 c10011c:	e3a03008 	mov	r3, #8
 c100120:	e1a02202 	lsl	r2, r2, #4
 c100124:	e0812002 	add	r2, r1, r2
 c100128:	e0823003 	add	r3, r2, r3
 c10012c:	e3a02000 	mov	r2, #0
 c100130:	e5832000 	str	r2, [r3]
    tasks[id].ready = FALSE;     
 c100134:	e59f1038 	ldr	r1, [pc, #56]	; c100174 <create_task+0xe0>
 c100138:	e51b2010 	ldr	r2, [fp, #-16]
 c10013c:	e3a03008 	mov	r3, #8
 c100140:	e1a02202 	lsl	r2, r2, #4
 c100144:	e0812002 	add	r2, r1, r2
 c100148:	e0823003 	add	r3, r2, r3
 c10014c:	e3a02000 	mov	r2, #0
 c100150:	e5c32004 	strb	r2, [r3, #4]
        
    (*pfunction)();     /* Asume que la primera llamada a la tarea la inicializa */
 c100154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100158:	e1a0e00f 	mov	lr, pc
 c10015c:	e12fff13 	bx	r3

    return id;    
 c100160:	e51b3010 	ldr	r3, [fp, #-16]
}
 c100164:	e1a00003 	mov	r0, r3
 c100168:	e24bd00c 	sub	sp, fp, #12
 c10016c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100170:	e12fff1e 	bx	lr
 c100174:	0c106ea0 	.word	0x0c106ea0

0c100178 <scheduler_init>:

void scheduler_init( void )
{
 c100178:	e1a0c00d 	mov	ip, sp
 c10017c:	e92dd800 	push	{fp, ip, lr, pc}
 c100180:	e24cb004 	sub	fp, ip, #4
 c100184:	e24dd008 	sub	sp, sp, #8
    uint32 id;
    
    for( id=0; id<MAX_TASKS; id++ )
 c100188:	e3a03000 	mov	r3, #0
 c10018c:	e50b3010 	str	r3, [fp, #-16]
 c100190:	ea000004 	b	c1001a8 <scheduler_init+0x30>
        delete_task( id );
 c100194:	e51b0010 	ldr	r0, [fp, #-16]
 c100198:	ebffff98 	bl	c100000 <delete_task>

void scheduler_init( void )
{
    uint32 id;
    
    for( id=0; id<MAX_TASKS; id++ )
 c10019c:	e51b3010 	ldr	r3, [fp, #-16]
 c1001a0:	e2833001 	add	r3, r3, #1
 c1001a4:	e50b3010 	str	r3, [fp, #-16]
 c1001a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1001ac:	e3530009 	cmp	r3, #9
 c1001b0:	9afffff7 	bls	c100194 <scheduler_init+0x1c>
        delete_task( id );
};
 c1001b4:	e24bd00c 	sub	sp, fp, #12
 c1001b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1001bc:	e12fff1e 	bx	lr

0c1001c0 <scheduler>:

void scheduler( void ) /* Esta funcion es la ISR del timer0 */
{
 c1001c0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1001c4:	e1a0c00d 	mov	ip, sp
 c1001c8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1001cc:	e24cb004 	sub	fp, ip, #4
 c1001d0:	e24dd008 	sub	sp, sp, #8
    uint32 id;
    
    I_ISPC = BIT_TIMER0;    /* Borra el bit de interrupción pendiente */
 c1001d4:	e59f3108 	ldr	r3, [pc, #264]	; c1002e4 <scheduler+0x124>
 c1001d8:	e3a02a02 	mov	r2, #8192	; 0x2000
 c1001dc:	e5832000 	str	r2, [r3]

    for( id=0; id<MAX_TASKS; id++ )                     /* Recorre la lista completa de TCB */
 c1001e0:	e3a03000 	mov	r3, #0
 c1001e4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c1001e8:	ea000036 	b	c1002c8 <scheduler+0x108>
        if( tasks[id].pfunction )
 c1001ec:	e59f30f4 	ldr	r3, [pc, #244]	; c1002e8 <scheduler+0x128>
 c1001f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1001f4:	e7933202 	ldr	r3, [r3, r2, lsl #4]
 c1001f8:	e3530000 	cmp	r3, #0
 c1001fc:	0a00002e 	beq	c1002bc <scheduler+0xfc>
            if( ++tasks[id].ticks == tasks[id].period ) /* Si el contador de ticks equivale a su periodo de ejecución: */
 c100200:	e59f10e0 	ldr	r1, [pc, #224]	; c1002e8 <scheduler+0x128>
 c100204:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c100208:	e3a03008 	mov	r3, #8
 c10020c:	e1a02202 	lsl	r2, r2, #4
 c100210:	e0812002 	add	r2, r1, r2
 c100214:	e0823003 	add	r3, r2, r3
 c100218:	e5933000 	ldr	r3, [r3]
 c10021c:	e2832001 	add	r2, r3, #1
 c100220:	e59f00c0 	ldr	r0, [pc, #192]	; c1002e8 <scheduler+0x128>
 c100224:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c100228:	e3a03008 	mov	r3, #8
 c10022c:	e1a01201 	lsl	r1, r1, #4
 c100230:	e0801001 	add	r1, r0, r1
 c100234:	e0813003 	add	r3, r1, r3
 c100238:	e5832000 	str	r2, [r3]
 c10023c:	e59f10a4 	ldr	r1, [pc, #164]	; c1002e8 <scheduler+0x128>
 c100240:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c100244:	e3a03008 	mov	r3, #8
 c100248:	e1a02202 	lsl	r2, r2, #4
 c10024c:	e0812002 	add	r2, r1, r2
 c100250:	e0823003 	add	r3, r2, r3
 c100254:	e5932000 	ldr	r2, [r3]
 c100258:	e59f0088 	ldr	r0, [pc, #136]	; c1002e8 <scheduler+0x128>
 c10025c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c100260:	e3a03004 	mov	r3, #4
 c100264:	e1a01201 	lsl	r1, r1, #4
 c100268:	e0801001 	add	r1, r0, r1
 c10026c:	e0813003 	add	r3, r1, r3
 c100270:	e5933000 	ldr	r3, [r3]
 c100274:	e1520003 	cmp	r2, r3
 c100278:	1a00000f 	bne	c1002bc <scheduler+0xfc>
            {
                tasks[id].ticks = 0;                    /* Inicializa a 0 su contador de ticks */
 c10027c:	e59f1064 	ldr	r1, [pc, #100]	; c1002e8 <scheduler+0x128>
 c100280:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c100284:	e3a03008 	mov	r3, #8
 c100288:	e1a02202 	lsl	r2, r2, #4
 c10028c:	e0812002 	add	r2, r1, r2
 c100290:	e0823003 	add	r3, r2, r3
 c100294:	e3a02000 	mov	r2, #0
 c100298:	e5832000 	str	r2, [r3]
                tasks[id].ready = TRUE;                 /* Pasa la tarea a estado "preparado" */
 c10029c:	e59f1044 	ldr	r1, [pc, #68]	; c1002e8 <scheduler+0x128>
 c1002a0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1002a4:	e3a03008 	mov	r3, #8
 c1002a8:	e1a02202 	lsl	r2, r2, #4
 c1002ac:	e0812002 	add	r2, r1, r2
 c1002b0:	e0823003 	add	r3, r2, r3
 c1002b4:	e3a02001 	mov	r2, #1
 c1002b8:	e5c32004 	strb	r2, [r3, #4]
{
    uint32 id;
    
    I_ISPC = BIT_TIMER0;    /* Borra el bit de interrupción pendiente */

    for( id=0; id<MAX_TASKS; id++ )                     /* Recorre la lista completa de TCB */
 c1002bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1002c0:	e2833001 	add	r3, r3, #1
 c1002c4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c1002c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1002cc:	e3530009 	cmp	r3, #9
 c1002d0:	9affffc5 	bls	c1001ec <scheduler+0x2c>
            if( ++tasks[id].ticks == tasks[id].period ) /* Si el contador de ticks equivale a su periodo de ejecución: */
            {
                tasks[id].ticks = 0;                    /* Inicializa a 0 su contador de ticks */
                tasks[id].ready = TRUE;                 /* Pasa la tarea a estado "preparado" */
            };
};
 c1002d4:	e24bd01c 	sub	sp, fp, #28
 c1002d8:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c1002dc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1002e0:	e25ef004 	subs	pc, lr, #4
 c1002e4:	01e00024 	.word	0x01e00024
 c1002e8:	0c106ea0 	.word	0x0c106ea0

0c1002ec <dispacher>:
    
void dispacher( void )
{
 c1002ec:	e1a0c00d 	mov	ip, sp
 c1002f0:	e92dd800 	push	{fp, ip, lr, pc}
 c1002f4:	e24cb004 	sub	fp, ip, #4
 c1002f8:	e24dd008 	sub	sp, sp, #8
    uint32 id;
    
    for( id=0; id<MAX_TASKS; id++ )                     /* Recorre la lista completa de TCB */
 c1002fc:	e3a03000 	mov	r3, #0
 c100300:	e50b3010 	str	r3, [fp, #-16]
 c100304:	ea000018 	b	c10036c <dispacher+0x80>
        if( tasks[id].ready == TRUE )                   /* Si la tarea está en estado "preparado": */
 c100308:	e59f1074 	ldr	r1, [pc, #116]	; c100384 <dispacher+0x98>
 c10030c:	e51b2010 	ldr	r2, [fp, #-16]
 c100310:	e3a03008 	mov	r3, #8
 c100314:	e1a02202 	lsl	r2, r2, #4
 c100318:	e0812002 	add	r2, r1, r2
 c10031c:	e0823003 	add	r3, r2, r3
 c100320:	e5d33004 	ldrb	r3, [r3, #4]
 c100324:	e3530001 	cmp	r3, #1
 c100328:	1a00000c 	bne	c100360 <dispacher+0x74>
        {
            (*tasks[id].pfunction)();                   /* La ejecuta */
 c10032c:	e59f3050 	ldr	r3, [pc, #80]	; c100384 <dispacher+0x98>
 c100330:	e51b2010 	ldr	r2, [fp, #-16]
 c100334:	e7933202 	ldr	r3, [r3, r2, lsl #4]
 c100338:	e1a0e00f 	mov	lr, pc
 c10033c:	e12fff13 	bx	r3
            tasks[id].ready = FALSE;                    /* Pasa la tarea a estado "no preparado" */
 c100340:	e59f103c 	ldr	r1, [pc, #60]	; c100384 <dispacher+0x98>
 c100344:	e51b2010 	ldr	r2, [fp, #-16]
 c100348:	e3a03008 	mov	r3, #8
 c10034c:	e1a02202 	lsl	r2, r2, #4
 c100350:	e0812002 	add	r2, r1, r2
 c100354:	e0823003 	add	r3, r2, r3
 c100358:	e3a02000 	mov	r2, #0
 c10035c:	e5c32004 	strb	r2, [r3, #4]
    
void dispacher( void )
{
    uint32 id;
    
    for( id=0; id<MAX_TASKS; id++ )                     /* Recorre la lista completa de TCB */
 c100360:	e51b3010 	ldr	r3, [fp, #-16]
 c100364:	e2833001 	add	r3, r3, #1
 c100368:	e50b3010 	str	r3, [fp, #-16]
 c10036c:	e51b3010 	ldr	r3, [fp, #-16]
 c100370:	e3530009 	cmp	r3, #9
 c100374:	9affffe3 	bls	c100308 <dispacher+0x1c>
        if( tasks[id].ready == TRUE )                   /* Si la tarea está en estado "preparado": */
        {
            (*tasks[id].pfunction)();                   /* La ejecuta */
            tasks[id].ready = FALSE;                    /* Pasa la tarea a estado "no preparado" */
        }
};
 c100378:	e24bd00c 	sub	sp, fp, #12
 c10037c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100380:	e12fff1e 	bx	lr
 c100384:	0c106ea0 	.word	0x0c106ea0

0c100388 <main>:
void isr_pb( void ) __attribute__ ((interrupt ("IRQ")));

/*******************************************************************/

void main( void )
{
 c100388:	e1a0c00d 	mov	ip, sp
 c10038c:	e92dd800 	push	{fp, ip, lr, pc}
 c100390:	e24cb004 	sub	fp, ip, #4
    sys_init();      /* Inicializa el sistema */
 c100394:	eb000acd 	bl	c102ed0 <sys_init>
    timers_init();
 c100398:	eb000e0b 	bl	c103bcc <timers_init>
    uart0_init();
 c10039c:	eb00109e 	bl	c10461c <uart0_init>
    leds_init();
 c1003a0:	eb0007b8 	bl	c102288 <leds_init>
    segs_init();
 c1003a4:	eb000a94 	bl	c102dfc <segs_init>
    rtc_init();
 c1003a8:	eb000937 	bl	c10288c <rtc_init>
    pbs_init();
 c1003ac:	eb000811 	bl	c1023f8 <pbs_init>
    keypad_init();
 c1003b0:	eb00028a 	bl	c100de0 <keypad_init>
    lcd_init();
 c1003b4:	eb00030b 	bl	c100fe8 <lcd_init>

    uart0_puts( "\n\n Ejecutando kernel de planificación no expropiativa\n" );
 c1003b8:	e59f00d0 	ldr	r0, [pc, #208]	; c100490 <main+0x108>
 c1003bc:	eb0010d9 	bl	c104728 <uart0_puts>
    uart0_puts( " --------------------------------------------------\n\n" ) ;
 c1003c0:	e59f00cc 	ldr	r0, [pc, #204]	; c100494 <main+0x10c>
 c1003c4:	eb0010d7 	bl	c104728 <uart0_puts>

    flagTask5  = FALSE;               /* Inicializa flags */
 c1003c8:	e59f30c8 	ldr	r3, [pc, #200]	; c100498 <main+0x110>
 c1003cc:	e3a02000 	mov	r2, #0
 c1003d0:	e5c32000 	strb	r2, [r3]
    flagTask6  = FALSE;
 c1003d4:	e59f30c0 	ldr	r3, [pc, #192]	; c10049c <main+0x114>
 c1003d8:	e3a02000 	mov	r2, #0
 c1003dc:	e5c32000 	strb	r2, [r3]
    flagPb     = FALSE;
 c1003e0:	e59f30b8 	ldr	r3, [pc, #184]	; c1004a0 <main+0x118>
 c1003e4:	e3a02000 	mov	r2, #0
 c1003e8:	e5c32000 	strb	r2, [r3]
    flagTask8  = FALSE;
 c1003ec:	e59f30b0 	ldr	r3, [pc, #176]	; c1004a4 <main+0x11c>
 c1003f0:	e3a02000 	mov	r2, #0
 c1003f4:	e5c32000 	strb	r2, [r3]

    scheduler_init();                 /* Inicializa el kernel */
 c1003f8:	ebffff5e 	bl	c100178 <scheduler_init>

    create_task( Task2, 5 );          /* Crea las tareas de la aplicación... */
 c1003fc:	e59f00a4 	ldr	r0, [pc, #164]	; c1004a8 <main+0x120>
 c100400:	e3a01005 	mov	r1, #5
 c100404:	ebffff22 	bl	c100094 <create_task>
    create_task( Task8, 5 );
 c100408:	e59f009c 	ldr	r0, [pc, #156]	; c1004ac <main+0x124>
 c10040c:	e3a01005 	mov	r1, #5
 c100410:	ebffff1f 	bl	c100094 <create_task>
    create_task( Task7, 5 );          /* ... el kernel asigna la prioridad según orden de creación: Task2 > Task5 > Task6 > ... */
 c100414:	e59f0094 	ldr	r0, [pc, #148]	; c1004b0 <main+0x128>
 c100418:	e3a01005 	mov	r1, #5
 c10041c:	ebffff1c 	bl	c100094 <create_task>
    create_task( Task5, 10 );         /* ... las tareas más frecuentes tienen mayor prioridad (criterio Rate-Monotonic-Scheduling) */
 c100420:	e59f008c 	ldr	r0, [pc, #140]	; c1004b4 <main+0x12c>
 c100424:	e3a0100a 	mov	r1, #10
 c100428:	ebffff19 	bl	c100094 <create_task>
    create_task( Task6, 10 );
 c10042c:	e59f0084 	ldr	r0, [pc, #132]	; c1004b8 <main+0x130>
 c100430:	e3a0100a 	mov	r1, #10
 c100434:	ebffff16 	bl	c100094 <create_task>
    create_task( Task1, 50 );
 c100438:	e59f007c 	ldr	r0, [pc, #124]	; c1004bc <main+0x134>
 c10043c:	e3a01032 	mov	r1, #50	; 0x32
 c100440:	ebffff13 	bl	c100094 <create_task>
    create_task( Task3, 100 );
 c100444:	e59f0074 	ldr	r0, [pc, #116]	; c1004c0 <main+0x138>
 c100448:	e3a01064 	mov	r1, #100	; 0x64
 c10044c:	ebffff10 	bl	c100094 <create_task>
    create_task( Task9, 100 );
 c100450:	e59f006c 	ldr	r0, [pc, #108]	; c1004c4 <main+0x13c>
 c100454:	e3a01064 	mov	r1, #100	; 0x64
 c100458:	ebffff0d 	bl	c100094 <create_task>
    create_task( Task4, 1000 );
 c10045c:	e59f0064 	ldr	r0, [pc, #100]	; c1004c8 <main+0x140>
 c100460:	e3a01ffa 	mov	r1, #1000	; 0x3e8
 c100464:	ebffff0a 	bl	c100094 <create_task>

    lcd_on();
 c100468:	eb00033f 	bl	c10116c <lcd_on>
    lcd_clear();
 c10046c:	eb000366 	bl	c10120c <lcd_clear>

    timer0_open_tick( scheduler, TICKS_PER_SEC );  /* Instala scheduler como RTI del timer0  */
 c100470:	e59f0054 	ldr	r0, [pc, #84]	; c1004cc <main+0x144>
 c100474:	e3a01064 	mov	r1, #100	; 0x64
 c100478:	eb000f6e 	bl	c104238 <timer0_open_tick>
    pbs_open( isr_pb );                            /* Instala isr_pb como RTI por presión de pulsadores  */
 c10047c:	e59f004c 	ldr	r0, [pc, #76]	; c1004d0 <main+0x148>
 c100480:	eb000883 	bl	c102694 <pbs_open>

    while( 1 )
    {
        sleep();                /* Entra en estado IDLE, sale por interrupción */
 c100484:	eb000d3c 	bl	c10397c <sleep>
        dispacher();            /* Las tareas preparadas se ejecutan en esta hebra (background) en orden de prioridad */
 c100488:	ebffff97 	bl	c1002ec <dispacher>
    }
 c10048c:	eafffffc 	b	c100484 <main+0xfc>
 c100490:	0c105718 	.word	0x0c105718
 c100494:	0c105750 	.word	0x0c105750
 c100498:	0c106f55 	.word	0x0c106f55
 c10049c:	0c106f56 	.word	0x0c106f56
 c1004a0:	0c106f57 	.word	0x0c106f57
 c1004a4:	0c106f58 	.word	0x0c106f58
 c1004a8:	0c1006ac 	.word	0x0c1006ac
 c1004ac:	0c1004d4 	.word	0x0c1004d4
 c1004b0:	0c100a20 	.word	0x0c100a20
 c1004b4:	0c100910 	.word	0x0c100910
 c1004b8:	0c1009a4 	.word	0x0c1009a4
 c1004bc:	0c100644 	.word	0x0c100644
 c1004c0:	0c1007d8 	.word	0x0c1007d8
 c1004c4:	0c100570 	.word	0x0c100570
 c1004c8:	0c10087c 	.word	0x0c10087c
 c1004cc:	0c1001c0 	.word	0x0c1001c0
 c1004d0:	0c100a98 	.word	0x0c100a98

0c1004d4 <Task8>:

}

/*******************************************************************/

void Task8(void){
 c1004d4:	e1a0c00d 	mov	ip, sp
 c1004d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1004dc:	e24cb004 	sub	fp, ip, #4
	static boolean init = TRUE;
	if(init){
 c1004e0:	e59f3074 	ldr	r3, [pc, #116]	; c10055c <Task8+0x88>
 c1004e4:	e5d33000 	ldrb	r3, [r3]
 c1004e8:	e3530000 	cmp	r3, #0
 c1004ec:	0a000005 	beq	c100508 <Task8+0x34>
		init = FALSE;
 c1004f0:	e59f3064 	ldr	r3, [pc, #100]	; c10055c <Task8+0x88>
 c1004f4:	e3a02000 	mov	r2, #0
 c1004f8:	e5c32000 	strb	r2, [r3]
		uart0_puts( " Task 8: iniciada.\n" );
 c1004fc:	e59f005c 	ldr	r0, [pc, #92]	; c100560 <Task8+0x8c>
 c100500:	eb001088 	bl	c104728 <uart0_puts>
 c100504:	ea000011 	b	c100550 <Task8+0x7c>
	}
	else if(flagTask8){
 c100508:	e59f3054 	ldr	r3, [pc, #84]	; c100564 <Task8+0x90>
 c10050c:	e5d33000 	ldrb	r3, [r3]
 c100510:	e3530000 	cmp	r3, #0
 c100514:	0a00000d 	beq	c100550 <Task8+0x7c>
		flagTask8 = FALSE;
 c100518:	e59f3044 	ldr	r3, [pc, #68]	; c100564 <Task8+0x90>
 c10051c:	e3a02000 	mov	r2, #0
 c100520:	e5c32000 	strb	r2, [r3]
		lcd_puts_x2( 20, 56, BLACK, "Tecla: " );
 c100524:	e3a00014 	mov	r0, #20
 c100528:	e3a01038 	mov	r1, #56	; 0x38
 c10052c:	e3a0200f 	mov	r2, #15
 c100530:	e59f3030 	ldr	r3, [pc, #48]	; c100568 <Task8+0x94>
 c100534:	eb0006aa 	bl	c101fe4 <lcd_puts_x2>
		lcd_puthex_x2(125,56,BLACK, scancode);
 c100538:	e59f302c 	ldr	r3, [pc, #44]	; c10056c <Task8+0x98>
 c10053c:	e5d33000 	ldrb	r3, [r3]
 c100540:	e3a0007d 	mov	r0, #125	; 0x7d
 c100544:	e3a01038 	mov	r1, #56	; 0x38
 c100548:	e3a0200f 	mov	r2, #15
 c10054c:	eb000715 	bl	c1021a8 <lcd_puthex_x2>
	}
}
 c100550:	e24bd00c 	sub	sp, fp, #12
 c100554:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100558:	e12fff1e 	bx	lr
 c10055c:	0c106e9c 	.word	0x0c106e9c
 c100560:	0c105788 	.word	0x0c105788
 c100564:	0c106f58 	.word	0x0c106f58
 c100568:	0c10579c 	.word	0x0c10579c
 c10056c:	0c106f54 	.word	0x0c106f54

0c100570 <Task9>:

void Task9(void){
 c100570:	e1a0c00d 	mov	ip, sp
 c100574:	e92dd800 	push	{fp, ip, lr, pc}
 c100578:	e24cb004 	sub	fp, ip, #4
 c10057c:	e24dd010 	sub	sp, sp, #16
	static boolean init = TRUE;
	rtc_time_t rtc_time;
	uint32 time_sec;
	if(init){
 c100580:	e59f30b0 	ldr	r3, [pc, #176]	; c100638 <Task9+0xc8>
 c100584:	e5d33000 	ldrb	r3, [r3]
 c100588:	e3530000 	cmp	r3, #0
 c10058c:	0a000005 	beq	c1005a8 <Task9+0x38>
		init = FALSE;
 c100590:	e59f30a0 	ldr	r3, [pc, #160]	; c100638 <Task9+0xc8>
 c100594:	e3a02000 	mov	r2, #0
 c100598:	e5c32000 	strb	r2, [r3]
		uart0_puts( " Task 9: iniciada.\n" );
 c10059c:	e59f0098 	ldr	r0, [pc, #152]	; c10063c <Task9+0xcc>
 c1005a0:	eb001060 	bl	c104728 <uart0_puts>
 c1005a4:	ea000020 	b	c10062c <Task9+0xbc>
	}
	else{
		rtc_gettime( &rtc_time );
 c1005a8:	e24b3018 	sub	r3, fp, #24
 c1005ac:	e1a00003 	mov	r0, r3
 c1005b0:	eb00094f 	bl	c102af4 <rtc_gettime>
		time_sec = rtc_time.hour*3600 + rtc_time.min*60 + rtc_time.sec;
 c1005b4:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c1005b8:	e1a02003 	mov	r2, r3
 c1005bc:	e1a03002 	mov	r3, r2
 c1005c0:	e1a03203 	lsl	r3, r3, #4
 c1005c4:	e0623003 	rsb	r3, r2, r3
 c1005c8:	e1a02203 	lsl	r2, r3, #4
 c1005cc:	e0632002 	rsb	r2, r3, r2
 c1005d0:	e1a03202 	lsl	r3, r2, #4
 c1005d4:	e1a02003 	mov	r2, r3
 c1005d8:	e1a01002 	mov	r1, r2
 c1005dc:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c1005e0:	e1a02003 	mov	r2, r3
 c1005e4:	e1a03002 	mov	r3, r2
 c1005e8:	e1a03203 	lsl	r3, r3, #4
 c1005ec:	e0623003 	rsb	r3, r2, r3
 c1005f0:	e1a03103 	lsl	r3, r3, #2
 c1005f4:	e0812003 	add	r2, r1, r3
 c1005f8:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
 c1005fc:	e0823003 	add	r3, r2, r3
 c100600:	e50b3010 	str	r3, [fp, #-16]
		lcd_puts_x2( 20, 26, BLACK, "Segundos: " );
 c100604:	e3a00014 	mov	r0, #20
 c100608:	e3a0101a 	mov	r1, #26
 c10060c:	e3a0200f 	mov	r2, #15
 c100610:	e59f3028 	ldr	r3, [pc, #40]	; c100640 <Task9+0xd0>
 c100614:	eb000672 	bl	c101fe4 <lcd_puts_x2>
		lcd_putint_x2(175,26,BLACK, time_sec);
 c100618:	e51b3010 	ldr	r3, [fp, #-16]
 c10061c:	e3a000af 	mov	r0, #175	; 0xaf
 c100620:	e3a0101a 	mov	r1, #26
 c100624:	e3a0200f 	mov	r2, #15
 c100628:	eb000690 	bl	c102070 <lcd_putint_x2>
	}
}
 c10062c:	e24bd00c 	sub	sp, fp, #12
 c100630:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100634:	e12fff1e 	bx	lr
 c100638:	0c106e9b 	.word	0x0c106e9b
 c10063c:	0c1057a4 	.word	0x0c1057a4
 c100640:	0c1057b8 	.word	0x0c1057b8

0c100644 <Task1>:

void Task1( void )  /* Cada 0,5 segundos (50 ticks) alterna el led que se enciende */
{
 c100644:	e1a0c00d 	mov	ip, sp
 c100648:	e92dd800 	push	{fp, ip, lr, pc}
 c10064c:	e24cb004 	sub	fp, ip, #4
    static boolean init = TRUE;

    if( init )
 c100650:	e59f304c 	ldr	r3, [pc, #76]	; c1006a4 <Task1+0x60>
 c100654:	e5d33000 	ldrb	r3, [r3]
 c100658:	e3530000 	cmp	r3, #0
 c10065c:	0a000009 	beq	c100688 <Task1+0x44>
    {
        init = FALSE;
 c100660:	e59f303c 	ldr	r3, [pc, #60]	; c1006a4 <Task1+0x60>
 c100664:	e3a02000 	mov	r2, #0
 c100668:	e5c32000 	strb	r2, [r3]
        uart0_puts( " Task 1: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es necesario semáforo) */
 c10066c:	e59f0034 	ldr	r0, [pc, #52]	; c1006a8 <Task1+0x64>
 c100670:	eb00102c 	bl	c104728 <uart0_puts>
        led_on( LEFT_LED );
 c100674:	e3a00001 	mov	r0, #1
 c100678:	eb00070c 	bl	c1022b0 <led_on>
        led_off( RIGHT_LED );
 c10067c:	e3a00002 	mov	r0, #2
 c100680:	eb00071c 	bl	c1022f8 <led_off>
 c100684:	ea000003 	b	c100698 <Task1+0x54>
    }
    else
    {
        led_toggle( LEFT_LED );
 c100688:	e3a00001 	mov	r0, #1
 c10068c:	eb00072a 	bl	c10233c <led_toggle>
        led_toggle( RIGHT_LED );
 c100690:	e3a00002 	mov	r0, #2
 c100694:	eb000728 	bl	c10233c <led_toggle>
    }
}
 c100698:	e24bd00c 	sub	sp, fp, #12
 c10069c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1006a0:	e12fff1e 	bx	lr
 c1006a4:	0c106e9a 	.word	0x0c106e9a
 c1006a8:	0c1057c4 	.word	0x0c1057c4

0c1006ac <Task2>:

void Task2( void )  /* Cada 50 ms (5 ticks) muestrea el keypad y envía el scancode a otras tareas */
{
 c1006ac:	e1a0c00d 	mov	ip, sp
 c1006b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1006b4:	e24cb004 	sub	fp, ip, #4
    static boolean init = TRUE;
    static enum { wait_keydown, scan, wait_keyup } state;

    if( init )
 c1006b8:	e59f30fc 	ldr	r3, [pc, #252]	; c1007bc <Task2+0x110>
 c1006bc:	e5d33000 	ldrb	r3, [r3]
 c1006c0:	e3530000 	cmp	r3, #0
 c1006c4:	0a000008 	beq	c1006ec <Task2+0x40>
    {
        init  = FALSE;
 c1006c8:	e59f30ec 	ldr	r3, [pc, #236]	; c1007bc <Task2+0x110>
 c1006cc:	e3a02000 	mov	r2, #0
 c1006d0:	e5c32000 	strb	r2, [r3]
        uart0_puts( " Task 2: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es necesario semáforo) */
 c1006d4:	e59f00e4 	ldr	r0, [pc, #228]	; c1007c0 <Task2+0x114>
 c1006d8:	eb001012 	bl	c104728 <uart0_puts>
        state = wait_keydown;
 c1006dc:	e59f30e0 	ldr	r3, [pc, #224]	; c1007c4 <Task2+0x118>
 c1006e0:	e3a02000 	mov	r2, #0
 c1006e4:	e5c32000 	strb	r2, [r3]
 c1006e8:	ea000030 	b	c1007b0 <Task2+0x104>
    }
    else switch( state )
 c1006ec:	e59f30d0 	ldr	r3, [pc, #208]	; c1007c4 <Task2+0x118>
 c1006f0:	e5d33000 	ldrb	r3, [r3]
 c1006f4:	e3530001 	cmp	r3, #1
 c1006f8:	0a00000b 	beq	c10072c <Task2+0x80>
 c1006fc:	e3530002 	cmp	r3, #2
 c100700:	0a00001f 	beq	c100784 <Task2+0xd8>
 c100704:	e3530000 	cmp	r3, #0
 c100708:	1a000028 	bne	c1007b0 <Task2+0x104>
    {
        case wait_keydown:
            if( keypad_pressed() )
 c10070c:	eb00017e 	bl	c100d0c <keypad_pressed>
 c100710:	e1a03000 	mov	r3, r0
 c100714:	e3530000 	cmp	r3, #0
 c100718:	0a000021 	beq	c1007a4 <Task2+0xf8>
                state = scan;
 c10071c:	e59f30a0 	ldr	r3, [pc, #160]	; c1007c4 <Task2+0x118>
 c100720:	e3a02001 	mov	r2, #1
 c100724:	e5c32000 	strb	r2, [r3]
            break;
 c100728:	ea000020 	b	c1007b0 <Task2+0x104>
        case scan:
            scancode = keypad_scan();
 c10072c:	eb0000ed 	bl	c100ae8 <keypad_scan>
 c100730:	e1a03000 	mov	r3, r0
 c100734:	e1a02003 	mov	r2, r3
 c100738:	e59f3088 	ldr	r3, [pc, #136]	; c1007c8 <Task2+0x11c>
 c10073c:	e5c32000 	strb	r2, [r3]
            if( scancode != KEYPAD_FAILURE )
 c100740:	e59f3080 	ldr	r3, [pc, #128]	; c1007c8 <Task2+0x11c>
 c100744:	e5d33000 	ldrb	r3, [r3]
 c100748:	e35300ff 	cmp	r3, #255	; 0xff
 c10074c:	0a000008 	beq	c100774 <Task2+0xc8>
            {
                flagTask5 = TRUE;
 c100750:	e59f3074 	ldr	r3, [pc, #116]	; c1007cc <Task2+0x120>
 c100754:	e3a02001 	mov	r2, #1
 c100758:	e5c32000 	strb	r2, [r3]
                flagTask6 = TRUE;
 c10075c:	e59f306c 	ldr	r3, [pc, #108]	; c1007d0 <Task2+0x124>
 c100760:	e3a02001 	mov	r2, #1
 c100764:	e5c32000 	strb	r2, [r3]
                flagTask8 = TRUE;
 c100768:	e59f3064 	ldr	r3, [pc, #100]	; c1007d4 <Task2+0x128>
 c10076c:	e3a02001 	mov	r2, #1
 c100770:	e5c32000 	strb	r2, [r3]
            }
            state = wait_keyup;
 c100774:	e59f3048 	ldr	r3, [pc, #72]	; c1007c4 <Task2+0x118>
 c100778:	e3a02002 	mov	r2, #2
 c10077c:	e5c32000 	strb	r2, [r3]
            break;
 c100780:	ea00000a 	b	c1007b0 <Task2+0x104>
        case wait_keyup:
            if( !keypad_pressed() )
 c100784:	eb000160 	bl	c100d0c <keypad_pressed>
 c100788:	e1a03000 	mov	r3, r0
 c10078c:	e3530000 	cmp	r3, #0
 c100790:	1a000005 	bne	c1007ac <Task2+0x100>
                state = wait_keydown;
 c100794:	e59f3028 	ldr	r3, [pc, #40]	; c1007c4 <Task2+0x118>
 c100798:	e3a02000 	mov	r2, #0
 c10079c:	e5c32000 	strb	r2, [r3]
            break;
 c1007a0:	ea000002 	b	c1007b0 <Task2+0x104>
    else switch( state )
    {
        case wait_keydown:
            if( keypad_pressed() )
                state = scan;
            break;
 c1007a4:	e1a00000 	nop			; (mov r0, r0)
 c1007a8:	ea000000 	b	c1007b0 <Task2+0x104>
            state = wait_keyup;
            break;
        case wait_keyup:
            if( !keypad_pressed() )
                state = wait_keydown;
            break;
 c1007ac:	e1a00000 	nop			; (mov r0, r0)
    }
}
 c1007b0:	e24bd00c 	sub	sp, fp, #12
 c1007b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1007b8:	e12fff1e 	bx	lr
 c1007bc:	0c106e99 	.word	0x0c106e99
 c1007c0:	0c1057d8 	.word	0x0c1057d8
 c1007c4:	0c106f44 	.word	0x0c106f44
 c1007c8:	0c106f54 	.word	0x0c106f54
 c1007cc:	0c106f55 	.word	0x0c106f55
 c1007d0:	0c106f56 	.word	0x0c106f56
 c1007d4:	0c106f58 	.word	0x0c106f58

0c1007d8 <Task3>:

void Task3( void  )  /* Cada segundo (100 ticks) muestra por la UART0 la hora del RTC */
{
 c1007d8:	e1a0c00d 	mov	ip, sp
 c1007dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1007e0:	e24cb004 	sub	fp, ip, #4
 c1007e4:	e24dd008 	sub	sp, sp, #8
    static boolean init = TRUE;
    rtc_time_t rtc_time;

    if( init )
 c1007e8:	e59f307c 	ldr	r3, [pc, #124]	; c10086c <Task3+0x94>
 c1007ec:	e5d33000 	ldrb	r3, [r3]
 c1007f0:	e3530000 	cmp	r3, #0
 c1007f4:	0a000005 	beq	c100810 <Task3+0x38>
    {
        init = FALSE;
 c1007f8:	e59f306c 	ldr	r3, [pc, #108]	; c10086c <Task3+0x94>
 c1007fc:	e3a02000 	mov	r2, #0
 c100800:	e5c32000 	strb	r2, [r3]
        uart0_puts( " Task 3: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es necesario semáforo) */
 c100804:	e59f0064 	ldr	r0, [pc, #100]	; c100870 <Task3+0x98>
 c100808:	eb000fc6 	bl	c104728 <uart0_puts>
 c10080c:	ea000013 	b	c100860 <Task3+0x88>
    }
    else
    {
        rtc_gettime( &rtc_time );
 c100810:	e24b3014 	sub	r3, fp, #20
 c100814:	e1a00003 	mov	r0, r3
 c100818:	eb0008b5 	bl	c102af4 <rtc_gettime>
        uart0_puts( "  (Task 3) Hora: " );
 c10081c:	e59f0050 	ldr	r0, [pc, #80]	; c100874 <Task3+0x9c>
 c100820:	eb000fc0 	bl	c104728 <uart0_puts>
        uart0_putint( rtc_time.hour );
 c100824:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c100828:	e1a00003 	mov	r0, r3
 c10082c:	eb000fd7 	bl	c104790 <uart0_putint>
        uart0_putchar( ':' );
 c100830:	e3a0003a 	mov	r0, #58	; 0x3a
 c100834:	eb000f91 	bl	c104680 <uart0_putchar>
        uart0_putint( rtc_time.min );
 c100838:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 c10083c:	e1a00003 	mov	r0, r3
 c100840:	eb000fd2 	bl	c104790 <uart0_putint>
        uart0_putchar( ':' );
 c100844:	e3a0003a 	mov	r0, #58	; 0x3a
 c100848:	eb000f8c 	bl	c104680 <uart0_putchar>
        uart0_putint( rtc_time.sec );
 c10084c:	e55b3014 	ldrb	r3, [fp, #-20]	; 0xffffffec
 c100850:	e1a00003 	mov	r0, r3
 c100854:	eb000fcd 	bl	c104790 <uart0_putint>
        uart0_puts( "\n" );
 c100858:	e59f0018 	ldr	r0, [pc, #24]	; c100878 <Task3+0xa0>
 c10085c:	eb000fb1 	bl	c104728 <uart0_puts>
    }
}
 c100860:	e24bd00c 	sub	sp, fp, #12
 c100864:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100868:	e12fff1e 	bx	lr
 c10086c:	0c106e98 	.word	0x0c106e98
 c100870:	0c1057ec 	.word	0x0c1057ec
 c100874:	0c105800 	.word	0x0c105800
 c100878:	0c105814 	.word	0x0c105814

0c10087c <Task4>:

void Task4( void )  /* Cada 10 segundos (1000 ticks) muestra por la UART0 los ticks transcurridos */
{
 c10087c:	e1a0c00d 	mov	ip, sp
 c100880:	e92dd800 	push	{fp, ip, lr, pc}
 c100884:	e24cb004 	sub	fp, ip, #4
    static boolean init = TRUE;
    static uint32 ticks;

    if( init )
 c100888:	e59f306c 	ldr	r3, [pc, #108]	; c1008fc <Task4+0x80>
 c10088c:	e5d33000 	ldrb	r3, [r3]
 c100890:	e3530000 	cmp	r3, #0
 c100894:	0a000008 	beq	c1008bc <Task4+0x40>
    {
        init = FALSE;
 c100898:	e59f305c 	ldr	r3, [pc, #92]	; c1008fc <Task4+0x80>
 c10089c:	e3a02000 	mov	r2, #0
 c1008a0:	e5c32000 	strb	r2, [r3]
        uart0_puts( " Task 4: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es necesario semáforo) */
 c1008a4:	e59f0054 	ldr	r0, [pc, #84]	; c100900 <Task4+0x84>
 c1008a8:	eb000f9e 	bl	c104728 <uart0_puts>
        ticks = 0;
 c1008ac:	e59f3050 	ldr	r3, [pc, #80]	; c100904 <Task4+0x88>
 c1008b0:	e3a02000 	mov	r2, #0
 c1008b4:	e5832000 	str	r2, [r3]
 c1008b8:	ea00000c 	b	c1008f0 <Task4+0x74>
    }
    else
    {
        ticks += TICKS_PER_SEC * 10;
 c1008bc:	e59f3040 	ldr	r3, [pc, #64]	; c100904 <Task4+0x88>
 c1008c0:	e5933000 	ldr	r3, [r3]
 c1008c4:	e2832ffa 	add	r2, r3, #1000	; 0x3e8
 c1008c8:	e59f3034 	ldr	r3, [pc, #52]	; c100904 <Task4+0x88>
 c1008cc:	e5832000 	str	r2, [r3]
        uart0_puts( "  (Task 4) Ticks: " );
 c1008d0:	e59f0030 	ldr	r0, [pc, #48]	; c100908 <Task4+0x8c>
 c1008d4:	eb000f93 	bl	c104728 <uart0_puts>
        uart0_putint( ticks );
 c1008d8:	e59f3024 	ldr	r3, [pc, #36]	; c100904 <Task4+0x88>
 c1008dc:	e5933000 	ldr	r3, [r3]
 c1008e0:	e1a00003 	mov	r0, r3
 c1008e4:	eb000fa9 	bl	c104790 <uart0_putint>
        uart0_puts( "\n" );
 c1008e8:	e59f001c 	ldr	r0, [pc, #28]	; c10090c <Task4+0x90>
 c1008ec:	eb000f8d 	bl	c104728 <uart0_puts>
    }
}
 c1008f0:	e24bd00c 	sub	sp, fp, #12
 c1008f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1008f8:	e12fff1e 	bx	lr
 c1008fc:	0c106e97 	.word	0x0c106e97
 c100900:	0c105818 	.word	0x0c105818
 c100904:	0c106f40 	.word	0x0c106f40
 c100908:	0c10582c 	.word	0x0c10582c
 c10090c:	0c105814 	.word	0x0c105814

0c100910 <Task5>:

void Task5( void )  /* Cada vez que reciba un scancode lo muestra por la UART0 */
{
 c100910:	e1a0c00d 	mov	ip, sp
 c100914:	e92dd800 	push	{fp, ip, lr, pc}
 c100918:	e24cb004 	sub	fp, ip, #4
    static boolean init = TRUE;

    if( init )
 c10091c:	e59f3068 	ldr	r3, [pc, #104]	; c10098c <Task5+0x7c>
 c100920:	e5d33000 	ldrb	r3, [r3]
 c100924:	e3530000 	cmp	r3, #0
 c100928:	0a000005 	beq	c100944 <Task5+0x34>
    {
        init = FALSE;
 c10092c:	e59f3058 	ldr	r3, [pc, #88]	; c10098c <Task5+0x7c>
 c100930:	e3a02000 	mov	r2, #0
 c100934:	e5c32000 	strb	r2, [r3]
        uart0_puts( " Task 5: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es necesario semáforo) */
 c100938:	e59f0050 	ldr	r0, [pc, #80]	; c100990 <Task5+0x80>
 c10093c:	eb000f79 	bl	c104728 <uart0_puts>
 c100940:	ea00000e 	b	c100980 <Task5+0x70>
    }
    else if( flagTask5 )
 c100944:	e59f3048 	ldr	r3, [pc, #72]	; c100994 <Task5+0x84>
 c100948:	e5d33000 	ldrb	r3, [r3]
 c10094c:	e3530000 	cmp	r3, #0
 c100950:	0a00000a 	beq	c100980 <Task5+0x70>
    {
        flagTask5 = FALSE;
 c100954:	e59f3038 	ldr	r3, [pc, #56]	; c100994 <Task5+0x84>
 c100958:	e3a02000 	mov	r2, #0
 c10095c:	e5c32000 	strb	r2, [r3]
        uart0_puts( "  (Task 5) Tecla pulsada: " );
 c100960:	e59f0030 	ldr	r0, [pc, #48]	; c100998 <Task5+0x88>
 c100964:	eb000f6f 	bl	c104728 <uart0_puts>
        uart0_puthex( scancode );
 c100968:	e59f302c 	ldr	r3, [pc, #44]	; c10099c <Task5+0x8c>
 c10096c:	e5d33000 	ldrb	r3, [r3]
 c100970:	e1a00003 	mov	r0, r3
 c100974:	eb000fc9 	bl	c1048a0 <uart0_puthex>
        uart0_puts( "\n" );
 c100978:	e59f0020 	ldr	r0, [pc, #32]	; c1009a0 <Task5+0x90>
 c10097c:	eb000f69 	bl	c104728 <uart0_puts>
    }
}
 c100980:	e24bd00c 	sub	sp, fp, #12
 c100984:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100988:	e12fff1e 	bx	lr
 c10098c:	0c106e96 	.word	0x0c106e96
 c100990:	0c105840 	.word	0x0c105840
 c100994:	0c106f55 	.word	0x0c106f55
 c100998:	0c105854 	.word	0x0c105854
 c10099c:	0c106f54 	.word	0x0c106f54
 c1009a0:	0c105814 	.word	0x0c105814

0c1009a4 <Task6>:

void Task6( void )  /* Cada vez que reciba un scancode lo muestra por los 7 segmentos */
{
 c1009a4:	e1a0c00d 	mov	ip, sp
 c1009a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1009ac:	e24cb004 	sub	fp, ip, #4
    static boolean init = TRUE;

    if( init )
 c1009b0:	e59f3058 	ldr	r3, [pc, #88]	; c100a10 <Task6+0x6c>
 c1009b4:	e5d33000 	ldrb	r3, [r3]
 c1009b8:	e3530000 	cmp	r3, #0
 c1009bc:	0a000005 	beq	c1009d8 <Task6+0x34>
    {
        init = FALSE;
 c1009c0:	e59f3048 	ldr	r3, [pc, #72]	; c100a10 <Task6+0x6c>
 c1009c4:	e3a02000 	mov	r2, #0
 c1009c8:	e5c32000 	strb	r2, [r3]
        uart0_puts( " Task 6: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es necesario semáforo) */
 c1009cc:	e59f0040 	ldr	r0, [pc, #64]	; c100a14 <Task6+0x70>
 c1009d0:	eb000f54 	bl	c104728 <uart0_puts>
 c1009d4:	ea00000a 	b	c100a04 <Task6+0x60>
    }
    else if( flagTask6 )
 c1009d8:	e59f3038 	ldr	r3, [pc, #56]	; c100a18 <Task6+0x74>
 c1009dc:	e5d33000 	ldrb	r3, [r3]
 c1009e0:	e3530000 	cmp	r3, #0
 c1009e4:	0a000006 	beq	c100a04 <Task6+0x60>
    {
        flagTask6 = FALSE;
 c1009e8:	e59f3028 	ldr	r3, [pc, #40]	; c100a18 <Task6+0x74>
 c1009ec:	e3a02000 	mov	r2, #0
 c1009f0:	e5c32000 	strb	r2, [r3]
        segs_putchar( scancode );
 c1009f4:	e59f3020 	ldr	r3, [pc, #32]	; c100a1c <Task6+0x78>
 c1009f8:	e5d33000 	ldrb	r3, [r3]
 c1009fc:	e1a00003 	mov	r0, r3
 c100a00:	eb000912 	bl	c102e50 <segs_putchar>
    }
}
 c100a04:	e24bd00c 	sub	sp, fp, #12
 c100a08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a0c:	e12fff1e 	bx	lr
 c100a10:	0c106e95 	.word	0x0c106e95
 c100a14:	0c105870 	.word	0x0c105870
 c100a18:	0c106f56 	.word	0x0c106f56
 c100a1c:	0c106f54 	.word	0x0c106f54

0c100a20 <Task7>:

void Task7( void )  /* Cada vez que se presione un pulsador lo avisa por la UART0 */
{
 c100a20:	e1a0c00d 	mov	ip, sp
 c100a24:	e92dd800 	push	{fp, ip, lr, pc}
 c100a28:	e24cb004 	sub	fp, ip, #4
    static boolean init = TRUE;

    if( init )
 c100a2c:	e59f3054 	ldr	r3, [pc, #84]	; c100a88 <Task7+0x68>
 c100a30:	e5d33000 	ldrb	r3, [r3]
 c100a34:	e3530000 	cmp	r3, #0
 c100a38:	0a000005 	beq	c100a54 <Task7+0x34>
    {
        init = FALSE;
 c100a3c:	e59f3044 	ldr	r3, [pc, #68]	; c100a88 <Task7+0x68>
 c100a40:	e3a02000 	mov	r2, #0
 c100a44:	e5c32000 	strb	r2, [r3]
        uart0_puts( " Task 7: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es necesario semáforo) */
 c100a48:	e59f003c 	ldr	r0, [pc, #60]	; c100a8c <Task7+0x6c>
 c100a4c:	eb000f35 	bl	c104728 <uart0_puts>
 c100a50:	ea000009 	b	c100a7c <Task7+0x5c>
    }
    else if( flagPb )
 c100a54:	e59f3034 	ldr	r3, [pc, #52]	; c100a90 <Task7+0x70>
 c100a58:	e5d33000 	ldrb	r3, [r3]
 c100a5c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100a60:	e3530000 	cmp	r3, #0
 c100a64:	0a000004 	beq	c100a7c <Task7+0x5c>
    {   
        flagPb = FALSE;
 c100a68:	e59f3020 	ldr	r3, [pc, #32]	; c100a90 <Task7+0x70>
 c100a6c:	e3a02000 	mov	r2, #0
 c100a70:	e5c32000 	strb	r2, [r3]
        uart0_puts( "  (Task 7) Se ha pulsado algún pushbutton...\n" );
 c100a74:	e59f0018 	ldr	r0, [pc, #24]	; c100a94 <Task7+0x74>
 c100a78:	eb000f2a 	bl	c104728 <uart0_puts>
    }
}
 c100a7c:	e24bd00c 	sub	sp, fp, #12
 c100a80:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a84:	e12fff1e 	bx	lr
 c100a88:	0c106e94 	.word	0x0c106e94
 c100a8c:	0c105884 	.word	0x0c105884
 c100a90:	0c106f57 	.word	0x0c106f57
 c100a94:	0c105898 	.word	0x0c105898

0c100a98 <isr_pb>:

/*******************************************************************/


void isr_pb( void )
{
 c100a98:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100a9c:	e1a0c00d 	mov	ip, sp
 c100aa0:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c100aa4:	e24cb004 	sub	fp, ip, #4
    flagPb = TRUE;
 c100aa8:	e59f302c 	ldr	r3, [pc, #44]	; c100adc <isr_pb+0x44>
 c100aac:	e3a02001 	mov	r2, #1
 c100ab0:	e5c32000 	strb	r2, [r3]
    EXTINTPND = BIT_RIGHTPB | BIT_LEFTPB;
 c100ab4:	e59f3024 	ldr	r3, [pc, #36]	; c100ae0 <isr_pb+0x48>
 c100ab8:	e3a0200c 	mov	r2, #12
 c100abc:	e5832000 	str	r2, [r3]
    I_ISPC = BIT_PB;
 c100ac0:	e59f301c 	ldr	r3, [pc, #28]	; c100ae4 <isr_pb+0x4c>
 c100ac4:	e3a02602 	mov	r2, #2097152	; 0x200000
 c100ac8:	e5832000 	str	r2, [r3]
}
 c100acc:	e24bd014 	sub	sp, fp, #20
 c100ad0:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c100ad4:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c100ad8:	e25ef004 	subs	pc, lr, #4
 c100adc:	0c106f57 	.word	0x0c106f57
 c100ae0:	01d20054 	.word	0x01d20054
 c100ae4:	01e00024 	.word	0x01e00024

0c100ae8 <keypad_scan>:
#include <keypad.h>

extern void isr_KEYPAD_dummy( void );

uint8 keypad_scan( void )
{
 c100ae8:	e1a0c00d 	mov	ip, sp
 c100aec:	e92dd800 	push	{fp, ip, lr, pc}
 c100af0:	e24cb004 	sub	fp, ip, #4
 c100af4:	e24dd008 	sub	sp, sp, #8
    uint8 aux;

    aux = *( KEYPAD_ADDR + 0x1c );//fila 1
 c100af8:	e59f31fc 	ldr	r3, [pc, #508]	; c100cfc <keypad_scan+0x214>
 c100afc:	e5d33000 	ldrb	r3, [r3]
 c100b00:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c100b04:	e55b300d 	ldrb	r3, [fp, #-13]
 c100b08:	e203300f 	and	r3, r3, #15
 c100b0c:	e353000f 	cmp	r3, #15
 c100b10:	0a000017 	beq	c100b74 <keypad_scan+0x8c>
    {
        if( (aux & 0x8) == 0 )
 c100b14:	e55b300d 	ldrb	r3, [fp, #-13]
 c100b18:	e2033008 	and	r3, r3, #8
 c100b1c:	e3530000 	cmp	r3, #0
 c100b20:	1a000001 	bne	c100b2c <keypad_scan+0x44>
            return KEYPAD_KEY0;
 c100b24:	e3a03000 	mov	r3, #0
 c100b28:	ea00006f 	b	c100cec <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )
 c100b2c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100b30:	e2033004 	and	r3, r3, #4
 c100b34:	e3530000 	cmp	r3, #0
 c100b38:	1a000001 	bne	c100b44 <keypad_scan+0x5c>
            return KEYPAD_KEY1;
 c100b3c:	e3a03001 	mov	r3, #1
 c100b40:	ea000069 	b	c100cec <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c100b44:	e55b300d 	ldrb	r3, [fp, #-13]
 c100b48:	e2033002 	and	r3, r3, #2
 c100b4c:	e3530000 	cmp	r3, #0
 c100b50:	1a000001 	bne	c100b5c <keypad_scan+0x74>
            return KEYPAD_KEY2;
 c100b54:	e3a03002 	mov	r3, #2
 c100b58:	ea000063 	b	c100cec <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c100b5c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100b60:	e2033001 	and	r3, r3, #1
 c100b64:	e3530000 	cmp	r3, #0
 c100b68:	1a000001 	bne	c100b74 <keypad_scan+0x8c>
            return KEYPAD_KEY3;
 c100b6c:	e3a03003 	mov	r3, #3
 c100b70:	ea00005d 	b	c100cec <keypad_scan+0x204>
    }
	aux = *( KEYPAD_ADDR + 0x1a );//fila 2
 c100b74:	e59f3184 	ldr	r3, [pc, #388]	; c100d00 <keypad_scan+0x218>
 c100b78:	e5d33000 	ldrb	r3, [r3]
 c100b7c:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c100b80:	e55b300d 	ldrb	r3, [fp, #-13]
 c100b84:	e203300f 	and	r3, r3, #15
 c100b88:	e353000f 	cmp	r3, #15
 c100b8c:	0a000017 	beq	c100bf0 <keypad_scan+0x108>
	{
		if( (aux & 0x8) == 0 )
 c100b90:	e55b300d 	ldrb	r3, [fp, #-13]
 c100b94:	e2033008 	and	r3, r3, #8
 c100b98:	e3530000 	cmp	r3, #0
 c100b9c:	1a000001 	bne	c100ba8 <keypad_scan+0xc0>
			return KEYPAD_KEY4;
 c100ba0:	e3a03004 	mov	r3, #4
 c100ba4:	ea000050 	b	c100cec <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c100ba8:	e55b300d 	ldrb	r3, [fp, #-13]
 c100bac:	e2033004 	and	r3, r3, #4
 c100bb0:	e3530000 	cmp	r3, #0
 c100bb4:	1a000001 	bne	c100bc0 <keypad_scan+0xd8>
			return KEYPAD_KEY5;
 c100bb8:	e3a03005 	mov	r3, #5
 c100bbc:	ea00004a 	b	c100cec <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c100bc0:	e55b300d 	ldrb	r3, [fp, #-13]
 c100bc4:	e2033002 	and	r3, r3, #2
 c100bc8:	e3530000 	cmp	r3, #0
 c100bcc:	1a000001 	bne	c100bd8 <keypad_scan+0xf0>
			return KEYPAD_KEY6;
 c100bd0:	e3a03006 	mov	r3, #6
 c100bd4:	ea000044 	b	c100cec <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c100bd8:	e55b300d 	ldrb	r3, [fp, #-13]
 c100bdc:	e2033001 	and	r3, r3, #1
 c100be0:	e3530000 	cmp	r3, #0
 c100be4:	1a000001 	bne	c100bf0 <keypad_scan+0x108>
			return KEYPAD_KEY7;
 c100be8:	e3a03007 	mov	r3, #7
 c100bec:	ea00003e 	b	c100cec <keypad_scan+0x204>
	}

    aux = *( KEYPAD_ADDR + 0x16 );//fila 3
 c100bf0:	e59f310c 	ldr	r3, [pc, #268]	; c100d04 <keypad_scan+0x21c>
 c100bf4:	e5d33000 	ldrb	r3, [r3]
 c100bf8:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c100bfc:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c00:	e203300f 	and	r3, r3, #15
 c100c04:	e353000f 	cmp	r3, #15
 c100c08:	0a000017 	beq	c100c6c <keypad_scan+0x184>
    {
        if( (aux & 0x8) == 0 )
 c100c0c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c10:	e2033008 	and	r3, r3, #8
 c100c14:	e3530000 	cmp	r3, #0
 c100c18:	1a000001 	bne	c100c24 <keypad_scan+0x13c>
            return KEYPAD_KEY8;
 c100c1c:	e3a03008 	mov	r3, #8
 c100c20:	ea000031 	b	c100cec <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )
 c100c24:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c28:	e2033004 	and	r3, r3, #4
 c100c2c:	e3530000 	cmp	r3, #0
 c100c30:	1a000001 	bne	c100c3c <keypad_scan+0x154>
            return KEYPAD_KEY9;
 c100c34:	e3a03009 	mov	r3, #9
 c100c38:	ea00002b 	b	c100cec <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c100c3c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c40:	e2033002 	and	r3, r3, #2
 c100c44:	e3530000 	cmp	r3, #0
 c100c48:	1a000001 	bne	c100c54 <keypad_scan+0x16c>
            return KEYPAD_KEYA;
 c100c4c:	e3a0300a 	mov	r3, #10
 c100c50:	ea000025 	b	c100cec <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c100c54:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c58:	e2033001 	and	r3, r3, #1
 c100c5c:	e3530000 	cmp	r3, #0
 c100c60:	1a000001 	bne	c100c6c <keypad_scan+0x184>
            return KEYPAD_KEYB;
 c100c64:	e3a0300b 	mov	r3, #11
 c100c68:	ea00001f 	b	c100cec <keypad_scan+0x204>
    }
	aux = *( KEYPAD_ADDR + 0xe );//fila 4
 c100c6c:	e59f3094 	ldr	r3, [pc, #148]	; c100d08 <keypad_scan+0x220>
 c100c70:	e5d33000 	ldrb	r3, [r3]
 c100c74:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c100c78:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c7c:	e203300f 	and	r3, r3, #15
 c100c80:	e353000f 	cmp	r3, #15
 c100c84:	0a000017 	beq	c100ce8 <keypad_scan+0x200>
	{
		if( (aux & 0x8) == 0 )
 c100c88:	e55b300d 	ldrb	r3, [fp, #-13]
 c100c8c:	e2033008 	and	r3, r3, #8
 c100c90:	e3530000 	cmp	r3, #0
 c100c94:	1a000001 	bne	c100ca0 <keypad_scan+0x1b8>
			return KEYPAD_KEYC;
 c100c98:	e3a0300c 	mov	r3, #12
 c100c9c:	ea000012 	b	c100cec <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c100ca0:	e55b300d 	ldrb	r3, [fp, #-13]
 c100ca4:	e2033004 	and	r3, r3, #4
 c100ca8:	e3530000 	cmp	r3, #0
 c100cac:	1a000001 	bne	c100cb8 <keypad_scan+0x1d0>
			return KEYPAD_KEYD;
 c100cb0:	e3a0300d 	mov	r3, #13
 c100cb4:	ea00000c 	b	c100cec <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c100cb8:	e55b300d 	ldrb	r3, [fp, #-13]
 c100cbc:	e2033002 	and	r3, r3, #2
 c100cc0:	e3530000 	cmp	r3, #0
 c100cc4:	1a000001 	bne	c100cd0 <keypad_scan+0x1e8>
			return KEYPAD_KEYE;
 c100cc8:	e3a0300e 	mov	r3, #14
 c100ccc:	ea000006 	b	c100cec <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c100cd0:	e55b300d 	ldrb	r3, [fp, #-13]
 c100cd4:	e2033001 	and	r3, r3, #1
 c100cd8:	e3530000 	cmp	r3, #0
 c100cdc:	1a000001 	bne	c100ce8 <keypad_scan+0x200>
			return KEYPAD_KEYF;
 c100ce0:	e3a0300f 	mov	r3, #15
 c100ce4:	ea000000 	b	c100cec <keypad_scan+0x204>
	}

    return KEYPAD_FAILURE;
 c100ce8:	e3a030ff 	mov	r3, #255	; 0xff
}
 c100cec:	e1a00003 	mov	r0, r3
 c100cf0:	e24bd00c 	sub	sp, fp, #12
 c100cf4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100cf8:	e12fff1e 	bx	lr
 c100cfc:	0600001c 	.word	0x0600001c
 c100d00:	0600001a 	.word	0x0600001a
 c100d04:	06000016 	.word	0x06000016
 c100d08:	0600000e 	.word	0x0600000e

0c100d0c <keypad_pressed>:

uint8 keypad_pressed( void )
{
 c100d0c:	e1a0c00d 	mov	ip, sp
 c100d10:	e92dd800 	push	{fp, ip, lr, pc}
 c100d14:	e24cb004 	sub	fp, ip, #4
    if(keypad_scan()==KEYPAD_FAILURE)
 c100d18:	ebffff72 	bl	c100ae8 <keypad_scan>
 c100d1c:	e1a03000 	mov	r3, r0
 c100d20:	e35300ff 	cmp	r3, #255	; 0xff
 c100d24:	1a000001 	bne	c100d30 <keypad_pressed+0x24>
    	return 0;
 c100d28:	e3a03000 	mov	r3, #0
 c100d2c:	ea000000 	b	c100d34 <keypad_pressed+0x28>
    return 1;
 c100d30:	e3a03001 	mov	r3, #1
}
 c100d34:	e1a00003 	mov	r0, r3
 c100d38:	e24bd00c 	sub	sp, fp, #12
 c100d3c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d40:	e12fff1e 	bx	lr

0c100d44 <keypad_open>:

void keypad_open( void (*isr)(void) )
{
 c100d44:	e1a0c00d 	mov	ip, sp
 c100d48:	e92dd800 	push	{fp, ip, lr, pc}
 c100d4c:	e24cb004 	sub	fp, ip, #4
 c100d50:	e24dd008 	sub	sp, sp, #8
 c100d54:	e50b0010 	str	r0, [fp, #-16]
    pISR_KEYPAD = (uint32)isr;
 c100d58:	e59f3030 	ldr	r3, [pc, #48]	; c100d90 <keypad_open+0x4c>
 c100d5c:	e51b2010 	ldr	r2, [fp, #-16]
 c100d60:	e5832000 	str	r2, [r3]
    I_ISPC = BIT_KEYPAD;
 c100d64:	e59f3028 	ldr	r3, [pc, #40]	; c100d94 <keypad_open+0x50>
 c100d68:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c100d6c:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_GLOBAL | BIT_KEYPAD);
 c100d70:	e59f3020 	ldr	r3, [pc, #32]	; c100d98 <keypad_open+0x54>
 c100d74:	e59f201c 	ldr	r2, [pc, #28]	; c100d98 <keypad_open+0x54>
 c100d78:	e5922000 	ldr	r2, [r2]
 c100d7c:	e3c22405 	bic	r2, r2, #83886080	; 0x5000000
 c100d80:	e5832000 	str	r2, [r3]
}
 c100d84:	e24bd00c 	sub	sp, fp, #12
 c100d88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d8c:	e12fff1e 	bx	lr
 c100d90:	0c7fff80 	.word	0x0c7fff80
 c100d94:	01e00024 	.word	0x01e00024
 c100d98:	01e0000c 	.word	0x01e0000c

0c100d9c <keypad_close>:

void keypad_close( void )
{
 c100d9c:	e1a0c00d 	mov	ip, sp
 c100da0:	e92dd800 	push	{fp, ip, lr, pc}
 c100da4:	e24cb004 	sub	fp, ip, #4
    INTMSK |= BIT_KEYPAD;
 c100da8:	e59f3024 	ldr	r3, [pc, #36]	; c100dd4 <keypad_close+0x38>
 c100dac:	e59f2020 	ldr	r2, [pc, #32]	; c100dd4 <keypad_close+0x38>
 c100db0:	e5922000 	ldr	r2, [r2]
 c100db4:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
 c100db8:	e5832000 	str	r2, [r3]
    pISR_KEYPAD = (uint32) isr_KEYPAD_dummy;
 c100dbc:	e59f3014 	ldr	r3, [pc, #20]	; c100dd8 <keypad_close+0x3c>
 c100dc0:	e59f2014 	ldr	r2, [pc, #20]	; c100ddc <keypad_close+0x40>
 c100dc4:	e5832000 	str	r2, [r3]
}
 c100dc8:	e24bd00c 	sub	sp, fp, #12
 c100dcc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100dd0:	e12fff1e 	bx	lr
 c100dd4:	01e0000c 	.word	0x01e0000c
 c100dd8:	0c7fff80 	.word	0x0c7fff80
 c100ddc:	0c103908 	.word	0x0c103908

0c100de0 <keypad_init>:

#if KEYPAD_IO_METHOD == POOLING


void keypad_init( void )
{
 c100de0:	e1a0c00d 	mov	ip, sp
 c100de4:	e92dd800 	push	{fp, ip, lr, pc}
 c100de8:	e24cb004 	sub	fp, ip, #4
    timers_init();  
 c100dec:	eb000b76 	bl	c103bcc <timers_init>
};
 c100df0:	e24bd00c 	sub	sp, fp, #12
 c100df4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100df8:	e12fff1e 	bx	lr

0c100dfc <keypad_getchar>:

uint8 keypad_getchar( void ){
 c100dfc:	e1a0c00d 	mov	ip, sp
 c100e00:	e92dd800 	push	{fp, ip, lr, pc}
 c100e04:	e24cb004 	sub	fp, ip, #4
 c100e08:	e24dd008 	sub	sp, sp, #8
	uint8 s;
    while(PDATG & (1<<1));
 c100e0c:	e1a00000 	nop			; (mov r0, r0)
 c100e10:	e59f3054 	ldr	r3, [pc, #84]	; c100e6c <keypad_getchar+0x70>
 c100e14:	e5933000 	ldr	r3, [r3]
 c100e18:	e2033002 	and	r3, r3, #2
 c100e1c:	e3530000 	cmp	r3, #0
 c100e20:	1afffffa 	bne	c100e10 <keypad_getchar+0x14>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c100e24:	e3a0001e 	mov	r0, #30
 c100e28:	eb000c16 	bl	c103e88 <sw_delay_ms>
    s = keypad_scan();
 c100e2c:	ebffff2d 	bl	c100ae8 <keypad_scan>
 c100e30:	e1a03000 	mov	r3, r0
 c100e34:	e54b300d 	strb	r3, [fp, #-13]
    while(!(PDATG & (1<<1)));
 c100e38:	e1a00000 	nop			; (mov r0, r0)
 c100e3c:	e59f3028 	ldr	r3, [pc, #40]	; c100e6c <keypad_getchar+0x70>
 c100e40:	e5933000 	ldr	r3, [r3]
 c100e44:	e2033002 	and	r3, r3, #2
 c100e48:	e3530000 	cmp	r3, #0
 c100e4c:	0afffffa 	beq	c100e3c <keypad_getchar+0x40>
    sw_delay_ms(KEYPAD_KEYUP_DELAY);
 c100e50:	e3a00064 	mov	r0, #100	; 0x64
 c100e54:	eb000c0b 	bl	c103e88 <sw_delay_ms>
    return s;
 c100e58:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c100e5c:	e1a00003 	mov	r0, r3
 c100e60:	e24bd00c 	sub	sp, fp, #12
 c100e64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e68:	e12fff1e 	bx	lr
 c100e6c:	01d20044 	.word	0x01d20044

0c100e70 <keypad_getchartime>:

uint8 keypad_getchartime( uint16 *ms ){
 c100e70:	e1a0c00d 	mov	ip, sp
 c100e74:	e92dd800 	push	{fp, ip, lr, pc}
 c100e78:	e24cb004 	sub	fp, ip, #4
 c100e7c:	e24dd010 	sub	sp, sp, #16
 c100e80:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8 scancode;

    while(PDATG & (1<<1));
 c100e84:	e1a00000 	nop			; (mov r0, r0)
 c100e88:	e59f3080 	ldr	r3, [pc, #128]	; c100f10 <keypad_getchartime+0xa0>
 c100e8c:	e5933000 	ldr	r3, [r3]
 c100e90:	e2033002 	and	r3, r3, #2
 c100e94:	e3530000 	cmp	r3, #0
 c100e98:	1afffffa 	bne	c100e88 <keypad_getchartime+0x18>
    timer3_start();
 c100e9c:	eb000c67 	bl	c104040 <timer3_start>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c100ea0:	e3a0001e 	mov	r0, #30
 c100ea4:	eb000bf7 	bl	c103e88 <sw_delay_ms>

    scancode = keypad_scan();
 c100ea8:	ebffff0e 	bl	c100ae8 <keypad_scan>
 c100eac:	e1a03000 	mov	r3, r0
 c100eb0:	e54b300d 	strb	r3, [fp, #-13]

    while(!(PDATG & (1<<1)));
 c100eb4:	e1a00000 	nop			; (mov r0, r0)
 c100eb8:	e59f3050 	ldr	r3, [pc, #80]	; c100f10 <keypad_getchartime+0xa0>
 c100ebc:	e5933000 	ldr	r3, [r3]
 c100ec0:	e2033002 	and	r3, r3, #2
 c100ec4:	e3530000 	cmp	r3, #0
 c100ec8:	0afffffa 	beq	c100eb8 <keypad_getchartime+0x48>
    *ms = timer3_stop() / 10;
 c100ecc:	eb000c87 	bl	c1040f0 <timer3_stop>
 c100ed0:	e1a03000 	mov	r3, r0
 c100ed4:	e1a02003 	mov	r2, r3
 c100ed8:	e59f3034 	ldr	r3, [pc, #52]	; c100f14 <keypad_getchartime+0xa4>
 c100edc:	e0831392 	umull	r1, r3, r2, r3
 c100ee0:	e1a031a3 	lsr	r3, r3, #3
 c100ee4:	e1a03803 	lsl	r3, r3, #16
 c100ee8:	e1a02823 	lsr	r2, r3, #16
 c100eec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100ef0:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c100ef4:	e3a00064 	mov	r0, #100	; 0x64
 c100ef8:	eb000be2 	bl	c103e88 <sw_delay_ms>

    return scancode;
 c100efc:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c100f00:	e1a00003 	mov	r0, r3
 c100f04:	e24bd00c 	sub	sp, fp, #12
 c100f08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100f0c:	e12fff1e 	bx	lr
 c100f10:	01d20044 	.word	0x01d20044
 c100f14:	cccccccd 	.word	0xcccccccd

0c100f18 <keypad_timeout_getchar>:

uint8 keypad_timeout_getchar( uint16 ms ){//TODO
 c100f18:	e1a0c00d 	mov	ip, sp
 c100f1c:	e92dd800 	push	{fp, ip, lr, pc}
 c100f20:	e24cb004 	sub	fp, ip, #4
 c100f24:	e24dd010 	sub	sp, sp, #16
 c100f28:	e1a03000 	mov	r3, r0
 c100f2c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 s;
	timer3_start_timeout(ms*10);
 c100f30:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100f34:	e1a02003 	mov	r2, r3
 c100f38:	e1a02102 	lsl	r2, r2, #2
 c100f3c:	e0823003 	add	r3, r2, r3
 c100f40:	e1a03083 	lsl	r3, r3, #1
 c100f44:	e1a03803 	lsl	r3, r3, #16
 c100f48:	e1a03823 	lsr	r3, r3, #16
 c100f4c:	e1a00003 	mov	r0, r3
 c100f50:	eb000c7b 	bl	c104144 <timer3_start_timeout>

	while(!keypad_pressed())
 c100f54:	ea000005 	b	c100f70 <keypad_timeout_getchar+0x58>
		if(timer3_timeout())
 c100f58:	eb000ca7 	bl	c1041fc <timer3_timeout>
 c100f5c:	e1a03000 	mov	r3, r0
 c100f60:	e3530000 	cmp	r3, #0
 c100f64:	0a000001 	beq	c100f70 <keypad_timeout_getchar+0x58>
			return KEYPAD_TIMEOUT;
 c100f68:	e3a030fe 	mov	r3, #254	; 0xfe
 c100f6c:	ea000018 	b	c100fd4 <keypad_timeout_getchar+0xbc>

uint8 keypad_timeout_getchar( uint16 ms ){//TODO
	uint8 s;
	timer3_start_timeout(ms*10);

	while(!keypad_pressed())
 c100f70:	ebffff65 	bl	c100d0c <keypad_pressed>
 c100f74:	e1a03000 	mov	r3, r0
 c100f78:	e3530000 	cmp	r3, #0
 c100f7c:	0afffff5 	beq	c100f58 <keypad_timeout_getchar+0x40>
		if(timer3_timeout())
			return KEYPAD_TIMEOUT;

    while(PDATG & (1<<1));
 c100f80:	e1a00000 	nop			; (mov r0, r0)
 c100f84:	e59f3058 	ldr	r3, [pc, #88]	; c100fe4 <keypad_timeout_getchar+0xcc>
 c100f88:	e5933000 	ldr	r3, [r3]
 c100f8c:	e2033002 	and	r3, r3, #2
 c100f90:	e3530000 	cmp	r3, #0
 c100f94:	1afffffa 	bne	c100f84 <keypad_timeout_getchar+0x6c>
	timer3_start();
 c100f98:	eb000c28 	bl	c104040 <timer3_start>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c100f9c:	e3a0001e 	mov	r0, #30
 c100fa0:	eb000bb8 	bl	c103e88 <sw_delay_ms>

	s = keypad_scan();
 c100fa4:	ebfffecf 	bl	c100ae8 <keypad_scan>
 c100fa8:	e1a03000 	mov	r3, r0
 c100fac:	e54b300d 	strb	r3, [fp, #-13]

    while(!(PDATG & (1<<1)));
 c100fb0:	e1a00000 	nop			; (mov r0, r0)
 c100fb4:	e59f3028 	ldr	r3, [pc, #40]	; c100fe4 <keypad_timeout_getchar+0xcc>
 c100fb8:	e5933000 	ldr	r3, [r3]
 c100fbc:	e2033002 	and	r3, r3, #2
 c100fc0:	e3530000 	cmp	r3, #0
 c100fc4:	0afffffa 	beq	c100fb4 <keypad_timeout_getchar+0x9c>
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c100fc8:	e3a00064 	mov	r0, #100	; 0x64
 c100fcc:	eb000bad 	bl	c103e88 <sw_delay_ms>
	return s;
 c100fd0:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c100fd4:	e1a00003 	mov	r0, r3
 c100fd8:	e24bd00c 	sub	sp, fp, #12
 c100fdc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100fe0:	e12fff1e 	bx	lr
 c100fe4:	01d20044 	.word	0x01d20044

0c100fe8 <lcd_init>:
uint8 lcd_buffer[LCD_BUFFER_SIZE];

static uint8 state;

void lcd_init( void )
{      
 c100fe8:	e1a0c00d 	mov	ip, sp
 c100fec:	e92dd800 	push	{fp, ip, lr, pc}
 c100ff0:	e24cb004 	sub	fp, ip, #4
    DITHMODE = 0x12210;
 c100ff4:	e59f30fc 	ldr	r3, [pc, #252]	; c1010f8 <lcd_init+0x110>
 c100ff8:	e59f20fc 	ldr	r2, [pc, #252]	; c1010fc <lcd_init+0x114>
 c100ffc:	e5832000 	str	r2, [r3]
    DP1_2 = 0xA5A5;
 c101000:	e59f30f8 	ldr	r3, [pc, #248]	; c101100 <lcd_init+0x118>
 c101004:	e59f20f8 	ldr	r2, [pc, #248]	; c101104 <lcd_init+0x11c>
 c101008:	e5832000 	str	r2, [r3]
    DP4_7 = 0xBA5DA65;
 c10100c:	e59f30f4 	ldr	r3, [pc, #244]	; c101108 <lcd_init+0x120>
 c101010:	e59f20f4 	ldr	r2, [pc, #244]	; c10110c <lcd_init+0x124>
 c101014:	e5832000 	str	r2, [r3]
    DP3_5 = 0xA5A5F;
 c101018:	e59f30f0 	ldr	r3, [pc, #240]	; c101110 <lcd_init+0x128>
 c10101c:	e59f20f0 	ldr	r2, [pc, #240]	; c101114 <lcd_init+0x12c>
 c101020:	e5832000 	str	r2, [r3]
    DP2_3 = 0xD6B;
 c101024:	e59f30ec 	ldr	r3, [pc, #236]	; c101118 <lcd_init+0x130>
 c101028:	e59f20ec 	ldr	r2, [pc, #236]	; c10111c <lcd_init+0x134>
 c10102c:	e5832000 	str	r2, [r3]
    DP5_7 = 0xEB7B5ED;
 c101030:	e59f30e8 	ldr	r3, [pc, #232]	; c101120 <lcd_init+0x138>
 c101034:	e59f20e8 	ldr	r2, [pc, #232]	; c101124 <lcd_init+0x13c>
 c101038:	e5832000 	str	r2, [r3]
    DP3_4 = 0x7DBE;
 c10103c:	e59f30e4 	ldr	r3, [pc, #228]	; c101128 <lcd_init+0x140>
 c101040:	e59f20e4 	ldr	r2, [pc, #228]	; c10112c <lcd_init+0x144>
 c101044:	e5832000 	str	r2, [r3]
    DP4_5 = 0x7EBDF ;
 c101048:	e59f30e0 	ldr	r3, [pc, #224]	; c101130 <lcd_init+0x148>
 c10104c:	e59f20e0 	ldr	r2, [pc, #224]	; c101134 <lcd_init+0x14c>
 c101050:	e5832000 	str	r2, [r3]
    DP6_7 = 0x7FDFBFE;
 c101054:	e59f30dc 	ldr	r3, [pc, #220]	; c101138 <lcd_init+0x150>
 c101058:	e59f20dc 	ldr	r2, [pc, #220]	; c10113c <lcd_init+0x154>
 c10105c:	e5832000 	str	r2, [r3]
    
    REDLUT = 0x0;
 c101060:	e59f30d8 	ldr	r3, [pc, #216]	; c101140 <lcd_init+0x158>
 c101064:	e3a02000 	mov	r2, #0
 c101068:	e5832000 	str	r2, [r3]
    GREENLUT = 0x0;
 c10106c:	e59f30d0 	ldr	r3, [pc, #208]	; c101144 <lcd_init+0x15c>
 c101070:	e3a02000 	mov	r2, #0
 c101074:	e5832000 	str	r2, [r3]
    BLUELUT = 0x0;
 c101078:	e59f30c8 	ldr	r3, [pc, #200]	; c101148 <lcd_init+0x160>
 c10107c:	e3a02000 	mov	r2, #0
 c101080:	e5832000 	str	r2, [r3]

    LCDCON1 = 0x1C020;
 c101084:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c101088:	e59f20bc 	ldr	r2, [pc, #188]	; c10114c <lcd_init+0x164>
 c10108c:	e5832000 	str	r2, [r3]
    LCDCON2 = 0x13CEF;
 c101090:	e59f30b8 	ldr	r3, [pc, #184]	; c101150 <lcd_init+0x168>
 c101094:	e59f20b8 	ldr	r2, [pc, #184]	; c101154 <lcd_init+0x16c>
 c101098:	e5832000 	str	r2, [r3]
    LCDCON3  = 0x0;
 c10109c:	e59f30b4 	ldr	r3, [pc, #180]	; c101158 <lcd_init+0x170>
 c1010a0:	e3a02000 	mov	r2, #0
 c1010a4:	e5832000 	str	r2, [r3]

    LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 c1010a8:	e59f30ac 	ldr	r3, [pc, #172]	; c10115c <lcd_init+0x174>
 c1010ac:	e59f20ac 	ldr	r2, [pc, #172]	; c101160 <lcd_init+0x178>
 c1010b0:	e1a020a2 	lsr	r2, r2, #1
 c1010b4:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
 c1010b8:	e5832000 	str	r2, [r3]
    LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 c1010bc:	e59f20a0 	ldr	r2, [pc, #160]	; c101164 <lcd_init+0x17c>
 c1010c0:	e59f3098 	ldr	r3, [pc, #152]	; c101160 <lcd_init+0x178>
 c1010c4:	e2833c96 	add	r3, r3, #38400	; 0x9600
 c1010c8:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c1010cc:	e3c33503 	bic	r3, r3, #12582912	; 0xc00000
 c1010d0:	e1a030a3 	lsr	r3, r3, #1
 c1010d4:	e3833202 	orr	r3, r3, #536870912	; 0x20000000
 c1010d8:	e5823000 	str	r3, [r2]
    LCDSADDR3 = 0x50;
 c1010dc:	e59f3084 	ldr	r3, [pc, #132]	; c101168 <lcd_init+0x180>
 c1010e0:	e3a02050 	mov	r2, #80	; 0x50
 c1010e4:	e5832000 	str	r2, [r3]
    
    lcd_off();
 c1010e8:	eb00002e 	bl	c1011a8 <lcd_off>
}
 c1010ec:	e24bd00c 	sub	sp, fp, #12
 c1010f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1010f4:	e12fff1e 	bx	lr
 c1010f8:	01f00044 	.word	0x01f00044
 c1010fc:	00012210 	.word	0x00012210
 c101100:	01f00020 	.word	0x01f00020
 c101104:	0000a5a5 	.word	0x0000a5a5
 c101108:	01f00024 	.word	0x01f00024
 c10110c:	0ba5da65 	.word	0x0ba5da65
 c101110:	01f00028 	.word	0x01f00028
 c101114:	000a5a5f 	.word	0x000a5a5f
 c101118:	01f0002c 	.word	0x01f0002c
 c10111c:	00000d6b 	.word	0x00000d6b
 c101120:	01f00030 	.word	0x01f00030
 c101124:	0eb7b5ed 	.word	0x0eb7b5ed
 c101128:	01f00034 	.word	0x01f00034
 c10112c:	00007dbe 	.word	0x00007dbe
 c101130:	01f00038 	.word	0x01f00038
 c101134:	0007ebdf 	.word	0x0007ebdf
 c101138:	01f0003c 	.word	0x01f0003c
 c10113c:	07fdfbfe 	.word	0x07fdfbfe
 c101140:	01f00014 	.word	0x01f00014
 c101144:	01f00018 	.word	0x01f00018
 c101148:	01f0001c 	.word	0x01f0001c
 c10114c:	0001c020 	.word	0x0001c020
 c101150:	01f00004 	.word	0x01f00004
 c101154:	00013cef 	.word	0x00013cef
 c101158:	01f00040 	.word	0x01f00040
 c10115c:	01f00008 	.word	0x01f00008
 c101160:	0c106f5c 	.word	0x0c106f5c
 c101164:	01f0000c 	.word	0x01f0000c
 c101168:	01f00010 	.word	0x01f00010

0c10116c <lcd_on>:

void lcd_on( void ){
 c10116c:	e1a0c00d 	mov	ip, sp
 c101170:	e92dd800 	push	{fp, ip, lr, pc}
 c101174:	e24cb004 	sub	fp, ip, #4
    state = 1;
 c101178:	e59f3024 	ldr	r3, [pc, #36]	; c1011a4 <lcd_on+0x38>
 c10117c:	e3a02001 	mov	r2, #1
 c101180:	e5c32000 	strb	r2, [r3]
    LCDCON1 |= 1 << 0;
 c101184:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c101188:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c10118c:	e5922000 	ldr	r2, [r2]
 c101190:	e3822001 	orr	r2, r2, #1
 c101194:	e5832000 	str	r2, [r3]
}
 c101198:	e24bd00c 	sub	sp, fp, #12
 c10119c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1011a0:	e12fff1e 	bx	lr
 c1011a4:	0c106f48 	.word	0x0c106f48

0c1011a8 <lcd_off>:

void lcd_off( void ){
 c1011a8:	e1a0c00d 	mov	ip, sp
 c1011ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1011b0:	e24cb004 	sub	fp, ip, #4
    state = 0;
 c1011b4:	e59f3024 	ldr	r3, [pc, #36]	; c1011e0 <lcd_off+0x38>
 c1011b8:	e3a02000 	mov	r2, #0
 c1011bc:	e5c32000 	strb	r2, [r3]
    LCDCON1 &= ~(1 << 0);
 c1011c0:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c1011c4:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c1011c8:	e5922000 	ldr	r2, [r2]
 c1011cc:	e3c22001 	bic	r2, r2, #1
 c1011d0:	e5832000 	str	r2, [r3]
}
 c1011d4:	e24bd00c 	sub	sp, fp, #12
 c1011d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1011dc:	e12fff1e 	bx	lr
 c1011e0:	0c106f48 	.word	0x0c106f48

0c1011e4 <lcd_status>:

uint8 lcd_status( void ){
 c1011e4:	e1a0c00d 	mov	ip, sp
 c1011e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1011ec:	e24cb004 	sub	fp, ip, #4
    return state;
 c1011f0:	e59f3010 	ldr	r3, [pc, #16]	; c101208 <lcd_status+0x24>
 c1011f4:	e5d33000 	ldrb	r3, [r3]
}
 c1011f8:	e1a00003 	mov	r0, r3
 c1011fc:	e24bd00c 	sub	sp, fp, #12
 c101200:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101204:	e12fff1e 	bx	lr
 c101208:	0c106f48 	.word	0x0c106f48

0c10120c <lcd_clear>:

void lcd_clear( void ){
 c10120c:	e1a0c00d 	mov	ip, sp
 c101210:	e92dd800 	push	{fp, ip, lr, pc}
 c101214:	e24cb004 	sub	fp, ip, #4
 c101218:	e24dd008 	sub	sp, sp, #8
	uint16 i, j;
    for(i = 0; i < LCD_HEIGHT; i++){
 c10121c:	e3a03000 	mov	r3, #0
 c101220:	e14b30be 	strh	r3, [fp, #-14]
 c101224:	ea000012 	b	c101274 <lcd_clear+0x68>
    	for(j = 0; j < LCD_WIDTH; j++){
 c101228:	e3a03000 	mov	r3, #0
 c10122c:	e14b31b0 	strh	r3, [fp, #-16]
 c101230:	ea000008 	b	c101258 <lcd_clear+0x4c>
    		lcd_putpixel(j, i, WHITE);
 c101234:	e15b21b0 	ldrh	r2, [fp, #-16]
 c101238:	e15b30be 	ldrh	r3, [fp, #-14]
 c10123c:	e1a00002 	mov	r0, r2
 c101240:	e1a01003 	mov	r1, r3
 c101244:	e3a02000 	mov	r2, #0
 c101248:	eb000010 	bl	c101290 <lcd_putpixel>
}

void lcd_clear( void ){
	uint16 i, j;
    for(i = 0; i < LCD_HEIGHT; i++){
    	for(j = 0; j < LCD_WIDTH; j++){
 c10124c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101250:	e2833001 	add	r3, r3, #1
 c101254:	e14b31b0 	strh	r3, [fp, #-16]
 c101258:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10125c:	e59f3028 	ldr	r3, [pc, #40]	; c10128c <lcd_clear+0x80>
 c101260:	e1520003 	cmp	r2, r3
 c101264:	9afffff2 	bls	c101234 <lcd_clear+0x28>
    return state;
}

void lcd_clear( void ){
	uint16 i, j;
    for(i = 0; i < LCD_HEIGHT; i++){
 c101268:	e15b30be 	ldrh	r3, [fp, #-14]
 c10126c:	e2833001 	add	r3, r3, #1
 c101270:	e14b30be 	strh	r3, [fp, #-14]
 c101274:	e15b30be 	ldrh	r3, [fp, #-14]
 c101278:	e35300ef 	cmp	r3, #239	; 0xef
 c10127c:	9affffe9 	bls	c101228 <lcd_clear+0x1c>
    	for(j = 0; j < LCD_WIDTH; j++){
    		lcd_putpixel(j, i, WHITE);
    	}
    }
}
 c101280:	e24bd00c 	sub	sp, fp, #12
 c101284:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101288:	e12fff1e 	bx	lr
 c10128c:	0000013f 	.word	0x0000013f

0c101290 <lcd_putpixel>:

void lcd_putpixel( uint16 x, uint16 y, uint8 c){
 c101290:	e1a0c00d 	mov	ip, sp
 c101294:	e92dd800 	push	{fp, ip, lr, pc}
 c101298:	e24cb004 	sub	fp, ip, #4
 c10129c:	e24dd010 	sub	sp, sp, #16
 c1012a0:	e1a03002 	mov	r3, r2
 c1012a4:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1012a8:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1012ac:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    uint8 byte, bit;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c1012b0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1012b4:	e1a030a3 	lsr	r3, r3, #1
 c1012b8:	e1a03803 	lsl	r3, r3, #16
 c1012bc:	e1a02823 	lsr	r2, r3, #16
 c1012c0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1012c4:	e1a01003 	mov	r1, r3
 c1012c8:	e1a01101 	lsl	r1, r1, #2
 c1012cc:	e0813003 	add	r3, r1, r3
 c1012d0:	e1a03283 	lsl	r3, r3, #5
 c1012d4:	e1a03803 	lsl	r3, r3, #16
 c1012d8:	e1a03823 	lsr	r3, r3, #16
 c1012dc:	e0823003 	add	r3, r2, r3
 c1012e0:	e14b30be 	strh	r3, [fp, #-14]
    bit = (1-x%2)*4;
 c1012e4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1012e8:	e2033001 	and	r3, r3, #1
 c1012ec:	e3530000 	cmp	r3, #0
 c1012f0:	1a000001 	bne	c1012fc <lcd_putpixel+0x6c>
 c1012f4:	e3a03004 	mov	r3, #4
 c1012f8:	ea000000 	b	c101300 <lcd_putpixel+0x70>
 c1012fc:	e3a03000 	mov	r3, #0
 c101300:	e54b300f 	strb	r3, [fp, #-15]
    
    byte = lcd_buffer[i];
 c101304:	e15b30be 	ldrh	r3, [fp, #-14]
 c101308:	e59f2068 	ldr	r2, [pc, #104]	; c101378 <lcd_putpixel+0xe8>
 c10130c:	e7d23003 	ldrb	r3, [r2, r3]
 c101310:	e54b3010 	strb	r3, [fp, #-16]
    byte &= ~(0xF << bit);
 c101314:	e55b300f 	ldrb	r3, [fp, #-15]
 c101318:	e3a0200f 	mov	r2, #15
 c10131c:	e1a03312 	lsl	r3, r2, r3
 c101320:	e20330ff 	and	r3, r3, #255	; 0xff
 c101324:	e1e03003 	mvn	r3, r3
 c101328:	e20320ff 	and	r2, r3, #255	; 0xff
 c10132c:	e55b3010 	ldrb	r3, [fp, #-16]
 c101330:	e0023003 	and	r3, r2, r3
 c101334:	e20330ff 	and	r3, r3, #255	; 0xff
 c101338:	e54b3010 	strb	r3, [fp, #-16]
    byte |= c << bit;
 c10133c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c101340:	e55b300f 	ldrb	r3, [fp, #-15]
 c101344:	e1a03312 	lsl	r3, r2, r3
 c101348:	e20320ff 	and	r2, r3, #255	; 0xff
 c10134c:	e55b3010 	ldrb	r3, [fp, #-16]
 c101350:	e1823003 	orr	r3, r2, r3
 c101354:	e20330ff 	and	r3, r3, #255	; 0xff
 c101358:	e54b3010 	strb	r3, [fp, #-16]
    lcd_buffer[i] = byte;
 c10135c:	e15b30be 	ldrh	r3, [fp, #-14]
 c101360:	e59f2010 	ldr	r2, [pc, #16]	; c101378 <lcd_putpixel+0xe8>
 c101364:	e55b1010 	ldrb	r1, [fp, #-16]
 c101368:	e7c21003 	strb	r1, [r2, r3]
}
 c10136c:	e24bd00c 	sub	sp, fp, #12
 c101370:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101374:	e12fff1e 	bx	lr
 c101378:	0c106f5c 	.word	0x0c106f5c

0c10137c <lcd_getpixel>:

uint8 lcd_getpixel( uint16 x, uint16 y ){
 c10137c:	e1a0c00d 	mov	ip, sp
 c101380:	e92dd800 	push	{fp, ip, lr, pc}
 c101384:	e24cb004 	sub	fp, ip, #4
 c101388:	e24dd010 	sub	sp, sp, #16
 c10138c:	e1a02000 	mov	r2, r0
 c101390:	e1a03001 	mov	r3, r1
 c101394:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
 c101398:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
	uint8 pos;
	uint8 px;

	pos = lcd_buffer[x/2 + y * (320/2)];
 c10139c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1013a0:	e1a030a3 	lsr	r3, r3, #1
 c1013a4:	e1a03803 	lsl	r3, r3, #16
 c1013a8:	e1a03823 	lsr	r3, r3, #16
 c1013ac:	e1a01003 	mov	r1, r3
 c1013b0:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c1013b4:	e1a03002 	mov	r3, r2
 c1013b8:	e1a03103 	lsl	r3, r3, #2
 c1013bc:	e0833002 	add	r3, r3, r2
 c1013c0:	e1a03283 	lsl	r3, r3, #5
 c1013c4:	e0813003 	add	r3, r1, r3
 c1013c8:	e59f2040 	ldr	r2, [pc, #64]	; c101410 <lcd_getpixel+0x94>
 c1013cc:	e7d23003 	ldrb	r3, [r2, r3]
 c1013d0:	e54b300d 	strb	r3, [fp, #-13]
	px = pos >> (1 - x % 2) * 4;
 c1013d4:	e55b200d 	ldrb	r2, [fp, #-13]
 c1013d8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1013dc:	e2033001 	and	r3, r3, #1
 c1013e0:	e3530000 	cmp	r3, #0
 c1013e4:	1a000001 	bne	c1013f0 <lcd_getpixel+0x74>
 c1013e8:	e3a03004 	mov	r3, #4
 c1013ec:	ea000000 	b	c1013f4 <lcd_getpixel+0x78>
 c1013f0:	e3a03000 	mov	r3, #0
 c1013f4:	e1a03352 	asr	r3, r2, r3
 c1013f8:	e54b300e 	strb	r3, [fp, #-14]
	return px;
 c1013fc:	e55b300e 	ldrb	r3, [fp, #-14]
}
 c101400:	e1a00003 	mov	r0, r3
 c101404:	e24bd00c 	sub	sp, fp, #12
 c101408:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10140c:	e12fff1e 	bx	lr
 c101410:	0c106f5c 	.word	0x0c106f5c

0c101414 <lcd_draw_hrow>:

void lcd_draw_hrow( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width ){
 c101414:	e1a0c00d 	mov	ip, sp
 c101418:	e92dd800 	push	{fp, ip, lr, pc}
 c10141c:	e24cb004 	sub	fp, ip, #4
 c101420:	e24dd010 	sub	sp, sp, #16
 c101424:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c101428:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10142c:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c101430:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	uint16 i, j;
	for(j = 0; j <= width;j++){
 c101434:	e3a03000 	mov	r3, #0
 c101438:	e14b31b0 	strh	r3, [fp, #-16]
 c10143c:	ea000017 	b	c1014a0 <lcd_draw_hrow+0x8c>
		for(i = xleft; i <= xright ; i++){
 c101440:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101444:	e14b30be 	strh	r3, [fp, #-14]
 c101448:	ea00000d 	b	c101484 <lcd_draw_hrow+0x70>
    		lcd_putpixel(i, y+j, color);
 c10144c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c101450:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101454:	e0823003 	add	r3, r2, r3
 c101458:	e1a03803 	lsl	r3, r3, #16
 c10145c:	e1a02823 	lsr	r2, r3, #16
 c101460:	e15b10be 	ldrh	r1, [fp, #-14]
 c101464:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c101468:	e1a00001 	mov	r0, r1
 c10146c:	e1a01002 	mov	r1, r2
 c101470:	e1a02003 	mov	r2, r3
 c101474:	ebffff85 	bl	c101290 <lcd_putpixel>
}

void lcd_draw_hrow( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width ){
	uint16 i, j;
	for(j = 0; j <= width;j++){
		for(i = xleft; i <= xright ; i++){
 c101478:	e15b30be 	ldrh	r3, [fp, #-14]
 c10147c:	e2833001 	add	r3, r3, #1
 c101480:	e14b30be 	strh	r3, [fp, #-14]
 c101484:	e15b20be 	ldrh	r2, [fp, #-14]
 c101488:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10148c:	e1520003 	cmp	r2, r3
 c101490:	9affffed 	bls	c10144c <lcd_draw_hrow+0x38>
	return px;
}

void lcd_draw_hrow( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width ){
	uint16 i, j;
	for(j = 0; j <= width;j++){
 c101494:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101498:	e2833001 	add	r3, r3, #1
 c10149c:	e14b31b0 	strh	r3, [fp, #-16]
 c1014a0:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1014a4:	e1db30b4 	ldrh	r3, [fp, #4]
 c1014a8:	e1520003 	cmp	r2, r3
 c1014ac:	9affffe3 	bls	c101440 <lcd_draw_hrow+0x2c>
		for(i = xleft; i <= xright ; i++){
    		lcd_putpixel(i, y+j, color);
    	}
    }
}
 c1014b0:	e24bd00c 	sub	sp, fp, #12
 c1014b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1014b8:	e12fff1e 	bx	lr

0c1014bc <lcd_draw_vrow>:

void lcd_draw_vrow( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width ){
 c1014bc:	e1a0c00d 	mov	ip, sp
 c1014c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1014c4:	e24cb004 	sub	fp, ip, #4
 c1014c8:	e24dd010 	sub	sp, sp, #16
 c1014cc:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1014d0:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1014d4:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c1014d8:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	uint16 i, j;
	for(j = 0; j <=width;j++){
 c1014dc:	e3a03000 	mov	r3, #0
 c1014e0:	e14b31b0 	strh	r3, [fp, #-16]
 c1014e4:	ea000017 	b	c101548 <lcd_draw_vrow+0x8c>
		for(i = yup; i <= ydown ; i++){
 c1014e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1014ec:	e14b30be 	strh	r3, [fp, #-14]
 c1014f0:	ea00000d 	b	c10152c <lcd_draw_vrow+0x70>
			lcd_putpixel(x+j, i, color);
 c1014f4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c1014f8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1014fc:	e0823003 	add	r3, r2, r3
 c101500:	e1a03803 	lsl	r3, r3, #16
 c101504:	e1a01823 	lsr	r1, r3, #16
 c101508:	e15b20be 	ldrh	r2, [fp, #-14]
 c10150c:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c101510:	e1a00001 	mov	r0, r1
 c101514:	e1a01002 	mov	r1, r2
 c101518:	e1a02003 	mov	r2, r3
 c10151c:	ebffff5b 	bl	c101290 <lcd_putpixel>
}

void lcd_draw_vrow( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width ){
	uint16 i, j;
	for(j = 0; j <=width;j++){
		for(i = yup; i <= ydown ; i++){
 c101520:	e15b30be 	ldrh	r3, [fp, #-14]
 c101524:	e2833001 	add	r3, r3, #1
 c101528:	e14b30be 	strh	r3, [fp, #-14]
 c10152c:	e15b20be 	ldrh	r2, [fp, #-14]
 c101530:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101534:	e1520003 	cmp	r2, r3
 c101538:	9affffed 	bls	c1014f4 <lcd_draw_vrow+0x38>
    }
}

void lcd_draw_vrow( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width ){
	uint16 i, j;
	for(j = 0; j <=width;j++){
 c10153c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101540:	e2833001 	add	r3, r3, #1
 c101544:	e14b31b0 	strh	r3, [fp, #-16]
 c101548:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10154c:	e1db30b4 	ldrh	r3, [fp, #4]
 c101550:	e1520003 	cmp	r2, r3
 c101554:	9affffe3 	bls	c1014e8 <lcd_draw_vrow+0x2c>
		for(i = yup; i <= ydown ; i++){
			lcd_putpixel(x+j, i, color);
		}
	}
}
 c101558:	e24bd00c 	sub	sp, fp, #12
 c10155c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101560:	e12fff1e 	bx	lr

0c101564 <lcd_draw_box>:

void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width ){
 c101564:	e1a0c00d 	mov	ip, sp
 c101568:	e92dd800 	push	{fp, ip, lr, pc}
 c10156c:	e24cb004 	sub	fp, ip, #4
 c101570:	e24dd010 	sub	sp, sp, #16
 c101574:	e14b00be 	strh	r0, [fp, #-14]
 c101578:	e14b11b0 	strh	r1, [fp, #-16]
 c10157c:	e14b21b2 	strh	r2, [fp, #-18]	; 0xffffffee
 c101580:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
	lcd_draw_hrow(xleft - width, xright + width, yup - width, color, width);
 c101584:	e15b20be 	ldrh	r2, [fp, #-14]
 c101588:	e1db30b8 	ldrh	r3, [fp, #8]
 c10158c:	e0633002 	rsb	r3, r3, r2
 c101590:	e1a03803 	lsl	r3, r3, #16
 c101594:	e1a00823 	lsr	r0, r3, #16
 c101598:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c10159c:	e1db30b8 	ldrh	r3, [fp, #8]
 c1015a0:	e0823003 	add	r3, r2, r3
 c1015a4:	e1a03803 	lsl	r3, r3, #16
 c1015a8:	e1a01823 	lsr	r1, r3, #16
 c1015ac:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1015b0:	e1db30b8 	ldrh	r3, [fp, #8]
 c1015b4:	e0633002 	rsb	r3, r3, r2
 c1015b8:	e1a03803 	lsl	r3, r3, #16
 c1015bc:	e1a02823 	lsr	r2, r3, #16
 c1015c0:	e5db3004 	ldrb	r3, [fp, #4]
 c1015c4:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c1015c8:	e58dc000 	str	ip, [sp]
 c1015cc:	ebffff90 	bl	c101414 <lcd_draw_hrow>

	lcd_draw_vrow(yup, ydown + width, xleft - width, color, width);
 c1015d0:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c1015d4:	e1db30b8 	ldrh	r3, [fp, #8]
 c1015d8:	e0823003 	add	r3, r2, r3
 c1015dc:	e1a03803 	lsl	r3, r3, #16
 c1015e0:	e1a01823 	lsr	r1, r3, #16
 c1015e4:	e15b20be 	ldrh	r2, [fp, #-14]
 c1015e8:	e1db30b8 	ldrh	r3, [fp, #8]
 c1015ec:	e0633002 	rsb	r3, r3, r2
 c1015f0:	e1a03803 	lsl	r3, r3, #16
 c1015f4:	e1a02823 	lsr	r2, r3, #16
 c1015f8:	e15b01b0 	ldrh	r0, [fp, #-16]
 c1015fc:	e5db3004 	ldrb	r3, [fp, #4]
 c101600:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c101604:	e58dc000 	str	ip, [sp]
 c101608:	ebffffab 	bl	c1014bc <lcd_draw_vrow>
	lcd_draw_vrow(yup, ydown + width, xright, color, width);
 c10160c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c101610:	e1db30b8 	ldrh	r3, [fp, #8]
 c101614:	e0823003 	add	r3, r2, r3
 c101618:	e1a03803 	lsl	r3, r3, #16
 c10161c:	e1a01823 	lsr	r1, r3, #16
 c101620:	e15b01b0 	ldrh	r0, [fp, #-16]
 c101624:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c101628:	e5db3004 	ldrb	r3, [fp, #4]
 c10162c:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c101630:	e58dc000 	str	ip, [sp]
 c101634:	ebffffa0 	bl	c1014bc <lcd_draw_vrow>

	lcd_draw_hrow(xleft, xright, ydown, color, width);
 c101638:	e15b00be 	ldrh	r0, [fp, #-14]
 c10163c:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c101640:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c101644:	e5db3004 	ldrb	r3, [fp, #4]
 c101648:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10164c:	e58dc000 	str	ip, [sp]
 c101650:	ebffff6f 	bl	c101414 <lcd_draw_hrow>
}
 c101654:	e24bd00c 	sub	sp, fp, #12
 c101658:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10165c:	e12fff1e 	bx	lr

0c101660 <lcd_putchar>:

void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch ){
 c101660:	e1a0c00d 	mov	ip, sp
 c101664:	e92dd800 	push	{fp, ip, lr, pc}
 c101668:	e24cb004 	sub	fp, ip, #4
 c10166c:	e24dd010 	sub	sp, sp, #16
 c101670:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c101674:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c101678:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c10167c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c101680:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c101684:	e1a03203 	lsl	r3, r3, #4
 c101688:	e1a02003 	mov	r2, r3
 c10168c:	e59f311c 	ldr	r3, [pc, #284]	; c1017b0 <lcd_putchar+0x150>
 c101690:	e0823003 	add	r3, r2, r3
 c101694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( row=0; row<16; row++ )
 c101698:	e3a03000 	mov	r3, #0
 c10169c:	e54b300d 	strb	r3, [fp, #-13]
 c1016a0:	ea00003c 	b	c101798 <lcd_putchar+0x138>
        for( col=0; col<8; col++ )                    
 c1016a4:	e3a03000 	mov	r3, #0
 c1016a8:	e54b300e 	strb	r3, [fp, #-14]
 c1016ac:	ea000033 	b	c101780 <lcd_putchar+0x120>
            if( bitmap[row] & (0x80 >> col) )
 c1016b0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1016b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1016b8:	e0823003 	add	r3, r2, r3
 c1016bc:	e5d33000 	ldrb	r3, [r3]
 c1016c0:	e1a02003 	mov	r2, r3
 c1016c4:	e55b300e 	ldrb	r3, [fp, #-14]
 c1016c8:	e3a01080 	mov	r1, #128	; 0x80
 c1016cc:	e1a03351 	asr	r3, r1, r3
 c1016d0:	e0023003 	and	r3, r2, r3
 c1016d4:	e3530000 	cmp	r3, #0
 c1016d8:	0a000013 	beq	c10172c <lcd_putchar+0xcc>
                lcd_putpixel( x+col, y+row, color );
 c1016dc:	e55b300e 	ldrb	r3, [fp, #-14]
 c1016e0:	e1a03803 	lsl	r3, r3, #16
 c1016e4:	e1a02823 	lsr	r2, r3, #16
 c1016e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1016ec:	e0823003 	add	r3, r2, r3
 c1016f0:	e1a03803 	lsl	r3, r3, #16
 c1016f4:	e1a01823 	lsr	r1, r3, #16
 c1016f8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1016fc:	e1a03803 	lsl	r3, r3, #16
 c101700:	e1a02823 	lsr	r2, r3, #16
 c101704:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101708:	e0823003 	add	r3, r2, r3
 c10170c:	e1a03803 	lsl	r3, r3, #16
 c101710:	e1a02823 	lsr	r2, r3, #16
 c101714:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c101718:	e1a00001 	mov	r0, r1
 c10171c:	e1a01002 	mov	r1, r2
 c101720:	e1a02003 	mov	r2, r3
 c101724:	ebfffed9 	bl	c101290 <lcd_putpixel>
 c101728:	ea000011 	b	c101774 <lcd_putchar+0x114>
            else
                lcd_putpixel( x+col, y+row, WHITE );
 c10172c:	e55b300e 	ldrb	r3, [fp, #-14]
 c101730:	e1a03803 	lsl	r3, r3, #16
 c101734:	e1a02823 	lsr	r2, r3, #16
 c101738:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10173c:	e0823003 	add	r3, r2, r3
 c101740:	e1a03803 	lsl	r3, r3, #16
 c101744:	e1a02823 	lsr	r2, r3, #16
 c101748:	e55b300d 	ldrb	r3, [fp, #-13]
 c10174c:	e1a03803 	lsl	r3, r3, #16
 c101750:	e1a01823 	lsr	r1, r3, #16
 c101754:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101758:	e0813003 	add	r3, r1, r3
 c10175c:	e1a03803 	lsl	r3, r3, #16
 c101760:	e1a03823 	lsr	r3, r3, #16
 c101764:	e1a00002 	mov	r0, r2
 c101768:	e1a01003 	mov	r1, r3
 c10176c:	e3a02000 	mov	r2, #0
 c101770:	ebfffec6 	bl	c101290 <lcd_putpixel>
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
        for( col=0; col<8; col++ )                    
 c101774:	e55b300e 	ldrb	r3, [fp, #-14]
 c101778:	e2833001 	add	r3, r3, #1
 c10177c:	e54b300e 	strb	r3, [fp, #-14]
 c101780:	e55b300e 	ldrb	r3, [fp, #-14]
 c101784:	e3530007 	cmp	r3, #7
 c101788:	9affffc8 	bls	c1016b0 <lcd_putchar+0x50>
void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch ){
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
 c10178c:	e55b300d 	ldrb	r3, [fp, #-13]
 c101790:	e2833001 	add	r3, r3, #1
 c101794:	e54b300d 	strb	r3, [fp, #-13]
 c101798:	e55b300d 	ldrb	r3, [fp, #-13]
 c10179c:	e353000f 	cmp	r3, #15
 c1017a0:	9affffbf 	bls	c1016a4 <lcd_putchar+0x44>
        for( col=0; col<8; col++ )                    
            if( bitmap[row] & (0x80 >> col) )
                lcd_putpixel( x+col, y+row, color );
            else
                lcd_putpixel( x+col, y+row, WHITE );
}
 c1017a4:	e24bd00c 	sub	sp, fp, #12
 c1017a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1017ac:	e12fff1e 	bx	lr
 c1017b0:	0c105e8c 	.word	0x0c105e8c

0c1017b4 <lcd_puts>:

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s ){
 c1017b4:	e1a0c00d 	mov	ip, sp
 c1017b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1017bc:	e24cb004 	sub	fp, ip, #4
 c1017c0:	e24dd018 	sub	sp, sp, #24
 c1017c4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c1017c8:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1017cc:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1017d0:	e1a03002 	mov	r3, r2
 c1017d4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int i = 0;
 c1017d8:	e3a03000 	mov	r3, #0
 c1017dc:	e50b3010 	str	r3, [fp, #-16]
	while(s[i] != '\0'){
 c1017e0:	ea00000d 	b	c10181c <lcd_puts+0x68>
		lcd_putchar(x,y,color,s[i]);
 c1017e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1017e8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1017ec:	e0823003 	add	r3, r2, r3
 c1017f0:	e5d33000 	ldrb	r3, [r3]
 c1017f4:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
 c1017f8:	e15b11b8 	ldrh	r1, [fp, #-24]	; 0xffffffe8
 c1017fc:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c101800:	ebffff96 	bl	c101660 <lcd_putchar>
		x = x+8;
 c101804:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101808:	e2833008 	add	r3, r3, #8
 c10180c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
		i++;
 c101810:	e51b3010 	ldr	r3, [fp, #-16]
 c101814:	e2833001 	add	r3, r3, #1
 c101818:	e50b3010 	str	r3, [fp, #-16]
                lcd_putpixel( x+col, y+row, WHITE );
}

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s ){
	int i = 0;
	while(s[i] != '\0'){
 c10181c:	e51b3010 	ldr	r3, [fp, #-16]
 c101820:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101824:	e0823003 	add	r3, r2, r3
 c101828:	e5d33000 	ldrb	r3, [r3]
 c10182c:	e3530000 	cmp	r3, #0
 c101830:	1affffeb 	bne	c1017e4 <lcd_puts+0x30>
		lcd_putchar(x,y,color,s[i]);
		x = x+8;
		i++;
	}
}
 c101834:	e24bd00c 	sub	sp, fp, #12
 c101838:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10183c:	e12fff1e 	bx	lr

0c101840 <lcd_putint>:

void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i ){
 c101840:	e1a0c00d 	mov	ip, sp
 c101844:	e92dd800 	push	{fp, ip, lr, pc}
 c101848:	e24cb004 	sub	fp, ip, #4
 c10184c:	e24dd028 	sub	sp, sp, #40	; 0x28
 c101850:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c101854:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c101858:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c10185c:	e1a03002 	mov	r3, r2
 c101860:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	char buf[10 + 1 + 1];
	char *p = buf+11;
 c101864:	e24b3020 	sub	r3, fp, #32
 c101868:	e283300b 	add	r3, r3, #11
 c10186c:	e50b3010 	str	r3, [fp, #-16]
	uint8 signo;//0 es negativo
	uint8 c;
	*p = '\0';
 c101870:	e51b3010 	ldr	r3, [fp, #-16]
 c101874:	e3a02000 	mov	r2, #0
 c101878:	e5c32000 	strb	r2, [r3]

	if(i<0){
 c10187c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c101880:	e3530000 	cmp	r3, #0
 c101884:	aa000005 	bge	c1018a0 <lcd_putint+0x60>
		signo = 0;
 c101888:	e3a03000 	mov	r3, #0
 c10188c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i *= -1;
 c101890:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c101894:	e2633000 	rsb	r3, r3, #0
 c101898:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c10189c:	ea000001 	b	c1018a8 <lcd_putint+0x68>
	}
	else{
		signo = 1;
 c1018a0:	e3a03001 	mov	r3, #1
 c1018a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	}

	do{
		c = i%10;
 c1018a8:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
 c1018ac:	e59f30c0 	ldr	r3, [pc, #192]	; c101974 <lcd_putint+0x134>
 c1018b0:	e0c32391 	smull	r2, r3, r1, r3
 c1018b4:	e1a02143 	asr	r2, r3, #2
 c1018b8:	e1a03fc1 	asr	r3, r1, #31
 c1018bc:	e0632002 	rsb	r2, r3, r2
 c1018c0:	e1a03002 	mov	r3, r2
 c1018c4:	e1a03103 	lsl	r3, r3, #2
 c1018c8:	e0833002 	add	r3, r3, r2
 c1018cc:	e1a03083 	lsl	r3, r3, #1
 c1018d0:	e0632001 	rsb	r2, r3, r1
 c1018d4:	e1a03002 	mov	r3, r2
 c1018d8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		i = i/10;
 c1018dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c1018e0:	e59f208c 	ldr	r2, [pc, #140]	; c101974 <lcd_putint+0x134>
 c1018e4:	e0c21293 	smull	r1, r2, r3, r2
 c1018e8:	e1a02142 	asr	r2, r2, #2
 c1018ec:	e1a03fc3 	asr	r3, r3, #31
 c1018f0:	e0633002 	rsb	r3, r3, r2
 c1018f4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
		*--p= c + '0';
 c1018f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1018fc:	e2433001 	sub	r3, r3, #1
 c101900:	e50b3010 	str	r3, [fp, #-16]
 c101904:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c101908:	e2833030 	add	r3, r3, #48	; 0x30
 c10190c:	e20320ff 	and	r2, r3, #255	; 0xff
 c101910:	e51b3010 	ldr	r3, [fp, #-16]
 c101914:	e5c32000 	strb	r2, [r3]
	}while(i);
 c101918:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10191c:	e3530000 	cmp	r3, #0
 c101920:	1affffe0 	bne	c1018a8 <lcd_putint+0x68>

	if(!signo){
 c101924:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101928:	e3530000 	cmp	r3, #0
 c10192c:	1a000005 	bne	c101948 <lcd_putint+0x108>
		*--p= '-';
 c101930:	e51b3010 	ldr	r3, [fp, #-16]
 c101934:	e2433001 	sub	r3, r3, #1
 c101938:	e50b3010 	str	r3, [fp, #-16]
 c10193c:	e51b3010 	ldr	r3, [fp, #-16]
 c101940:	e3a0202d 	mov	r2, #45	; 0x2d
 c101944:	e5c32000 	strb	r2, [r3]
	}

	lcd_puts(x,y,color,p);
 c101948:	e15b12b6 	ldrh	r1, [fp, #-38]	; 0xffffffda
 c10194c:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
 c101950:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c101954:	e1a00001 	mov	r0, r1
 c101958:	e1a01002 	mov	r1, r2
 c10195c:	e1a02003 	mov	r2, r3
 c101960:	e51b3010 	ldr	r3, [fp, #-16]
 c101964:	ebffff92 	bl	c1017b4 <lcd_puts>
}
 c101968:	e24bd00c 	sub	sp, fp, #12
 c10196c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101970:	e12fff1e 	bx	lr
 c101974:	66666667 	.word	0x66666667

0c101978 <lcd_puthex>:

void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i ){
 c101978:	e1a0c00d 	mov	ip, sp
 c10197c:	e92dd800 	push	{fp, ip, lr, pc}
 c101980:	e24cb004 	sub	fp, ip, #4
 c101984:	e24dd020 	sub	sp, sp, #32
 c101988:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c10198c:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c101990:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c101994:	e1a03002 	mov	r3, r2
 c101998:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    char buf[8 + 1];
    char *p = buf + 8;
 c10199c:	e24b301c 	sub	r3, fp, #28
 c1019a0:	e2833008 	add	r3, r3, #8
 c1019a4:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c1019a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1019ac:	e3a02000 	mov	r2, #0
 c1019b0:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c1019b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1019b8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1019bc:	e203300f 	and	r3, r3, #15
 c1019c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c1019c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1019c8:	e3530009 	cmp	r3, #9
 c1019cc:	8a000008 	bhi	c1019f4 <lcd_puthex+0x7c>
            *--p = '0' + c;
 c1019d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1019d4:	e2433001 	sub	r3, r3, #1
 c1019d8:	e50b3010 	str	r3, [fp, #-16]
 c1019dc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1019e0:	e2833030 	add	r3, r3, #48	; 0x30
 c1019e4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1019e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1019ec:	e5c32000 	strb	r2, [r3]
 c1019f0:	ea000007 	b	c101a14 <lcd_puthex+0x9c>
        else
            *--p = 'a' + c - 10;
 c1019f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1019f8:	e2433001 	sub	r3, r3, #1
 c1019fc:	e50b3010 	str	r3, [fp, #-16]
 c101a00:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101a04:	e2833057 	add	r3, r3, #87	; 0x57
 c101a08:	e20320ff 	and	r2, r3, #255	; 0xff
 c101a0c:	e51b3010 	ldr	r3, [fp, #-16]
 c101a10:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c101a14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c101a18:	e1a03223 	lsr	r3, r3, #4
 c101a1c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i );
 c101a20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c101a24:	e3530000 	cmp	r3, #0
 c101a28:	1affffe1 	bne	c1019b4 <lcd_puthex+0x3c>
	lcd_puts(x,y,color,p);
 c101a2c:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c101a30:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c101a34:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c101a38:	e1a00001 	mov	r0, r1
 c101a3c:	e1a01002 	mov	r1, r2
 c101a40:	e1a02003 	mov	r2, r3
 c101a44:	e51b3010 	ldr	r3, [fp, #-16]
 c101a48:	ebffff59 	bl	c1017b4 <lcd_puts>
}
 c101a4c:	e24bd00c 	sub	sp, fp, #12
 c101a50:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101a54:	e12fff1e 	bx	lr

0c101a58 <lcd_putWallpaper>:

void lcd_putWallpaper( uint8 *bmp ){
 c101a58:	e1a0c00d 	mov	ip, sp
 c101a5c:	e92dd800 	push	{fp, ip, lr, pc}
 c101a60:	e24cb004 	sub	fp, ip, #4
 c101a64:	e24dd018 	sub	sp, sp, #24
 c101a68:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    uint32 headerSize;

    uint16 x, ySrc, yDst;
    uint16 offsetSrc, offsetDst;

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 c101a6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101a70:	e283300a 	add	r3, r3, #10
 c101a74:	e5d33000 	ldrb	r3, [r3]
 c101a78:	e1a02003 	mov	r2, r3
 c101a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101a80:	e283300b 	add	r3, r3, #11
 c101a84:	e5d33000 	ldrb	r3, [r3]
 c101a88:	e1a03403 	lsl	r3, r3, #8
 c101a8c:	e0822003 	add	r2, r2, r3
 c101a90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101a94:	e283300c 	add	r3, r3, #12
 c101a98:	e5d33000 	ldrb	r3, [r3]
 c101a9c:	e1a03803 	lsl	r3, r3, #16
 c101aa0:	e0822003 	add	r2, r2, r3
 c101aa4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101aa8:	e283300d 	add	r3, r3, #13
 c101aac:	e5d33000 	ldrb	r3, [r3]
 c101ab0:	e1a03c03 	lsl	r3, r3, #24
 c101ab4:	e0823003 	add	r3, r2, r3
 c101ab8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    bmp = bmp + headerSize;
 c101abc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101ac0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101ac4:	e0823003 	add	r3, r2, r3
 c101ac8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 c101acc:	e3a03000 	mov	r3, #0
 c101ad0:	e14b31b0 	strh	r3, [fp, #-16]
 c101ad4:	e3a030ef 	mov	r3, #239	; 0xef
 c101ad8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c101adc:	ea00002d 	b	c101b98 <lcd_putWallpaper+0x140>
    {
        offsetDst = yDst*LCD_WIDTH/2;
 c101ae0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c101ae4:	e1a03002 	mov	r3, r2
 c101ae8:	e1a03103 	lsl	r3, r3, #2
 c101aec:	e0833002 	add	r3, r3, r2
 c101af0:	e1a03303 	lsl	r3, r3, #6
 c101af4:	e1a02fa3 	lsr	r2, r3, #31
 c101af8:	e0823003 	add	r3, r2, r3
 c101afc:	e1a030c3 	asr	r3, r3, #1
 c101b00:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        offsetSrc = ySrc*LCD_WIDTH/2;
 c101b04:	e15b21b0 	ldrh	r2, [fp, #-16]
 c101b08:	e1a03002 	mov	r3, r2
 c101b0c:	e1a03103 	lsl	r3, r3, #2
 c101b10:	e0833002 	add	r3, r3, r2
 c101b14:	e1a03303 	lsl	r3, r3, #6
 c101b18:	e1a02fa3 	lsr	r2, r3, #31
 c101b1c:	e0823003 	add	r3, r2, r3
 c101b20:	e1a030c3 	asr	r3, r3, #1
 c101b24:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
        for( x=0; x<LCD_WIDTH/2; x++ )
 c101b28:	e3a03000 	mov	r3, #0
 c101b2c:	e14b30be 	strh	r3, [fp, #-14]
 c101b30:	ea00000f 	b	c101b74 <lcd_putWallpaper+0x11c>
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 c101b34:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c101b38:	e15b30be 	ldrh	r3, [fp, #-14]
 c101b3c:	e0823003 	add	r3, r2, r3
 c101b40:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
 c101b44:	e15b20be 	ldrh	r2, [fp, #-14]
 c101b48:	e0812002 	add	r2, r1, r2
 c101b4c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c101b50:	e0812002 	add	r2, r1, r2
 c101b54:	e5d22000 	ldrb	r2, [r2]
 c101b58:	e1e02002 	mvn	r2, r2
 c101b5c:	e20210ff 	and	r1, r2, #255	; 0xff
 c101b60:	e59f2048 	ldr	r2, [pc, #72]	; c101bb0 <lcd_putWallpaper+0x158>
 c101b64:	e7c21003 	strb	r1, [r2, r3]

    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
    {
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
 c101b68:	e15b30be 	ldrh	r3, [fp, #-14]
 c101b6c:	e2833001 	add	r3, r3, #1
 c101b70:	e14b30be 	strh	r3, [fp, #-14]
 c101b74:	e15b30be 	ldrh	r3, [fp, #-14]
 c101b78:	e353009f 	cmp	r3, #159	; 0x9f
 c101b7c:	9affffec 	bls	c101b34 <lcd_putWallpaper+0xdc>

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);

    bmp = bmp + headerSize;

    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 c101b80:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101b84:	e2833001 	add	r3, r3, #1
 c101b88:	e14b31b0 	strh	r3, [fp, #-16]
 c101b8c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c101b90:	e2433001 	sub	r3, r3, #1
 c101b94:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c101b98:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101b9c:	e35300ef 	cmp	r3, #239	; 0xef
 c101ba0:	9affffce 	bls	c101ae0 <lcd_putWallpaper+0x88>
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
    }
}
 c101ba4:	e24bd00c 	sub	sp, fp, #12
 c101ba8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101bac:	e12fff1e 	bx	lr
 c101bb0:	0c106f5c 	.word	0x0c106f5c

0c101bb4 <lcd_putchar_x2>:


void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch ){
 c101bb4:	e1a0c00d 	mov	ip, sp
 c101bb8:	e92dd800 	push	{fp, ip, lr, pc}
 c101bbc:	e24cb004 	sub	fp, ip, #4
 c101bc0:	e24dd010 	sub	sp, sp, #16
 c101bc4:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c101bc8:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c101bcc:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c101bd0:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c101bd4:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c101bd8:	e1a03203 	lsl	r3, r3, #4
 c101bdc:	e1a02003 	mov	r2, r3
 c101be0:	e59f33f8 	ldr	r3, [pc, #1016]	; c101fe0 <lcd_putchar_x2+0x42c>
 c101be4:	e0823003 	add	r3, r2, r3
 c101be8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( row=0; row<16; row++){
 c101bec:	e3a03000 	mov	r3, #0
 c101bf0:	e54b300d 	strb	r3, [fp, #-13]
 c101bf4:	ea0000f3 	b	c101fc8 <lcd_putchar_x2+0x414>
        for( col=0; col<8; col++) {
 c101bf8:	e3a03000 	mov	r3, #0
 c101bfc:	e54b300e 	strb	r3, [fp, #-14]
 c101c00:	ea0000ea 	b	c101fb0 <lcd_putchar_x2+0x3fc>
            if( bitmap[row] & (0x80 >> col) ){
 c101c04:	e55b300d 	ldrb	r3, [fp, #-13]
 c101c08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c101c0c:	e0823003 	add	r3, r2, r3
 c101c10:	e5d33000 	ldrb	r3, [r3]
 c101c14:	e1a02003 	mov	r2, r3
 c101c18:	e55b300e 	ldrb	r3, [fp, #-14]
 c101c1c:	e3a01080 	mov	r1, #128	; 0x80
 c101c20:	e1a03351 	asr	r3, r1, r3
 c101c24:	e0023003 	and	r3, r2, r3
 c101c28:	e3530000 	cmp	r3, #0
 c101c2c:	0a000070 	beq	c101df4 <lcd_putchar_x2+0x240>
            	lcd_putpixel(x + (col*2), y + (row*2), color);
 c101c30:	e55b300e 	ldrb	r3, [fp, #-14]
 c101c34:	e1a03803 	lsl	r3, r3, #16
 c101c38:	e1a03823 	lsr	r3, r3, #16
 c101c3c:	e1a03083 	lsl	r3, r3, #1
 c101c40:	e1a03803 	lsl	r3, r3, #16
 c101c44:	e1a02823 	lsr	r2, r3, #16
 c101c48:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101c4c:	e0823003 	add	r3, r2, r3
 c101c50:	e1a03803 	lsl	r3, r3, #16
 c101c54:	e1a01823 	lsr	r1, r3, #16
 c101c58:	e55b300d 	ldrb	r3, [fp, #-13]
 c101c5c:	e1a03803 	lsl	r3, r3, #16
 c101c60:	e1a03823 	lsr	r3, r3, #16
 c101c64:	e1a03083 	lsl	r3, r3, #1
 c101c68:	e1a03803 	lsl	r3, r3, #16
 c101c6c:	e1a02823 	lsr	r2, r3, #16
 c101c70:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101c74:	e0823003 	add	r3, r2, r3
 c101c78:	e1a03803 	lsl	r3, r3, #16
 c101c7c:	e1a02823 	lsr	r2, r3, #16
 c101c80:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c101c84:	e1a00001 	mov	r0, r1
 c101c88:	e1a01002 	mov	r1, r2
 c101c8c:	e1a02003 	mov	r2, r3
 c101c90:	ebfffd7e 	bl	c101290 <lcd_putpixel>
            	lcd_putpixel(x + (col*2) + 1, y + (row*2), color);
 c101c94:	e55b300e 	ldrb	r3, [fp, #-14]
 c101c98:	e1a03803 	lsl	r3, r3, #16
 c101c9c:	e1a03823 	lsr	r3, r3, #16
 c101ca0:	e1a03083 	lsl	r3, r3, #1
 c101ca4:	e1a03803 	lsl	r3, r3, #16
 c101ca8:	e1a02823 	lsr	r2, r3, #16
 c101cac:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101cb0:	e0823003 	add	r3, r2, r3
 c101cb4:	e1a03803 	lsl	r3, r3, #16
 c101cb8:	e1a03823 	lsr	r3, r3, #16
 c101cbc:	e2833001 	add	r3, r3, #1
 c101cc0:	e1a03803 	lsl	r3, r3, #16
 c101cc4:	e1a01823 	lsr	r1, r3, #16
 c101cc8:	e55b300d 	ldrb	r3, [fp, #-13]
 c101ccc:	e1a03803 	lsl	r3, r3, #16
 c101cd0:	e1a03823 	lsr	r3, r3, #16
 c101cd4:	e1a03083 	lsl	r3, r3, #1
 c101cd8:	e1a03803 	lsl	r3, r3, #16
 c101cdc:	e1a02823 	lsr	r2, r3, #16
 c101ce0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101ce4:	e0823003 	add	r3, r2, r3
 c101ce8:	e1a03803 	lsl	r3, r3, #16
 c101cec:	e1a02823 	lsr	r2, r3, #16
 c101cf0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c101cf4:	e1a00001 	mov	r0, r1
 c101cf8:	e1a01002 	mov	r1, r2
 c101cfc:	e1a02003 	mov	r2, r3
 c101d00:	ebfffd62 	bl	c101290 <lcd_putpixel>
            	lcd_putpixel(x + (col*2) , y + (row*2) + 1, color);
 c101d04:	e55b300e 	ldrb	r3, [fp, #-14]
 c101d08:	e1a03803 	lsl	r3, r3, #16
 c101d0c:	e1a03823 	lsr	r3, r3, #16
 c101d10:	e1a03083 	lsl	r3, r3, #1
 c101d14:	e1a03803 	lsl	r3, r3, #16
 c101d18:	e1a02823 	lsr	r2, r3, #16
 c101d1c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101d20:	e0823003 	add	r3, r2, r3
 c101d24:	e1a03803 	lsl	r3, r3, #16
 c101d28:	e1a01823 	lsr	r1, r3, #16
 c101d2c:	e55b300d 	ldrb	r3, [fp, #-13]
 c101d30:	e1a03803 	lsl	r3, r3, #16
 c101d34:	e1a03823 	lsr	r3, r3, #16
 c101d38:	e1a03083 	lsl	r3, r3, #1
 c101d3c:	e1a03803 	lsl	r3, r3, #16
 c101d40:	e1a02823 	lsr	r2, r3, #16
 c101d44:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101d48:	e0823003 	add	r3, r2, r3
 c101d4c:	e1a03803 	lsl	r3, r3, #16
 c101d50:	e1a03823 	lsr	r3, r3, #16
 c101d54:	e2833001 	add	r3, r3, #1
 c101d58:	e1a03803 	lsl	r3, r3, #16
 c101d5c:	e1a02823 	lsr	r2, r3, #16
 c101d60:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c101d64:	e1a00001 	mov	r0, r1
 c101d68:	e1a01002 	mov	r1, r2
 c101d6c:	e1a02003 	mov	r2, r3
 c101d70:	ebfffd46 	bl	c101290 <lcd_putpixel>
            	lcd_putpixel(x + (col*2) + 1, y + (row*2) + 1, color);
 c101d74:	e55b300e 	ldrb	r3, [fp, #-14]
 c101d78:	e1a03803 	lsl	r3, r3, #16
 c101d7c:	e1a03823 	lsr	r3, r3, #16
 c101d80:	e1a03083 	lsl	r3, r3, #1
 c101d84:	e1a03803 	lsl	r3, r3, #16
 c101d88:	e1a02823 	lsr	r2, r3, #16
 c101d8c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101d90:	e0823003 	add	r3, r2, r3
 c101d94:	e1a03803 	lsl	r3, r3, #16
 c101d98:	e1a03823 	lsr	r3, r3, #16
 c101d9c:	e2833001 	add	r3, r3, #1
 c101da0:	e1a03803 	lsl	r3, r3, #16
 c101da4:	e1a01823 	lsr	r1, r3, #16
 c101da8:	e55b300d 	ldrb	r3, [fp, #-13]
 c101dac:	e1a03803 	lsl	r3, r3, #16
 c101db0:	e1a03823 	lsr	r3, r3, #16
 c101db4:	e1a03083 	lsl	r3, r3, #1
 c101db8:	e1a03803 	lsl	r3, r3, #16
 c101dbc:	e1a02823 	lsr	r2, r3, #16
 c101dc0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101dc4:	e0823003 	add	r3, r2, r3
 c101dc8:	e1a03803 	lsl	r3, r3, #16
 c101dcc:	e1a03823 	lsr	r3, r3, #16
 c101dd0:	e2833001 	add	r3, r3, #1
 c101dd4:	e1a03803 	lsl	r3, r3, #16
 c101dd8:	e1a02823 	lsr	r2, r3, #16
 c101ddc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c101de0:	e1a00001 	mov	r0, r1
 c101de4:	e1a01002 	mov	r1, r2
 c101de8:	e1a02003 	mov	r2, r3
 c101dec:	ebfffd27 	bl	c101290 <lcd_putpixel>
 c101df0:	ea00006b 	b	c101fa4 <lcd_putchar_x2+0x3f0>
            }
            else{
            	lcd_putpixel(x + (col*2), y + (row*2), WHITE);
 c101df4:	e55b300e 	ldrb	r3, [fp, #-14]
 c101df8:	e1a03803 	lsl	r3, r3, #16
 c101dfc:	e1a03823 	lsr	r3, r3, #16
 c101e00:	e1a03083 	lsl	r3, r3, #1
 c101e04:	e1a03803 	lsl	r3, r3, #16
 c101e08:	e1a02823 	lsr	r2, r3, #16
 c101e0c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101e10:	e0823003 	add	r3, r2, r3
 c101e14:	e1a03803 	lsl	r3, r3, #16
 c101e18:	e1a02823 	lsr	r2, r3, #16
 c101e1c:	e55b300d 	ldrb	r3, [fp, #-13]
 c101e20:	e1a03803 	lsl	r3, r3, #16
 c101e24:	e1a03823 	lsr	r3, r3, #16
 c101e28:	e1a03083 	lsl	r3, r3, #1
 c101e2c:	e1a03803 	lsl	r3, r3, #16
 c101e30:	e1a01823 	lsr	r1, r3, #16
 c101e34:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101e38:	e0813003 	add	r3, r1, r3
 c101e3c:	e1a03803 	lsl	r3, r3, #16
 c101e40:	e1a03823 	lsr	r3, r3, #16
 c101e44:	e1a00002 	mov	r0, r2
 c101e48:	e1a01003 	mov	r1, r3
 c101e4c:	e3a02000 	mov	r2, #0
 c101e50:	ebfffd0e 	bl	c101290 <lcd_putpixel>
            	lcd_putpixel(x + (col*2) + 1, y + (row*2), WHITE);
 c101e54:	e55b300e 	ldrb	r3, [fp, #-14]
 c101e58:	e1a03803 	lsl	r3, r3, #16
 c101e5c:	e1a03823 	lsr	r3, r3, #16
 c101e60:	e1a03083 	lsl	r3, r3, #1
 c101e64:	e1a03803 	lsl	r3, r3, #16
 c101e68:	e1a02823 	lsr	r2, r3, #16
 c101e6c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101e70:	e0823003 	add	r3, r2, r3
 c101e74:	e1a03803 	lsl	r3, r3, #16
 c101e78:	e1a03823 	lsr	r3, r3, #16
 c101e7c:	e2833001 	add	r3, r3, #1
 c101e80:	e1a03803 	lsl	r3, r3, #16
 c101e84:	e1a02823 	lsr	r2, r3, #16
 c101e88:	e55b300d 	ldrb	r3, [fp, #-13]
 c101e8c:	e1a03803 	lsl	r3, r3, #16
 c101e90:	e1a03823 	lsr	r3, r3, #16
 c101e94:	e1a03083 	lsl	r3, r3, #1
 c101e98:	e1a03803 	lsl	r3, r3, #16
 c101e9c:	e1a01823 	lsr	r1, r3, #16
 c101ea0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101ea4:	e0813003 	add	r3, r1, r3
 c101ea8:	e1a03803 	lsl	r3, r3, #16
 c101eac:	e1a03823 	lsr	r3, r3, #16
 c101eb0:	e1a00002 	mov	r0, r2
 c101eb4:	e1a01003 	mov	r1, r3
 c101eb8:	e3a02000 	mov	r2, #0
 c101ebc:	ebfffcf3 	bl	c101290 <lcd_putpixel>
            	lcd_putpixel(x + (col*2) , y + (row*2) + 1, WHITE);
 c101ec0:	e55b300e 	ldrb	r3, [fp, #-14]
 c101ec4:	e1a03803 	lsl	r3, r3, #16
 c101ec8:	e1a03823 	lsr	r3, r3, #16
 c101ecc:	e1a03083 	lsl	r3, r3, #1
 c101ed0:	e1a03803 	lsl	r3, r3, #16
 c101ed4:	e1a02823 	lsr	r2, r3, #16
 c101ed8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101edc:	e0823003 	add	r3, r2, r3
 c101ee0:	e1a03803 	lsl	r3, r3, #16
 c101ee4:	e1a02823 	lsr	r2, r3, #16
 c101ee8:	e55b300d 	ldrb	r3, [fp, #-13]
 c101eec:	e1a03803 	lsl	r3, r3, #16
 c101ef0:	e1a03823 	lsr	r3, r3, #16
 c101ef4:	e1a03083 	lsl	r3, r3, #1
 c101ef8:	e1a03803 	lsl	r3, r3, #16
 c101efc:	e1a01823 	lsr	r1, r3, #16
 c101f00:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101f04:	e0813003 	add	r3, r1, r3
 c101f08:	e1a03803 	lsl	r3, r3, #16
 c101f0c:	e1a03823 	lsr	r3, r3, #16
 c101f10:	e2833001 	add	r3, r3, #1
 c101f14:	e1a03803 	lsl	r3, r3, #16
 c101f18:	e1a03823 	lsr	r3, r3, #16
 c101f1c:	e1a00002 	mov	r0, r2
 c101f20:	e1a01003 	mov	r1, r3
 c101f24:	e3a02000 	mov	r2, #0
 c101f28:	ebfffcd8 	bl	c101290 <lcd_putpixel>
            	lcd_putpixel(x + (col*2) + 1, y + (row*2) + 1, WHITE);
 c101f2c:	e55b300e 	ldrb	r3, [fp, #-14]
 c101f30:	e1a03803 	lsl	r3, r3, #16
 c101f34:	e1a03823 	lsr	r3, r3, #16
 c101f38:	e1a03083 	lsl	r3, r3, #1
 c101f3c:	e1a03803 	lsl	r3, r3, #16
 c101f40:	e1a02823 	lsr	r2, r3, #16
 c101f44:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101f48:	e0823003 	add	r3, r2, r3
 c101f4c:	e1a03803 	lsl	r3, r3, #16
 c101f50:	e1a03823 	lsr	r3, r3, #16
 c101f54:	e2833001 	add	r3, r3, #1
 c101f58:	e1a03803 	lsl	r3, r3, #16
 c101f5c:	e1a02823 	lsr	r2, r3, #16
 c101f60:	e55b300d 	ldrb	r3, [fp, #-13]
 c101f64:	e1a03803 	lsl	r3, r3, #16
 c101f68:	e1a03823 	lsr	r3, r3, #16
 c101f6c:	e1a03083 	lsl	r3, r3, #1
 c101f70:	e1a03803 	lsl	r3, r3, #16
 c101f74:	e1a01823 	lsr	r1, r3, #16
 c101f78:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101f7c:	e0813003 	add	r3, r1, r3
 c101f80:	e1a03803 	lsl	r3, r3, #16
 c101f84:	e1a03823 	lsr	r3, r3, #16
 c101f88:	e2833001 	add	r3, r3, #1
 c101f8c:	e1a03803 	lsl	r3, r3, #16
 c101f90:	e1a03823 	lsr	r3, r3, #16
 c101f94:	e1a00002 	mov	r0, r2
 c101f98:	e1a01003 	mov	r1, r3
 c101f9c:	e3a02000 	mov	r2, #0
 c101fa0:	ebfffcba 	bl	c101290 <lcd_putpixel>
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++){
        for( col=0; col<8; col++) {
 c101fa4:	e55b300e 	ldrb	r3, [fp, #-14]
 c101fa8:	e2833001 	add	r3, r3, #1
 c101fac:	e54b300e 	strb	r3, [fp, #-14]
 c101fb0:	e55b300e 	ldrb	r3, [fp, #-14]
 c101fb4:	e3530007 	cmp	r3, #7
 c101fb8:	9affff11 	bls	c101c04 <lcd_putchar_x2+0x50>
void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch ){
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++){
 c101fbc:	e55b300d 	ldrb	r3, [fp, #-13]
 c101fc0:	e2833001 	add	r3, r3, #1
 c101fc4:	e54b300d 	strb	r3, [fp, #-13]
 c101fc8:	e55b300d 	ldrb	r3, [fp, #-13]
 c101fcc:	e353000f 	cmp	r3, #15
 c101fd0:	9affff08 	bls	c101bf8 <lcd_putchar_x2+0x44>
            	lcd_putpixel(x + (col*2) , y + (row*2) + 1, WHITE);
            	lcd_putpixel(x + (col*2) + 1, y + (row*2) + 1, WHITE);
            }
        }
    }
}
 c101fd4:	e24bd00c 	sub	sp, fp, #12
 c101fd8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101fdc:	e12fff1e 	bx	lr
 c101fe0:	0c105e8c 	.word	0x0c105e8c

0c101fe4 <lcd_puts_x2>:

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s ){
 c101fe4:	e1a0c00d 	mov	ip, sp
 c101fe8:	e92dd800 	push	{fp, ip, lr, pc}
 c101fec:	e24cb004 	sub	fp, ip, #4
 c101ff0:	e24dd018 	sub	sp, sp, #24
 c101ff4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c101ff8:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c101ffc:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c102000:	e1a03002 	mov	r3, r2
 c102004:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int i = 0;
 c102008:	e3a03000 	mov	r3, #0
 c10200c:	e50b3010 	str	r3, [fp, #-16]
	while(s[i] != '\0'){
 c102010:	ea00000d 	b	c10204c <lcd_puts_x2+0x68>
		lcd_putchar_x2(x,y,color,s[i]);
 c102014:	e51b3010 	ldr	r3, [fp, #-16]
 c102018:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10201c:	e0823003 	add	r3, r2, r3
 c102020:	e5d33000 	ldrb	r3, [r3]
 c102024:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
 c102028:	e15b11b8 	ldrh	r1, [fp, #-24]	; 0xffffffe8
 c10202c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c102030:	ebfffedf 	bl	c101bb4 <lcd_putchar_x2>
		x = x+16;
 c102034:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c102038:	e2833010 	add	r3, r3, #16
 c10203c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
		i++;
 c102040:	e51b3010 	ldr	r3, [fp, #-16]
 c102044:	e2833001 	add	r3, r3, #1
 c102048:	e50b3010 	str	r3, [fp, #-16]
    }
}

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s ){
	int i = 0;
	while(s[i] != '\0'){
 c10204c:	e51b3010 	ldr	r3, [fp, #-16]
 c102050:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102054:	e0823003 	add	r3, r2, r3
 c102058:	e5d33000 	ldrb	r3, [r3]
 c10205c:	e3530000 	cmp	r3, #0
 c102060:	1affffeb 	bne	c102014 <lcd_puts_x2+0x30>
		lcd_putchar_x2(x,y,color,s[i]);
		x = x+16;
		i++;
	}
}
 c102064:	e24bd00c 	sub	sp, fp, #12
 c102068:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10206c:	e12fff1e 	bx	lr

0c102070 <lcd_putint_x2>:

void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i ){
 c102070:	e1a0c00d 	mov	ip, sp
 c102074:	e92dd800 	push	{fp, ip, lr, pc}
 c102078:	e24cb004 	sub	fp, ip, #4
 c10207c:	e24dd028 	sub	sp, sp, #40	; 0x28
 c102080:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c102084:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c102088:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c10208c:	e1a03002 	mov	r3, r2
 c102090:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	char buf[10 + 1 + 1];
	char *p = buf+11;
 c102094:	e24b3020 	sub	r3, fp, #32
 c102098:	e283300b 	add	r3, r3, #11
 c10209c:	e50b3010 	str	r3, [fp, #-16]
	uint8 signo;//0 es negativo
	uint8 c;
	*p = '\0';
 c1020a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1020a4:	e3a02000 	mov	r2, #0
 c1020a8:	e5c32000 	strb	r2, [r3]

	if(i<0){
 c1020ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c1020b0:	e3530000 	cmp	r3, #0
 c1020b4:	aa000005 	bge	c1020d0 <lcd_putint_x2+0x60>
		signo = 0;
 c1020b8:	e3a03000 	mov	r3, #0
 c1020bc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i *= -1;
 c1020c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c1020c4:	e2633000 	rsb	r3, r3, #0
 c1020c8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c1020cc:	ea000001 	b	c1020d8 <lcd_putint_x2+0x68>
	}
	else{
		signo = 1;
 c1020d0:	e3a03001 	mov	r3, #1
 c1020d4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	}

	do{
		c = i%10;
 c1020d8:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
 c1020dc:	e59f30c0 	ldr	r3, [pc, #192]	; c1021a4 <lcd_putint_x2+0x134>
 c1020e0:	e0c32391 	smull	r2, r3, r1, r3
 c1020e4:	e1a02143 	asr	r2, r3, #2
 c1020e8:	e1a03fc1 	asr	r3, r1, #31
 c1020ec:	e0632002 	rsb	r2, r3, r2
 c1020f0:	e1a03002 	mov	r3, r2
 c1020f4:	e1a03103 	lsl	r3, r3, #2
 c1020f8:	e0833002 	add	r3, r3, r2
 c1020fc:	e1a03083 	lsl	r3, r3, #1
 c102100:	e0632001 	rsb	r2, r3, r1
 c102104:	e1a03002 	mov	r3, r2
 c102108:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		i = i/10;
 c10210c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c102110:	e59f208c 	ldr	r2, [pc, #140]	; c1021a4 <lcd_putint_x2+0x134>
 c102114:	e0c21293 	smull	r1, r2, r3, r2
 c102118:	e1a02142 	asr	r2, r2, #2
 c10211c:	e1a03fc3 	asr	r3, r3, #31
 c102120:	e0633002 	rsb	r3, r3, r2
 c102124:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
		*--p= c + '0';
 c102128:	e51b3010 	ldr	r3, [fp, #-16]
 c10212c:	e2433001 	sub	r3, r3, #1
 c102130:	e50b3010 	str	r3, [fp, #-16]
 c102134:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c102138:	e2833030 	add	r3, r3, #48	; 0x30
 c10213c:	e20320ff 	and	r2, r3, #255	; 0xff
 c102140:	e51b3010 	ldr	r3, [fp, #-16]
 c102144:	e5c32000 	strb	r2, [r3]
	}while(i);
 c102148:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10214c:	e3530000 	cmp	r3, #0
 c102150:	1affffe0 	bne	c1020d8 <lcd_putint_x2+0x68>

	if(!signo){
 c102154:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102158:	e3530000 	cmp	r3, #0
 c10215c:	1a000005 	bne	c102178 <lcd_putint_x2+0x108>
		*--p= '-';
 c102160:	e51b3010 	ldr	r3, [fp, #-16]
 c102164:	e2433001 	sub	r3, r3, #1
 c102168:	e50b3010 	str	r3, [fp, #-16]
 c10216c:	e51b3010 	ldr	r3, [fp, #-16]
 c102170:	e3a0202d 	mov	r2, #45	; 0x2d
 c102174:	e5c32000 	strb	r2, [r3]
	}

	lcd_puts_x2(x,y,color,p);
 c102178:	e15b12b6 	ldrh	r1, [fp, #-38]	; 0xffffffda
 c10217c:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
 c102180:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c102184:	e1a00001 	mov	r0, r1
 c102188:	e1a01002 	mov	r1, r2
 c10218c:	e1a02003 	mov	r2, r3
 c102190:	e51b3010 	ldr	r3, [fp, #-16]
 c102194:	ebffff92 	bl	c101fe4 <lcd_puts_x2>
}
 c102198:	e24bd00c 	sub	sp, fp, #12
 c10219c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1021a0:	e12fff1e 	bx	lr
 c1021a4:	66666667 	.word	0x66666667

0c1021a8 <lcd_puthex_x2>:

void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i ){
 c1021a8:	e1a0c00d 	mov	ip, sp
 c1021ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1021b0:	e24cb004 	sub	fp, ip, #4
 c1021b4:	e24dd020 	sub	sp, sp, #32
 c1021b8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c1021bc:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c1021c0:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c1021c4:	e1a03002 	mov	r3, r2
 c1021c8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    char buf[8 + 1];
    char *p = buf + 8;
 c1021cc:	e24b301c 	sub	r3, fp, #28
 c1021d0:	e2833008 	add	r3, r3, #8
 c1021d4:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c1021d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1021dc:	e3a02000 	mov	r2, #0
 c1021e0:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c1021e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1021e8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1021ec:	e203300f 	and	r3, r3, #15
 c1021f0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c1021f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1021f8:	e3530009 	cmp	r3, #9
 c1021fc:	8a000008 	bhi	c102224 <lcd_puthex_x2+0x7c>
            *--p = '0' + c;
 c102200:	e51b3010 	ldr	r3, [fp, #-16]
 c102204:	e2433001 	sub	r3, r3, #1
 c102208:	e50b3010 	str	r3, [fp, #-16]
 c10220c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102210:	e2833030 	add	r3, r3, #48	; 0x30
 c102214:	e20320ff 	and	r2, r3, #255	; 0xff
 c102218:	e51b3010 	ldr	r3, [fp, #-16]
 c10221c:	e5c32000 	strb	r2, [r3]
 c102220:	ea000007 	b	c102244 <lcd_puthex_x2+0x9c>
        else
            *--p = 'a' + c - 10;
 c102224:	e51b3010 	ldr	r3, [fp, #-16]
 c102228:	e2433001 	sub	r3, r3, #1
 c10222c:	e50b3010 	str	r3, [fp, #-16]
 c102230:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102234:	e2833057 	add	r3, r3, #87	; 0x57
 c102238:	e20320ff 	and	r2, r3, #255	; 0xff
 c10223c:	e51b3010 	ldr	r3, [fp, #-16]
 c102240:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c102244:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102248:	e1a03223 	lsr	r3, r3, #4
 c10224c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i );
 c102250:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102254:	e3530000 	cmp	r3, #0
 c102258:	1affffe1 	bne	c1021e4 <lcd_puthex_x2+0x3c>
	lcd_puts_x2(x,y,color,p);
 c10225c:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c102260:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c102264:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c102268:	e1a00001 	mov	r0, r1
 c10226c:	e1a01002 	mov	r1, r2
 c102270:	e1a02003 	mov	r2, r3
 c102274:	e51b3010 	ldr	r3, [fp, #-16]
 c102278:	ebffff59 	bl	c101fe4 <lcd_puts_x2>
}
 c10227c:	e24bd00c 	sub	sp, fp, #12
 c102280:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102284:	e12fff1e 	bx	lr

0c102288 <leds_init>:
#include <s3c44b0x.h>
#include <leds.h>

void leds_init( void )
{
 c102288:	e1a0c00d 	mov	ip, sp
 c10228c:	e92dd800 	push	{fp, ip, lr, pc}
 c102290:	e24cb004 	sub	fp, ip, #4
    led_off(LEFT_LED);
 c102294:	e3a00001 	mov	r0, #1
 c102298:	eb000016 	bl	c1022f8 <led_off>
    led_off(RIGHT_LED);
 c10229c:	e3a00002 	mov	r0, #2
 c1022a0:	eb000014 	bl	c1022f8 <led_off>
}
 c1022a4:	e24bd00c 	sub	sp, fp, #12
 c1022a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1022ac:	e12fff1e 	bx	lr

0c1022b0 <led_on>:

void led_on( uint8 led )
{
 c1022b0:	e1a0c00d 	mov	ip, sp
 c1022b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1022b8:	e24cb004 	sub	fp, ip, #4
 c1022bc:	e24dd008 	sub	sp, sp, #8
 c1022c0:	e1a03000 	mov	r3, r0
 c1022c4:	e54b300d 	strb	r3, [fp, #-13]
	PDATB &=~(led<<9);
 c1022c8:	e59f3024 	ldr	r3, [pc, #36]	; c1022f4 <led_on+0x44>
 c1022cc:	e59f2020 	ldr	r2, [pc, #32]	; c1022f4 <led_on+0x44>
 c1022d0:	e5921000 	ldr	r1, [r2]
 c1022d4:	e55b200d 	ldrb	r2, [fp, #-13]
 c1022d8:	e1a02482 	lsl	r2, r2, #9
 c1022dc:	e1e02002 	mvn	r2, r2
 c1022e0:	e0012002 	and	r2, r1, r2
 c1022e4:	e5832000 	str	r2, [r3]
}
 c1022e8:	e24bd00c 	sub	sp, fp, #12
 c1022ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1022f0:	e12fff1e 	bx	lr
 c1022f4:	01d2000c 	.word	0x01d2000c

0c1022f8 <led_off>:

void led_off( uint8 led )
{
 c1022f8:	e1a0c00d 	mov	ip, sp
 c1022fc:	e92dd800 	push	{fp, ip, lr, pc}
 c102300:	e24cb004 	sub	fp, ip, #4
 c102304:	e24dd008 	sub	sp, sp, #8
 c102308:	e1a03000 	mov	r3, r0
 c10230c:	e54b300d 	strb	r3, [fp, #-13]
	PDATB |= led<<9;
 c102310:	e59f3020 	ldr	r3, [pc, #32]	; c102338 <led_off+0x40>
 c102314:	e59f201c 	ldr	r2, [pc, #28]	; c102338 <led_off+0x40>
 c102318:	e5921000 	ldr	r1, [r2]
 c10231c:	e55b200d 	ldrb	r2, [fp, #-13]
 c102320:	e1a02482 	lsl	r2, r2, #9
 c102324:	e1812002 	orr	r2, r1, r2
 c102328:	e5832000 	str	r2, [r3]
}
 c10232c:	e24bd00c 	sub	sp, fp, #12
 c102330:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102334:	e12fff1e 	bx	lr
 c102338:	01d2000c 	.word	0x01d2000c

0c10233c <led_toggle>:

void led_toggle( uint8 led )
{
 c10233c:	e1a0c00d 	mov	ip, sp
 c102340:	e92dd800 	push	{fp, ip, lr, pc}
 c102344:	e24cb004 	sub	fp, ip, #4
 c102348:	e24dd010 	sub	sp, sp, #16
 c10234c:	e1a03000 	mov	r3, r0
 c102350:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    uint8 st = led_status(led);
 c102354:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102358:	e1a00003 	mov	r0, r3
 c10235c:	eb00000e 	bl	c10239c <led_status>
 c102360:	e1a03000 	mov	r3, r0
 c102364:	e54b300d 	strb	r3, [fp, #-13]
    if(st == 0){
 c102368:	e55b300d 	ldrb	r3, [fp, #-13]
 c10236c:	e3530000 	cmp	r3, #0
 c102370:	1a000003 	bne	c102384 <led_toggle+0x48>
    	led_on(led);
 c102374:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102378:	e1a00003 	mov	r0, r3
 c10237c:	ebffffcb 	bl	c1022b0 <led_on>
 c102380:	ea000002 	b	c102390 <led_toggle+0x54>
    }
    else{
    	led_off(led);
 c102384:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102388:	e1a00003 	mov	r0, r3
 c10238c:	ebffffd9 	bl	c1022f8 <led_off>
    }
}
 c102390:	e24bd00c 	sub	sp, fp, #12
 c102394:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102398:	e12fff1e 	bx	lr

0c10239c <led_status>:

uint8 led_status( uint8 led )
{
 c10239c:	e1a0c00d 	mov	ip, sp
 c1023a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1023a4:	e24cb004 	sub	fp, ip, #4
 c1023a8:	e24dd008 	sub	sp, sp, #8
 c1023ac:	e1a03000 	mov	r3, r0
 c1023b0:	e54b300d 	strb	r3, [fp, #-13]
	if(PDATB&(1<<led+8)){
 c1023b4:	e59f3038 	ldr	r3, [pc, #56]	; c1023f4 <led_status+0x58>
 c1023b8:	e5932000 	ldr	r2, [r3]
 c1023bc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1023c0:	e2833008 	add	r3, r3, #8
 c1023c4:	e3a01001 	mov	r1, #1
 c1023c8:	e1a03311 	lsl	r3, r1, r3
 c1023cc:	e0023003 	and	r3, r2, r3
 c1023d0:	e3530000 	cmp	r3, #0
 c1023d4:	0a000001 	beq	c1023e0 <led_status+0x44>
		return 0;
 c1023d8:	e3a03000 	mov	r3, #0
 c1023dc:	ea000000 	b	c1023e4 <led_status+0x48>
	}
	else{
		return 1;
 c1023e0:	e3a03001 	mov	r3, #1
	}
}
 c1023e4:	e1a00003 	mov	r0, r3
 c1023e8:	e24bd00c 	sub	sp, fp, #12
 c1023ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1023f0:	e12fff1e 	bx	lr
 c1023f4:	01d2000c 	.word	0x01d2000c

0c1023f8 <pbs_init>:
#include <timers.h>

extern void isr_PB_dummy( void );

void pbs_init( void )
{
 c1023f8:	e1a0c00d 	mov	ip, sp
 c1023fc:	e92dd800 	push	{fp, ip, lr, pc}
 c102400:	e24cb004 	sub	fp, ip, #4
    timers_init();
 c102404:	eb0005f0 	bl	c103bcc <timers_init>
}
 c102408:	e24bd00c 	sub	sp, fp, #12
 c10240c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102410:	e12fff1e 	bx	lr

0c102414 <pb_scan>:

uint8 pb_scan( void )
{
 c102414:	e1a0c00d 	mov	ip, sp
 c102418:	e92dd800 	push	{fp, ip, lr, pc}
 c10241c:	e24cb004 	sub	fp, ip, #4
    if( (PDATG&PB_LEFT)==PB_UP )
 c102420:	e59f3044 	ldr	r3, [pc, #68]	; c10246c <pb_scan+0x58>
 c102424:	e5933000 	ldr	r3, [r3]
 c102428:	e2033040 	and	r3, r3, #64	; 0x40
 c10242c:	e3530000 	cmp	r3, #0
 c102430:	1a000001 	bne	c10243c <pb_scan+0x28>
        return PB_LEFT;
 c102434:	e3a03040 	mov	r3, #64	; 0x40
 c102438:	ea000007 	b	c10245c <pb_scan+0x48>
    else if( (PDATG&PB_RIGHT)==PB_UP )
 c10243c:	e59f3028 	ldr	r3, [pc, #40]	; c10246c <pb_scan+0x58>
 c102440:	e5933000 	ldr	r3, [r3]
 c102444:	e2033080 	and	r3, r3, #128	; 0x80
 c102448:	e3530000 	cmp	r3, #0
 c10244c:	1a000001 	bne	c102458 <pb_scan+0x44>
        return PB_RIGHT;
 c102450:	e3a03080 	mov	r3, #128	; 0x80
 c102454:	ea000000 	b	c10245c <pb_scan+0x48>
    else
        return PB_FAILURE;
 c102458:	e3a030ff 	mov	r3, #255	; 0xff
}
 c10245c:	e1a00003 	mov	r0, r3
 c102460:	e24bd00c 	sub	sp, fp, #12
 c102464:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102468:	e12fff1e 	bx	lr
 c10246c:	01d20044 	.word	0x01d20044

0c102470 <pb_pressed>:

uint8 pb_pressed( void )
{
 c102470:	e1a0c00d 	mov	ip, sp
 c102474:	e92dd800 	push	{fp, ip, lr, pc}
 c102478:	e24cb004 	sub	fp, ip, #4
	if( pb_scan() == PB_FAILURE)
 c10247c:	ebffffe4 	bl	c102414 <pb_scan>
 c102480:	e1a03000 	mov	r3, r0
 c102484:	e35300ff 	cmp	r3, #255	; 0xff
 c102488:	1a000001 	bne	c102494 <pb_pressed+0x24>
		return 0;
 c10248c:	e3a03000 	mov	r3, #0
 c102490:	ea000000 	b	c102498 <pb_pressed+0x28>
	return 1;
 c102494:	e3a03001 	mov	r3, #1
}
 c102498:	e1a00003 	mov	r0, r3
 c10249c:	e24bd00c 	sub	sp, fp, #12
 c1024a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1024a4:	e12fff1e 	bx	lr

0c1024a8 <pb_getchar>:

uint8 pb_getchar( void ){
 c1024a8:	e1a0c00d 	mov	ip, sp
 c1024ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1024b0:	e24cb004 	sub	fp, ip, #4
 c1024b4:	e24dd008 	sub	sp, sp, #8
	uint8 s;
    while((PDATG&PB_LEFT));
 c1024b8:	e1a00000 	nop			; (mov r0, r0)
 c1024bc:	e59f3054 	ldr	r3, [pc, #84]	; c102518 <pb_getchar+0x70>
 c1024c0:	e5933000 	ldr	r3, [r3]
 c1024c4:	e2033040 	and	r3, r3, #64	; 0x40
 c1024c8:	e3530000 	cmp	r3, #0
 c1024cc:	1afffffa 	bne	c1024bc <pb_getchar+0x14>
    sw_delay_ms( PB_KEYDOWN_DELAY );
 c1024d0:	e3a0001e 	mov	r0, #30
 c1024d4:	eb00066b 	bl	c103e88 <sw_delay_ms>
    s = pb_scan();
 c1024d8:	ebffffcd 	bl	c102414 <pb_scan>
 c1024dc:	e1a03000 	mov	r3, r0
 c1024e0:	e54b300d 	strb	r3, [fp, #-13]
    while(!(PDATG&PB_LEFT));
 c1024e4:	e1a00000 	nop			; (mov r0, r0)
 c1024e8:	e59f3028 	ldr	r3, [pc, #40]	; c102518 <pb_getchar+0x70>
 c1024ec:	e5933000 	ldr	r3, [r3]
 c1024f0:	e2033040 	and	r3, r3, #64	; 0x40
 c1024f4:	e3530000 	cmp	r3, #0
 c1024f8:	0afffffa 	beq	c1024e8 <pb_getchar+0x40>
    sw_delay_ms( PB_KEYUP_DELAY );
 c1024fc:	e3a00064 	mov	r0, #100	; 0x64
 c102500:	eb000660 	bl	c103e88 <sw_delay_ms>
    return s;
 c102504:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c102508:	e1a00003 	mov	r0, r3
 c10250c:	e24bd00c 	sub	sp, fp, #12
 c102510:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102514:	e12fff1e 	bx	lr
 c102518:	01d20044 	.word	0x01d20044

0c10251c <pb_timeout_getchar>:

uint8 pb_timeout_getchar( uint16 ms ){
 c10251c:	e1a0c00d 	mov	ip, sp
 c102520:	e92dd800 	push	{fp, ip, lr, pc}
 c102524:	e24cb004 	sub	fp, ip, #4
 c102528:	e24dd010 	sub	sp, sp, #16
 c10252c:	e1a03000 	mov	r3, r0
 c102530:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 s;
	timer3_start_timeout(ms*10);
 c102534:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c102538:	e1a02003 	mov	r2, r3
 c10253c:	e1a02102 	lsl	r2, r2, #2
 c102540:	e0823003 	add	r3, r2, r3
 c102544:	e1a03083 	lsl	r3, r3, #1
 c102548:	e1a03803 	lsl	r3, r3, #16
 c10254c:	e1a03823 	lsr	r3, r3, #16
 c102550:	e1a00003 	mov	r0, r3
 c102554:	eb0006fa 	bl	c104144 <timer3_start_timeout>

	while(!pb_pressed())
 c102558:	ea000005 	b	c102574 <pb_timeout_getchar+0x58>
		if(timer3_timeout())
 c10255c:	eb000726 	bl	c1041fc <timer3_timeout>
 c102560:	e1a03000 	mov	r3, r0
 c102564:	e3530000 	cmp	r3, #0
 c102568:	0a000001 	beq	c102574 <pb_timeout_getchar+0x58>
			return PB_TIMEOUT;
 c10256c:	e3a030fe 	mov	r3, #254	; 0xfe
 c102570:	ea000018 	b	c1025d8 <pb_timeout_getchar+0xbc>

uint8 pb_timeout_getchar( uint16 ms ){
	uint8 s;
	timer3_start_timeout(ms*10);

	while(!pb_pressed())
 c102574:	ebffffbd 	bl	c102470 <pb_pressed>
 c102578:	e1a03000 	mov	r3, r0
 c10257c:	e3530000 	cmp	r3, #0
 c102580:	0afffff5 	beq	c10255c <pb_timeout_getchar+0x40>
		if(timer3_timeout())
			return PB_TIMEOUT;

	while((PDATG&PB_LEFT) );
 c102584:	e1a00000 	nop			; (mov r0, r0)
 c102588:	e59f3058 	ldr	r3, [pc, #88]	; c1025e8 <pb_timeout_getchar+0xcc>
 c10258c:	e5933000 	ldr	r3, [r3]
 c102590:	e2033040 	and	r3, r3, #64	; 0x40
 c102594:	e3530000 	cmp	r3, #0
 c102598:	1afffffa 	bne	c102588 <pb_timeout_getchar+0x6c>
	timer3_start();
 c10259c:	eb0006a7 	bl	c104040 <timer3_start>
	sw_delay_ms( PB_KEYDOWN_DELAY );
 c1025a0:	e3a0001e 	mov	r0, #30
 c1025a4:	eb000637 	bl	c103e88 <sw_delay_ms>

	s = pb_scan();
 c1025a8:	ebffff99 	bl	c102414 <pb_scan>
 c1025ac:	e1a03000 	mov	r3, r0
 c1025b0:	e54b300d 	strb	r3, [fp, #-13]

	while( (PDATG&PB_LEFT) );
 c1025b4:	e1a00000 	nop			; (mov r0, r0)
 c1025b8:	e59f3028 	ldr	r3, [pc, #40]	; c1025e8 <pb_timeout_getchar+0xcc>
 c1025bc:	e5933000 	ldr	r3, [r3]
 c1025c0:	e2033040 	and	r3, r3, #64	; 0x40
 c1025c4:	e3530000 	cmp	r3, #0
 c1025c8:	1afffffa 	bne	c1025b8 <pb_timeout_getchar+0x9c>
	sw_delay_ms( PB_KEYUP_DELAY );
 c1025cc:	e3a00064 	mov	r0, #100	; 0x64
 c1025d0:	eb00062c 	bl	c103e88 <sw_delay_ms>
	return s;
 c1025d4:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c1025d8:	e1a00003 	mov	r0, r3
 c1025dc:	e24bd00c 	sub	sp, fp, #12
 c1025e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1025e4:	e12fff1e 	bx	lr
 c1025e8:	01d20044 	.word	0x01d20044

0c1025ec <pb_getchartime>:

uint8 pb_getchartime( uint16 *ms )
{
 c1025ec:	e1a0c00d 	mov	ip, sp
 c1025f0:	e92dd800 	push	{fp, ip, lr, pc}
 c1025f4:	e24cb004 	sub	fp, ip, #4
 c1025f8:	e24dd010 	sub	sp, sp, #16
 c1025fc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8 scancode;
    
    while( (PDATG&PB_LEFT) );
 c102600:	e1a00000 	nop			; (mov r0, r0)
 c102604:	e59f3080 	ldr	r3, [pc, #128]	; c10268c <pb_getchartime+0xa0>
 c102608:	e5933000 	ldr	r3, [r3]
 c10260c:	e2033040 	and	r3, r3, #64	; 0x40
 c102610:	e3530000 	cmp	r3, #0
 c102614:	1afffffa 	bne	c102604 <pb_getchartime+0x18>
    timer3_start();
 c102618:	eb000688 	bl	c104040 <timer3_start>
    sw_delay_ms( PB_KEYDOWN_DELAY );
 c10261c:	e3a0001e 	mov	r0, #30
 c102620:	eb000618 	bl	c103e88 <sw_delay_ms>
    
    scancode = pb_scan();
 c102624:	ebffff7a 	bl	c102414 <pb_scan>
 c102628:	e1a03000 	mov	r3, r0
 c10262c:	e54b300d 	strb	r3, [fp, #-13]
    
    while( !(PDATG&PB_LEFT) );
 c102630:	e1a00000 	nop			; (mov r0, r0)
 c102634:	e59f3050 	ldr	r3, [pc, #80]	; c10268c <pb_getchartime+0xa0>
 c102638:	e5933000 	ldr	r3, [r3]
 c10263c:	e2033040 	and	r3, r3, #64	; 0x40
 c102640:	e3530000 	cmp	r3, #0
 c102644:	0afffffa 	beq	c102634 <pb_getchartime+0x48>
    *ms = timer3_stop() / 10;
 c102648:	eb0006a8 	bl	c1040f0 <timer3_stop>
 c10264c:	e1a03000 	mov	r3, r0
 c102650:	e1a02003 	mov	r2, r3
 c102654:	e59f3034 	ldr	r3, [pc, #52]	; c102690 <pb_getchartime+0xa4>
 c102658:	e0831392 	umull	r1, r3, r2, r3
 c10265c:	e1a031a3 	lsr	r3, r3, #3
 c102660:	e1a03803 	lsl	r3, r3, #16
 c102664:	e1a02823 	lsr	r2, r3, #16
 c102668:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10266c:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( PB_KEYUP_DELAY );
 c102670:	e3a00064 	mov	r0, #100	; 0x64
 c102674:	eb000603 	bl	c103e88 <sw_delay_ms>

    return scancode;
 c102678:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c10267c:	e1a00003 	mov	r0, r3
 c102680:	e24bd00c 	sub	sp, fp, #12
 c102684:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102688:	e12fff1e 	bx	lr
 c10268c:	01d20044 	.word	0x01d20044
 c102690:	cccccccd 	.word	0xcccccccd

0c102694 <pbs_open>:

void pbs_open( void (*isr)(void) )
{
 c102694:	e1a0c00d 	mov	ip, sp
 c102698:	e92dd800 	push	{fp, ip, lr, pc}
 c10269c:	e24cb004 	sub	fp, ip, #4
 c1026a0:	e24dd008 	sub	sp, sp, #8
 c1026a4:	e50b0010 	str	r0, [fp, #-16]
    pISR_PB   = (uint32) isr;
 c1026a8:	e59f303c 	ldr	r3, [pc, #60]	; c1026ec <pbs_open+0x58>
 c1026ac:	e51b2010 	ldr	r2, [fp, #-16]
 c1026b0:	e5832000 	str	r2, [r3]
    EXTINTPND = PB_LEFT | PB_RIGHT;// no estoy seguro
 c1026b4:	e59f3034 	ldr	r3, [pc, #52]	; c1026f0 <pbs_open+0x5c>
 c1026b8:	e3a020c0 	mov	r2, #192	; 0xc0
 c1026bc:	e5832000 	str	r2, [r3]
    I_ISPC    = BIT_PB;
 c1026c0:	e59f302c 	ldr	r3, [pc, #44]	; c1026f4 <pbs_open+0x60>
 c1026c4:	e3a02602 	mov	r2, #2097152	; 0x200000
 c1026c8:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_PB);
 c1026cc:	e59f3024 	ldr	r3, [pc, #36]	; c1026f8 <pbs_open+0x64>
 c1026d0:	e59f2020 	ldr	r2, [pc, #32]	; c1026f8 <pbs_open+0x64>
 c1026d4:	e5922000 	ldr	r2, [r2]
 c1026d8:	e3c22602 	bic	r2, r2, #2097152	; 0x200000
 c1026dc:	e5832000 	str	r2, [r3]
}
 c1026e0:	e24bd00c 	sub	sp, fp, #12
 c1026e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1026e8:	e12fff1e 	bx	lr
 c1026ec:	0c7fff74 	.word	0x0c7fff74
 c1026f0:	01d20054 	.word	0x01d20054
 c1026f4:	01e00024 	.word	0x01e00024
 c1026f8:	01e0000c 	.word	0x01e0000c

0c1026fc <pbs_close>:

void pbs_close( void )
{
 c1026fc:	e1a0c00d 	mov	ip, sp
 c102700:	e92dd800 	push	{fp, ip, lr, pc}
 c102704:	e24cb004 	sub	fp, ip, #4
    INTMSK  |= BIT_PB;
 c102708:	e59f3024 	ldr	r3, [pc, #36]	; c102734 <pbs_close+0x38>
 c10270c:	e59f2020 	ldr	r2, [pc, #32]	; c102734 <pbs_close+0x38>
 c102710:	e5922000 	ldr	r2, [r2]
 c102714:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 c102718:	e5832000 	str	r2, [r3]
    pISR_PB  = (uint32) isr_PB_dummy;
 c10271c:	e59f3014 	ldr	r3, [pc, #20]	; c102738 <pbs_close+0x3c>
 c102720:	e59f2014 	ldr	r2, [pc, #20]	; c10273c <pbs_close+0x40>
 c102724:	e5832000 	str	r2, [r3]
}
 c102728:	e24bd00c 	sub	sp, fp, #12
 c10272c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102730:	e12fff1e 	bx	lr
 c102734:	01e0000c 	.word	0x01e0000c
 c102738:	0c7fff74 	.word	0x0c7fff74
 c10273c:	0c103890 	.word	0x0c103890

0c102740 <dectoBCD>:
#include <s3c44b0x.h>
#include <s3cev40.h>
#include <rtc.h>

extern void isr_TICK_dummy( void );
uint32 dectoBCD(uint32 num){
 c102740:	e1a0c00d 	mov	ip, sp
 c102744:	e92dd800 	push	{fp, ip, lr, pc}
 c102748:	e24cb004 	sub	fp, ip, #4
 c10274c:	e24dd018 	sub	sp, sp, #24
 c102750:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	  uint32 ones = 0;
 c102754:	e3a03000 	mov	r3, #0
 c102758:	e50b3010 	str	r3, [fp, #-16]
	  uint32 tens = 0;
 c10275c:	e3a03000 	mov	r3, #0
 c102760:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	  uint32 temp = 0;
 c102764:	e3a03000 	mov	r3, #0
 c102768:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	  ones = num%10;
 c10276c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102770:	e59f3058 	ldr	r3, [pc, #88]	; c1027d0 <dectoBCD+0x90>
 c102774:	e0831392 	umull	r1, r3, r2, r3
 c102778:	e1a011a3 	lsr	r1, r3, #3
 c10277c:	e1a03001 	mov	r3, r1
 c102780:	e1a03103 	lsl	r3, r3, #2
 c102784:	e0833001 	add	r3, r3, r1
 c102788:	e1a03083 	lsl	r3, r3, #1
 c10278c:	e0633002 	rsb	r3, r3, r2
 c102790:	e50b3010 	str	r3, [fp, #-16]
	  temp = num/10;
 c102794:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102798:	e59f3030 	ldr	r3, [pc, #48]	; c1027d0 <dectoBCD+0x90>
 c10279c:	e0831392 	umull	r1, r3, r2, r3
 c1027a0:	e1a031a3 	lsr	r3, r3, #3
 c1027a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	  tens = temp<<4;
 c1027a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1027ac:	e1a03203 	lsl	r3, r3, #4
 c1027b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	  return (tens + ones);
 c1027b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1027b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1027bc:	e0823003 	add	r3, r2, r3
}
 c1027c0:	e1a00003 	mov	r0, r3
 c1027c4:	e24bd00c 	sub	sp, fp, #12
 c1027c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1027cc:	e12fff1e 	bx	lr
 c1027d0:	cccccccd 	.word	0xcccccccd

0c1027d4 <BCDtodec>:

uint32 BCDtodec(uint32 BCD){
 c1027d4:	e1a0c00d 	mov	ip, sp
 c1027d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1027dc:	e24cb004 	sub	fp, ip, #4
 c1027e0:	e24dd010 	sub	sp, sp, #16
 c1027e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	uint32 result;
	    result=(BCD>>12)*1000;
 c1027e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1027ec:	e1a02623 	lsr	r2, r3, #12
 c1027f0:	e1a03002 	mov	r3, r2
 c1027f4:	e1a03283 	lsl	r3, r3, #5
 c1027f8:	e0623003 	rsb	r3, r2, r3
 c1027fc:	e1a03103 	lsl	r3, r3, #2
 c102800:	e0833002 	add	r3, r3, r2
 c102804:	e1a03183 	lsl	r3, r3, #3
 c102808:	e50b3010 	str	r3, [fp, #-16]
	    result+=((BCD>>8)&0x0f)*100;
 c10280c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102810:	e1a03423 	lsr	r3, r3, #8
 c102814:	e203200f 	and	r2, r3, #15
 c102818:	e1a03002 	mov	r3, r2
 c10281c:	e1a03103 	lsl	r3, r3, #2
 c102820:	e0833002 	add	r3, r3, r2
 c102824:	e1a02103 	lsl	r2, r3, #2
 c102828:	e0833002 	add	r3, r3, r2
 c10282c:	e1a03103 	lsl	r3, r3, #2
 c102830:	e51b2010 	ldr	r2, [fp, #-16]
 c102834:	e0823003 	add	r3, r2, r3
 c102838:	e50b3010 	str	r3, [fp, #-16]
	    result+=((BCD>>4)&0x0f)*10;
 c10283c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102840:	e1a03223 	lsr	r3, r3, #4
 c102844:	e203200f 	and	r2, r3, #15
 c102848:	e1a03002 	mov	r3, r2
 c10284c:	e1a03103 	lsl	r3, r3, #2
 c102850:	e0833002 	add	r3, r3, r2
 c102854:	e1a03083 	lsl	r3, r3, #1
 c102858:	e51b2010 	ldr	r2, [fp, #-16]
 c10285c:	e0823003 	add	r3, r2, r3
 c102860:	e50b3010 	str	r3, [fp, #-16]
	    result+=((BCD)&0x0f);
 c102864:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102868:	e203300f 	and	r3, r3, #15
 c10286c:	e51b2010 	ldr	r2, [fp, #-16]
 c102870:	e0823003 	add	r3, r2, r3
 c102874:	e50b3010 	str	r3, [fp, #-16]
	    return result;
 c102878:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10287c:	e1a00003 	mov	r0, r3
 c102880:	e24bd00c 	sub	sp, fp, #12
 c102884:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102888:	e12fff1e 	bx	lr

0c10288c <rtc_init>:

void rtc_init( void )
{
 c10288c:	e1a0c00d 	mov	ip, sp
 c102890:	e92dd800 	push	{fp, ip, lr, pc}
 c102894:	e24cb004 	sub	fp, ip, #4
    TICNT   = 0x0;
 c102898:	e59f30e4 	ldr	r3, [pc, #228]	; c102984 <rtc_init+0xf8>
 c10289c:	e3a02000 	mov	r2, #0
 c1028a0:	e5832000 	str	r2, [r3]
    RTCALM  = 0x0;
 c1028a4:	e59f30dc 	ldr	r3, [pc, #220]	; c102988 <rtc_init+0xfc>
 c1028a8:	e3a02000 	mov	r2, #0
 c1028ac:	e5832000 	str	r2, [r3]
    RTCRST  = 0x0;
 c1028b0:	e59f30d4 	ldr	r3, [pc, #212]	; c10298c <rtc_init+0x100>
 c1028b4:	e3a02000 	mov	r2, #0
 c1028b8:	e5832000 	str	r2, [r3]
        
    RTCCON  = 0x9;
 c1028bc:	e59f30cc 	ldr	r3, [pc, #204]	; c102990 <rtc_init+0x104>
 c1028c0:	e3a02009 	mov	r2, #9
 c1028c4:	e5832000 	str	r2, [r3]
    
    BCDYEAR = 0xd;
 c1028c8:	e59f30c4 	ldr	r3, [pc, #196]	; c102994 <rtc_init+0x108>
 c1028cc:	e3a0200d 	mov	r2, #13
 c1028d0:	e5832000 	str	r2, [r3]
    BCDMON  = 0x1;
 c1028d4:	e59f30bc 	ldr	r3, [pc, #188]	; c102998 <rtc_init+0x10c>
 c1028d8:	e3a02001 	mov	r2, #1
 c1028dc:	e5832000 	str	r2, [r3]
    BCDDAY  = 0x1;
 c1028e0:	e59f30b4 	ldr	r3, [pc, #180]	; c10299c <rtc_init+0x110>
 c1028e4:	e3a02001 	mov	r2, #1
 c1028e8:	e5832000 	str	r2, [r3]
    BCDDATE = 0x2;
 c1028ec:	e59f30ac 	ldr	r3, [pc, #172]	; c1029a0 <rtc_init+0x114>
 c1028f0:	e3a02002 	mov	r2, #2
 c1028f4:	e5832000 	str	r2, [r3]
    BCDHOUR = 0x0;
 c1028f8:	e59f30a4 	ldr	r3, [pc, #164]	; c1029a4 <rtc_init+0x118>
 c1028fc:	e3a02000 	mov	r2, #0
 c102900:	e5832000 	str	r2, [r3]
    BCDMIN  = 0x0;
 c102904:	e59f309c 	ldr	r3, [pc, #156]	; c1029a8 <rtc_init+0x11c>
 c102908:	e3a02000 	mov	r2, #0
 c10290c:	e5832000 	str	r2, [r3]
    BCDSEC  = 0x0;
 c102910:	e59f3094 	ldr	r3, [pc, #148]	; c1029ac <rtc_init+0x120>
 c102914:	e3a02000 	mov	r2, #0
 c102918:	e5832000 	str	r2, [r3]

    ALMYEAR = 0x0;
 c10291c:	e59f308c 	ldr	r3, [pc, #140]	; c1029b0 <rtc_init+0x124>
 c102920:	e3a02000 	mov	r2, #0
 c102924:	e5832000 	str	r2, [r3]
    ALMMON  = 0x0;
 c102928:	e59f3084 	ldr	r3, [pc, #132]	; c1029b4 <rtc_init+0x128>
 c10292c:	e3a02000 	mov	r2, #0
 c102930:	e5832000 	str	r2, [r3]
    ALMDAY  = 0x0;
 c102934:	e59f307c 	ldr	r3, [pc, #124]	; c1029b8 <rtc_init+0x12c>
 c102938:	e3a02000 	mov	r2, #0
 c10293c:	e5832000 	str	r2, [r3]
    ALMHOUR = 0x0;
 c102940:	e59f3074 	ldr	r3, [pc, #116]	; c1029bc <rtc_init+0x130>
 c102944:	e3a02000 	mov	r2, #0
 c102948:	e5832000 	str	r2, [r3]
    ALMMIN  = 0x0;
 c10294c:	e59f306c 	ldr	r3, [pc, #108]	; c1029c0 <rtc_init+0x134>
 c102950:	e3a02000 	mov	r2, #0
 c102954:	e5832000 	str	r2, [r3]
    ALMSEC  = 0x0;
 c102958:	e59f3064 	ldr	r3, [pc, #100]	; c1029c4 <rtc_init+0x138>
 c10295c:	e3a02000 	mov	r2, #0
 c102960:	e5832000 	str	r2, [r3]

    RTCCON &= 0;//revisar todos los que tengan esto que soy un cazurro
 c102964:	e59f3024 	ldr	r3, [pc, #36]	; c102990 <rtc_init+0x104>
 c102968:	e5933000 	ldr	r3, [r3]
 c10296c:	e59f301c 	ldr	r3, [pc, #28]	; c102990 <rtc_init+0x104>
 c102970:	e3a02000 	mov	r2, #0
 c102974:	e5832000 	str	r2, [r3]
}
 c102978:	e24bd00c 	sub	sp, fp, #12
 c10297c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102980:	e12fff1e 	bx	lr
 c102984:	01d7008c 	.word	0x01d7008c
 c102988:	01d70050 	.word	0x01d70050
 c10298c:	01d7006c 	.word	0x01d7006c
 c102990:	01d70040 	.word	0x01d70040
 c102994:	01d70088 	.word	0x01d70088
 c102998:	01d70084 	.word	0x01d70084
 c10299c:	01d7007c 	.word	0x01d7007c
 c1029a0:	01d70080 	.word	0x01d70080
 c1029a4:	01d70078 	.word	0x01d70078
 c1029a8:	01d70074 	.word	0x01d70074
 c1029ac:	01d70070 	.word	0x01d70070
 c1029b0:	01d70068 	.word	0x01d70068
 c1029b4:	01d70064 	.word	0x01d70064
 c1029b8:	01d70060 	.word	0x01d70060
 c1029bc:	01d7005c 	.word	0x01d7005c
 c1029c0:	01d70058 	.word	0x01d70058
 c1029c4:	01d70054 	.word	0x01d70054

0c1029c8 <rtc_puttime>:

void rtc_puttime( rtc_time_t *rtc_time )
{
 c1029c8:	e1a0c00d 	mov	ip, sp
 c1029cc:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1029d0:	e24cb004 	sub	fp, ip, #4
 c1029d4:	e24dd00c 	sub	sp, sp, #12
 c1029d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RTCCON |= 0x9;
 c1029dc:	e59f30f0 	ldr	r3, [pc, #240]	; c102ad4 <rtc_puttime+0x10c>
 c1029e0:	e59f20ec 	ldr	r2, [pc, #236]	; c102ad4 <rtc_puttime+0x10c>
 c1029e4:	e5922000 	ldr	r2, [r2]
 c1029e8:	e3822009 	orr	r2, r2, #9
 c1029ec:	e5832000 	str	r2, [r3]
    
    BCDYEAR = dectoBCD(rtc_time->year);
 c1029f0:	e59f40e0 	ldr	r4, [pc, #224]	; c102ad8 <rtc_puttime+0x110>
 c1029f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1029f8:	e5d33006 	ldrb	r3, [r3, #6]
 c1029fc:	e1a00003 	mov	r0, r3
 c102a00:	ebffff4e 	bl	c102740 <dectoBCD>
 c102a04:	e1a03000 	mov	r3, r0
 c102a08:	e5843000 	str	r3, [r4]
    BCDMON  = dectoBCD(rtc_time->mon);
 c102a0c:	e59f40c8 	ldr	r4, [pc, #200]	; c102adc <rtc_puttime+0x114>
 c102a10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102a14:	e5d33005 	ldrb	r3, [r3, #5]
 c102a18:	e1a00003 	mov	r0, r3
 c102a1c:	ebffff47 	bl	c102740 <dectoBCD>
 c102a20:	e1a03000 	mov	r3, r0
 c102a24:	e5843000 	str	r3, [r4]
    BCDDAY  = dectoBCD(rtc_time->mday);
 c102a28:	e59f40b0 	ldr	r4, [pc, #176]	; c102ae0 <rtc_puttime+0x118>
 c102a2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102a30:	e5d33003 	ldrb	r3, [r3, #3]
 c102a34:	e1a00003 	mov	r0, r3
 c102a38:	ebffff40 	bl	c102740 <dectoBCD>
 c102a3c:	e1a03000 	mov	r3, r0
 c102a40:	e5843000 	str	r3, [r4]
    BCDDATE = dectoBCD(rtc_time->wday);
 c102a44:	e59f4098 	ldr	r4, [pc, #152]	; c102ae4 <rtc_puttime+0x11c>
 c102a48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102a4c:	e5d33004 	ldrb	r3, [r3, #4]
 c102a50:	e1a00003 	mov	r0, r3
 c102a54:	ebffff39 	bl	c102740 <dectoBCD>
 c102a58:	e1a03000 	mov	r3, r0
 c102a5c:	e5843000 	str	r3, [r4]
    BCDHOUR = dectoBCD(rtc_time->hour);
 c102a60:	e59f4080 	ldr	r4, [pc, #128]	; c102ae8 <rtc_puttime+0x120>
 c102a64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102a68:	e5d33002 	ldrb	r3, [r3, #2]
 c102a6c:	e1a00003 	mov	r0, r3
 c102a70:	ebffff32 	bl	c102740 <dectoBCD>
 c102a74:	e1a03000 	mov	r3, r0
 c102a78:	e5843000 	str	r3, [r4]
    BCDMIN  = dectoBCD(rtc_time->min);
 c102a7c:	e59f4068 	ldr	r4, [pc, #104]	; c102aec <rtc_puttime+0x124>
 c102a80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102a84:	e5d33001 	ldrb	r3, [r3, #1]
 c102a88:	e1a00003 	mov	r0, r3
 c102a8c:	ebffff2b 	bl	c102740 <dectoBCD>
 c102a90:	e1a03000 	mov	r3, r0
 c102a94:	e5843000 	str	r3, [r4]
    BCDSEC  = dectoBCD(rtc_time->sec);
 c102a98:	e59f4050 	ldr	r4, [pc, #80]	; c102af0 <rtc_puttime+0x128>
 c102a9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102aa0:	e5d33000 	ldrb	r3, [r3]
 c102aa4:	e1a00003 	mov	r0, r3
 c102aa8:	ebffff24 	bl	c102740 <dectoBCD>
 c102aac:	e1a03000 	mov	r3, r0
 c102ab0:	e5843000 	str	r3, [r4]
        
    RTCCON &= 0;
 c102ab4:	e59f3018 	ldr	r3, [pc, #24]	; c102ad4 <rtc_puttime+0x10c>
 c102ab8:	e5933000 	ldr	r3, [r3]
 c102abc:	e59f3010 	ldr	r3, [pc, #16]	; c102ad4 <rtc_puttime+0x10c>
 c102ac0:	e3a02000 	mov	r2, #0
 c102ac4:	e5832000 	str	r2, [r3]
}
 c102ac8:	e24bd010 	sub	sp, fp, #16
 c102acc:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c102ad0:	e12fff1e 	bx	lr
 c102ad4:	01d70040 	.word	0x01d70040
 c102ad8:	01d70088 	.word	0x01d70088
 c102adc:	01d70084 	.word	0x01d70084
 c102ae0:	01d7007c 	.word	0x01d7007c
 c102ae4:	01d70080 	.word	0x01d70080
 c102ae8:	01d70078 	.word	0x01d70078
 c102aec:	01d70074 	.word	0x01d70074
 c102af0:	01d70070 	.word	0x01d70070

0c102af4 <rtc_gettime>:

void rtc_gettime( rtc_time_t *rtc_time )
{
 c102af4:	e1a0c00d 	mov	ip, sp
 c102af8:	e92dd800 	push	{fp, ip, lr, pc}
 c102afc:	e24cb004 	sub	fp, ip, #4
 c102b00:	e24dd008 	sub	sp, sp, #8
 c102b04:	e50b0010 	str	r0, [fp, #-16]
    RTCCON |= 1;
 c102b08:	e59f31fc 	ldr	r3, [pc, #508]	; c102d0c <rtc_gettime+0x218>
 c102b0c:	e59f21f8 	ldr	r2, [pc, #504]	; c102d0c <rtc_gettime+0x218>
 c102b10:	e5922000 	ldr	r2, [r2]
 c102b14:	e3822001 	orr	r2, r2, #1
 c102b18:	e5832000 	str	r2, [r3]
    
    rtc_time->year = BCDtodec(BCDYEAR);
 c102b1c:	e59f31ec 	ldr	r3, [pc, #492]	; c102d10 <rtc_gettime+0x21c>
 c102b20:	e5933000 	ldr	r3, [r3]
 c102b24:	e1a00003 	mov	r0, r3
 c102b28:	ebffff29 	bl	c1027d4 <BCDtodec>
 c102b2c:	e1a03000 	mov	r3, r0
 c102b30:	e20320ff 	and	r2, r3, #255	; 0xff
 c102b34:	e51b3010 	ldr	r3, [fp, #-16]
 c102b38:	e5c32006 	strb	r2, [r3, #6]
    rtc_time->mon  = BCDtodec(BCDMON);
 c102b3c:	e59f31d0 	ldr	r3, [pc, #464]	; c102d14 <rtc_gettime+0x220>
 c102b40:	e5933000 	ldr	r3, [r3]
 c102b44:	e1a00003 	mov	r0, r3
 c102b48:	ebffff21 	bl	c1027d4 <BCDtodec>
 c102b4c:	e1a03000 	mov	r3, r0
 c102b50:	e20320ff 	and	r2, r3, #255	; 0xff
 c102b54:	e51b3010 	ldr	r3, [fp, #-16]
 c102b58:	e5c32005 	strb	r2, [r3, #5]
    rtc_time->mday = BCDtodec(BCDDAY);
 c102b5c:	e59f31b4 	ldr	r3, [pc, #436]	; c102d18 <rtc_gettime+0x224>
 c102b60:	e5933000 	ldr	r3, [r3]
 c102b64:	e1a00003 	mov	r0, r3
 c102b68:	ebffff19 	bl	c1027d4 <BCDtodec>
 c102b6c:	e1a03000 	mov	r3, r0
 c102b70:	e20320ff 	and	r2, r3, #255	; 0xff
 c102b74:	e51b3010 	ldr	r3, [fp, #-16]
 c102b78:	e5c32003 	strb	r2, [r3, #3]
    rtc_time->wday = BCDtodec(BCDDATE);
 c102b7c:	e59f3198 	ldr	r3, [pc, #408]	; c102d1c <rtc_gettime+0x228>
 c102b80:	e5933000 	ldr	r3, [r3]
 c102b84:	e1a00003 	mov	r0, r3
 c102b88:	ebffff11 	bl	c1027d4 <BCDtodec>
 c102b8c:	e1a03000 	mov	r3, r0
 c102b90:	e20320ff 	and	r2, r3, #255	; 0xff
 c102b94:	e51b3010 	ldr	r3, [fp, #-16]
 c102b98:	e5c32004 	strb	r2, [r3, #4]
    rtc_time->hour = BCDtodec(BCDHOUR);
 c102b9c:	e59f317c 	ldr	r3, [pc, #380]	; c102d20 <rtc_gettime+0x22c>
 c102ba0:	e5933000 	ldr	r3, [r3]
 c102ba4:	e1a00003 	mov	r0, r3
 c102ba8:	ebffff09 	bl	c1027d4 <BCDtodec>
 c102bac:	e1a03000 	mov	r3, r0
 c102bb0:	e20320ff 	and	r2, r3, #255	; 0xff
 c102bb4:	e51b3010 	ldr	r3, [fp, #-16]
 c102bb8:	e5c32002 	strb	r2, [r3, #2]
    rtc_time->min  = BCDtodec(BCDMIN);
 c102bbc:	e59f3160 	ldr	r3, [pc, #352]	; c102d24 <rtc_gettime+0x230>
 c102bc0:	e5933000 	ldr	r3, [r3]
 c102bc4:	e1a00003 	mov	r0, r3
 c102bc8:	ebffff01 	bl	c1027d4 <BCDtodec>
 c102bcc:	e1a03000 	mov	r3, r0
 c102bd0:	e20320ff 	and	r2, r3, #255	; 0xff
 c102bd4:	e51b3010 	ldr	r3, [fp, #-16]
 c102bd8:	e5c32001 	strb	r2, [r3, #1]
    rtc_time->sec  = BCDtodec(BCDSEC);
 c102bdc:	e59f3144 	ldr	r3, [pc, #324]	; c102d28 <rtc_gettime+0x234>
 c102be0:	e5933000 	ldr	r3, [r3]
 c102be4:	e1a00003 	mov	r0, r3
 c102be8:	ebfffef9 	bl	c1027d4 <BCDtodec>
 c102bec:	e1a03000 	mov	r3, r0
 c102bf0:	e20320ff 	and	r2, r3, #255	; 0xff
 c102bf4:	e51b3010 	ldr	r3, [fp, #-16]
 c102bf8:	e5c32000 	strb	r2, [r3]
    if( ! rtc_time->sec ){
 c102bfc:	e51b3010 	ldr	r3, [fp, #-16]
 c102c00:	e5d33000 	ldrb	r3, [r3]
 c102c04:	e3530000 	cmp	r3, #0
 c102c08:	1a000037 	bne	c102cec <rtc_gettime+0x1f8>
    	rtc_time->year = BCDtodec(BCDYEAR);
 c102c0c:	e59f30fc 	ldr	r3, [pc, #252]	; c102d10 <rtc_gettime+0x21c>
 c102c10:	e5933000 	ldr	r3, [r3]
 c102c14:	e1a00003 	mov	r0, r3
 c102c18:	ebfffeed 	bl	c1027d4 <BCDtodec>
 c102c1c:	e1a03000 	mov	r3, r0
 c102c20:	e20320ff 	and	r2, r3, #255	; 0xff
 c102c24:	e51b3010 	ldr	r3, [fp, #-16]
 c102c28:	e5c32006 	strb	r2, [r3, #6]
    	    rtc_time->mon  = BCDtodec(BCDMON);
 c102c2c:	e59f30e0 	ldr	r3, [pc, #224]	; c102d14 <rtc_gettime+0x220>
 c102c30:	e5933000 	ldr	r3, [r3]
 c102c34:	e1a00003 	mov	r0, r3
 c102c38:	ebfffee5 	bl	c1027d4 <BCDtodec>
 c102c3c:	e1a03000 	mov	r3, r0
 c102c40:	e20320ff 	and	r2, r3, #255	; 0xff
 c102c44:	e51b3010 	ldr	r3, [fp, #-16]
 c102c48:	e5c32005 	strb	r2, [r3, #5]
    	    rtc_time->mday = BCDtodec(BCDDAY);
 c102c4c:	e59f30c4 	ldr	r3, [pc, #196]	; c102d18 <rtc_gettime+0x224>
 c102c50:	e5933000 	ldr	r3, [r3]
 c102c54:	e1a00003 	mov	r0, r3
 c102c58:	ebfffedd 	bl	c1027d4 <BCDtodec>
 c102c5c:	e1a03000 	mov	r3, r0
 c102c60:	e20320ff 	and	r2, r3, #255	; 0xff
 c102c64:	e51b3010 	ldr	r3, [fp, #-16]
 c102c68:	e5c32003 	strb	r2, [r3, #3]
    	    rtc_time->wday = BCDtodec(BCDDATE);
 c102c6c:	e59f30a8 	ldr	r3, [pc, #168]	; c102d1c <rtc_gettime+0x228>
 c102c70:	e5933000 	ldr	r3, [r3]
 c102c74:	e1a00003 	mov	r0, r3
 c102c78:	ebfffed5 	bl	c1027d4 <BCDtodec>
 c102c7c:	e1a03000 	mov	r3, r0
 c102c80:	e20320ff 	and	r2, r3, #255	; 0xff
 c102c84:	e51b3010 	ldr	r3, [fp, #-16]
 c102c88:	e5c32004 	strb	r2, [r3, #4]
    	    rtc_time->hour = BCDtodec(BCDHOUR);
 c102c8c:	e59f308c 	ldr	r3, [pc, #140]	; c102d20 <rtc_gettime+0x22c>
 c102c90:	e5933000 	ldr	r3, [r3]
 c102c94:	e1a00003 	mov	r0, r3
 c102c98:	ebfffecd 	bl	c1027d4 <BCDtodec>
 c102c9c:	e1a03000 	mov	r3, r0
 c102ca0:	e20320ff 	and	r2, r3, #255	; 0xff
 c102ca4:	e51b3010 	ldr	r3, [fp, #-16]
 c102ca8:	e5c32002 	strb	r2, [r3, #2]
    	    rtc_time->min  = BCDtodec(BCDMIN);
 c102cac:	e59f3070 	ldr	r3, [pc, #112]	; c102d24 <rtc_gettime+0x230>
 c102cb0:	e5933000 	ldr	r3, [r3]
 c102cb4:	e1a00003 	mov	r0, r3
 c102cb8:	ebfffec5 	bl	c1027d4 <BCDtodec>
 c102cbc:	e1a03000 	mov	r3, r0
 c102cc0:	e20320ff 	and	r2, r3, #255	; 0xff
 c102cc4:	e51b3010 	ldr	r3, [fp, #-16]
 c102cc8:	e5c32001 	strb	r2, [r3, #1]
    	    rtc_time->sec  = BCDtodec(BCDSEC);
 c102ccc:	e59f3054 	ldr	r3, [pc, #84]	; c102d28 <rtc_gettime+0x234>
 c102cd0:	e5933000 	ldr	r3, [r3]
 c102cd4:	e1a00003 	mov	r0, r3
 c102cd8:	ebfffebd 	bl	c1027d4 <BCDtodec>
 c102cdc:	e1a03000 	mov	r3, r0
 c102ce0:	e20320ff 	and	r2, r3, #255	; 0xff
 c102ce4:	e51b3010 	ldr	r3, [fp, #-16]
 c102ce8:	e5c32000 	strb	r2, [r3]
    };

    RTCCON &= 0;
 c102cec:	e59f3018 	ldr	r3, [pc, #24]	; c102d0c <rtc_gettime+0x218>
 c102cf0:	e5933000 	ldr	r3, [r3]
 c102cf4:	e59f3010 	ldr	r3, [pc, #16]	; c102d0c <rtc_gettime+0x218>
 c102cf8:	e3a02000 	mov	r2, #0
 c102cfc:	e5832000 	str	r2, [r3]
}
 c102d00:	e24bd00c 	sub	sp, fp, #12
 c102d04:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102d08:	e12fff1e 	bx	lr
 c102d0c:	01d70040 	.word	0x01d70040
 c102d10:	01d70088 	.word	0x01d70088
 c102d14:	01d70084 	.word	0x01d70084
 c102d18:	01d7007c 	.word	0x01d7007c
 c102d1c:	01d70080 	.word	0x01d70080
 c102d20:	01d70078 	.word	0x01d70078
 c102d24:	01d70074 	.word	0x01d70074
 c102d28:	01d70070 	.word	0x01d70070

0c102d2c <rtc_open>:


void rtc_open( void (*isr)(void), uint8 tick_count )
{
 c102d2c:	e1a0c00d 	mov	ip, sp
 c102d30:	e92dd800 	push	{fp, ip, lr, pc}
 c102d34:	e24cb004 	sub	fp, ip, #4
 c102d38:	e24dd008 	sub	sp, sp, #8
 c102d3c:	e50b0010 	str	r0, [fp, #-16]
 c102d40:	e1a03001 	mov	r3, r1
 c102d44:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    pISR_TICK = (uint32) isr;
 c102d48:	e59f3048 	ldr	r3, [pc, #72]	; c102d98 <rtc_open+0x6c>
 c102d4c:	e51b2010 	ldr	r2, [fp, #-16]
 c102d50:	e5832000 	str	r2, [r3]
    I_ISPC    = BIT_TICK;
 c102d54:	e59f3040 	ldr	r3, [pc, #64]	; c102d9c <rtc_open+0x70>
 c102d58:	e3a02601 	mov	r2, #1048576	; 0x100000
 c102d5c:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_GLOBAL | BIT_TICK);
 c102d60:	e59f3038 	ldr	r3, [pc, #56]	; c102da0 <rtc_open+0x74>
 c102d64:	e59f2034 	ldr	r2, [pc, #52]	; c102da0 <rtc_open+0x74>
 c102d68:	e5922000 	ldr	r2, [r2]
 c102d6c:	e3c22641 	bic	r2, r2, #68157440	; 0x4100000
 c102d70:	e5832000 	str	r2, [r3]
    TICNT     = (1<<7) | tick_count;
 c102d74:	e59f2028 	ldr	r2, [pc, #40]	; c102da4 <rtc_open+0x78>
 c102d78:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102d7c:	e1e03c83 	mvn	r3, r3, lsl #25
 c102d80:	e1e03ca3 	mvn	r3, r3, lsr #25
 c102d84:	e20330ff 	and	r3, r3, #255	; 0xff
 c102d88:	e5823000 	str	r3, [r2]
}
 c102d8c:	e24bd00c 	sub	sp, fp, #12
 c102d90:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102d94:	e12fff1e 	bx	lr
 c102d98:	0c7fff70 	.word	0x0c7fff70
 c102d9c:	01e00024 	.word	0x01e00024
 c102da0:	01e0000c 	.word	0x01e0000c
 c102da4:	01d7008c 	.word	0x01d7008c

0c102da8 <rtc_close>:

void rtc_close( void )
{
 c102da8:	e1a0c00d 	mov	ip, sp
 c102dac:	e92dd800 	push	{fp, ip, lr, pc}
 c102db0:	e24cb004 	sub	fp, ip, #4
    TICNT     = 0x7f;
 c102db4:	e59f3030 	ldr	r3, [pc, #48]	; c102dec <rtc_close+0x44>
 c102db8:	e3a0207f 	mov	r2, #127	; 0x7f
 c102dbc:	e5832000 	str	r2, [r3]
    INTMSK   |= (1<<20);
 c102dc0:	e59f3028 	ldr	r3, [pc, #40]	; c102df0 <rtc_close+0x48>
 c102dc4:	e59f2024 	ldr	r2, [pc, #36]	; c102df0 <rtc_close+0x48>
 c102dc8:	e5922000 	ldr	r2, [r2]
 c102dcc:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c102dd0:	e5832000 	str	r2, [r3]
    pISR_TICK = (uint32) isr_TICK_dummy;
 c102dd4:	e59f3018 	ldr	r3, [pc, #24]	; c102df4 <rtc_close+0x4c>
 c102dd8:	e59f2018 	ldr	r2, [pc, #24]	; c102df8 <rtc_close+0x50>
 c102ddc:	e5832000 	str	r2, [r3]
}
 c102de0:	e24bd00c 	sub	sp, fp, #12
 c102de4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102de8:	e12fff1e 	bx	lr
 c102dec:	01d7008c 	.word	0x01d7008c
 c102df0:	01e0000c 	.word	0x01e0000c
 c102df4:	0c7fff70 	.word	0x0c7fff70
 c102df8:	0c103868 	.word	0x0c103868

0c102dfc <segs_init>:
static const uint8 hex2segs[16] = {0x12, 0x9f, 0x31, 0x15, 0x9c, 0x54, 0x50, 0x1f, 0x10, 0x1c, 0x18, 0xd0, 0x72, 0x91, 0x70, 0x78, 0xef};

static uint8 state;
        
void segs_init( void )
{
 c102dfc:	e1a0c00d 	mov	ip, sp
 c102e00:	e92dd800 	push	{fp, ip, lr, pc}
 c102e04:	e24cb004 	sub	fp, ip, #4
    segs_off();
 c102e08:	eb000002 	bl	c102e18 <segs_off>
}                                  
 c102e0c:	e24bd00c 	sub	sp, fp, #12
 c102e10:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e14:	e12fff1e 	bx	lr

0c102e18 <segs_off>:
                          
void segs_off( void )
{
 c102e18:	e1a0c00d 	mov	ip, sp
 c102e1c:	e92dd800 	push	{fp, ip, lr, pc}
 c102e20:	e24cb004 	sub	fp, ip, #4
    state = SEGS_OFF;
 c102e24:	e59f3020 	ldr	r3, [pc, #32]	; c102e4c <segs_off+0x34>
 c102e28:	e3e02000 	mvn	r2, #0
 c102e2c:	e5c32000 	strb	r2, [r3]
    SEGS = state;
 c102e30:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102e34:	e59f2010 	ldr	r2, [pc, #16]	; c102e4c <segs_off+0x34>
 c102e38:	e5d22000 	ldrb	r2, [r2]
 c102e3c:	e5c32000 	strb	r2, [r3]
}
 c102e40:	e24bd00c 	sub	sp, fp, #12
 c102e44:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e48:	e12fff1e 	bx	lr
 c102e4c:	0c106f49 	.word	0x0c106f49

0c102e50 <segs_putchar>:

void segs_putchar( uint8 n )
{
 c102e50:	e1a0c00d 	mov	ip, sp
 c102e54:	e92dd800 	push	{fp, ip, lr, pc}
 c102e58:	e24cb004 	sub	fp, ip, #4
 c102e5c:	e24dd008 	sub	sp, sp, #8
 c102e60:	e1a03000 	mov	r3, r0
 c102e64:	e54b300d 	strb	r3, [fp, #-13]
    state = n & 0x0f;
 c102e68:	e55b300d 	ldrb	r3, [fp, #-13]
 c102e6c:	e203300f 	and	r3, r3, #15
 c102e70:	e20320ff 	and	r2, r3, #255	; 0xff
 c102e74:	e59f3024 	ldr	r3, [pc, #36]	; c102ea0 <segs_putchar+0x50>
 c102e78:	e5c32000 	strb	r2, [r3]
    SEGS = hex2segs[state];
 c102e7c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102e80:	e59f2018 	ldr	r2, [pc, #24]	; c102ea0 <segs_putchar+0x50>
 c102e84:	e5d22000 	ldrb	r2, [r2]
 c102e88:	e59f1014 	ldr	r1, [pc, #20]	; c102ea4 <segs_putchar+0x54>
 c102e8c:	e7d12002 	ldrb	r2, [r1, r2]
 c102e90:	e5c32000 	strb	r2, [r3]
};
 c102e94:	e24bd00c 	sub	sp, fp, #12
 c102e98:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e9c:	e12fff1e 	bx	lr
 c102ea0:	0c106f49 	.word	0x0c106f49
 c102ea4:	0c1058c8 	.word	0x0c1058c8

0c102ea8 <segs_status>:

uint8 segs_status( void )
{
 c102ea8:	e1a0c00d 	mov	ip, sp
 c102eac:	e92dd800 	push	{fp, ip, lr, pc}
 c102eb0:	e24cb004 	sub	fp, ip, #4
    return state;
 c102eb4:	e59f3010 	ldr	r3, [pc, #16]	; c102ecc <segs_status+0x24>
 c102eb8:	e5d33000 	ldrb	r3, [r3]
};
 c102ebc:	e1a00003 	mov	r0, r3
 c102ec0:	e24bd00c 	sub	sp, fp, #12
 c102ec4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102ec8:	e12fff1e 	bx	lr
 c102ecc:	0c106f49 	.word	0x0c106f49

0c102ed0 <sys_init>:
static inline void install_dummy_isr( void );
static inline void show_sys_info( void );
static void sys_recovery( void );
inline void sleep(void);

void sys_init(void) {
 c102ed0:	e1a0c00d 	mov	ip, sp
 c102ed4:	e92dd800 	push	{fp, ip, lr, pc}
 c102ed8:	e24cb004 	sub	fp, ip, #4
 c102edc:	e24dd008 	sub	sp, sp, #8
	uint8 mode;

	WTCON = 0;
 c102ee0:	e59f30fc 	ldr	r3, [pc, #252]	; c102fe4 <sys_init+0x114>
 c102ee4:	e3a02000 	mov	r2, #0
 c102ee8:	e5832000 	str	r2, [r3]
	INTMSK = ~(1 << 26);
 c102eec:	e59f30f4 	ldr	r3, [pc, #244]	; c102fe8 <sys_init+0x118>
 c102ef0:	e3e02301 	mvn	r2, #67108864	; 0x4000000
 c102ef4:	e5832000 	str	r2, [r3]

	GET_OPMODE(&mode);    // lee el modo de ejecución del procesador
 c102ef8:	e10f0000 	mrs	r0, CPSR
 c102efc:	e200001f 	and	r0, r0, #31
 c102f00:	e54b000d 	strb	r0, [fp, #-13]
	if ( mode != SVCMODE)
 c102f04:	e55b300d 	ldrb	r3, [fp, #-13]
 c102f08:	e3530013 	cmp	r3, #19
 c102f0c:	0a000000 	beq	c102f14 <sys_init+0x44>
		sys_recovery(); // si no es SVC (por una reejecución de la aplicación tras una excepción sin reset HW previo) recupera el modo SVC y restaura las pilas del sistema
 c102f10:	eb0002a5 	bl	c1039ac <sys_recovery>

	LOCKTIME = 0xFFF;
 c102f14:	e59f30d0 	ldr	r3, [pc, #208]	; c102fec <sys_init+0x11c>
 c102f18:	e59f20d0 	ldr	r2, [pc, #208]	; c102ff0 <sys_init+0x120>
 c102f1c:	e5832000 	str	r2, [r3]
	PLLCON = 0x38021;
 c102f20:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c102f24:	e59f20c8 	ldr	r2, [pc, #200]	; c102ff4 <sys_init+0x124>
 c102f28:	e5832000 	str	r2, [r3]
	CLKSLOW = 0x8;
 c102f2c:	e59f30c4 	ldr	r3, [pc, #196]	; c102ff8 <sys_init+0x128>
 c102f30:	e3a02008 	mov	r2, #8
 c102f34:	e5832000 	str	r2, [r3]
	CLKCON = 0x7FF8;
 c102f38:	e59f30bc 	ldr	r3, [pc, #188]	; c102ffc <sys_init+0x12c>
 c102f3c:	e59f20bc 	ldr	r2, [pc, #188]	; c103000 <sys_init+0x130>
 c102f40:	e5832000 	str	r2, [r3]

	SBUSCON = 0x8000001B;
 c102f44:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c102f48:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c102f4c:	e5832000 	str	r2, [r3]

	SYSCFG = 0x0;
 c102f50:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c102f54:	e3a02000 	mov	r2, #0
 c102f58:	e5832000 	str	r2, [r3]

	I_PMST = 0x1f1b;
 c102f5c:	e59f30a0 	ldr	r3, [pc, #160]	; c103004 <sys_init+0x134>
 c102f60:	e59f20a0 	ldr	r2, [pc, #160]	; c103008 <sys_init+0x138>
 c102f64:	e5832000 	str	r2, [r3]
	I_PSLV = 0x1b1b1b1b;
 c102f68:	e59f309c 	ldr	r3, [pc, #156]	; c10300c <sys_init+0x13c>
 c102f6c:	e59f209c 	ldr	r2, [pc, #156]	; c103010 <sys_init+0x140>
 c102f70:	e5832000 	str	r2, [r3]
	INTMOD = 0x0;
 c102f74:	e59f3098 	ldr	r3, [pc, #152]	; c103014 <sys_init+0x144>
 c102f78:	e3a02000 	mov	r2, #0
 c102f7c:	e5832000 	str	r2, [r3]
	install_dummy_isr();
 c102f80:	eb000088 	bl	c1031a8 <install_dummy_isr>
	EXTINTPND = 0x0;     //creo que esta bien
 c102f84:	e59f308c 	ldr	r3, [pc, #140]	; c103018 <sys_init+0x148>
 c102f88:	e3a02000 	mov	r2, #0
 c102f8c:	e5832000 	str	r2, [r3]
	I_ISPC = 0x1;     //creo que esta bien
 c102f90:	e59f3084 	ldr	r3, [pc, #132]	; c10301c <sys_init+0x14c>
 c102f94:	e3a02001 	mov	r2, #1
 c102f98:	e5832000 	str	r2, [r3]
	INTCON = 0x1;
 c102f9c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c102fa0:	e3a02001 	mov	r2, #1
 c102fa4:	e5832000 	str	r2, [r3]
	SET_IRQFLAG(0);
 c102fa8:	e10f0000 	mrs	r0, CPSR
 c102fac:	e3c00080 	bic	r0, r0, #128	; 0x80
 c102fb0:	e3800000 	orr	r0, r0, #0
 c102fb4:	e121f000 	msr	CPSR_c, r0
	SET_FIQFLAG(1);
 c102fb8:	e10f0000 	mrs	r0, CPSR
 c102fbc:	e3c00040 	bic	r0, r0, #64	; 0x40
 c102fc0:	e3800040 	orr	r0, r0, #64	; 0x40
 c102fc4:	e121f000 	msr	CPSR_c, r0

	port_init();
 c102fc8:	eb000014 	bl	c103020 <port_init>
	segs_init();
 c102fcc:	ebffff8a 	bl	c102dfc <segs_init>
	uart0_init();
 c102fd0:	eb000591 	bl	c10461c <uart0_init>

	show_sys_info();
 c102fd4:	eb00025f 	bl	c103958 <show_sys_info>
}
 c102fd8:	e24bd00c 	sub	sp, fp, #12
 c102fdc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102fe0:	e12fff1e 	bx	lr
 c102fe4:	01d30000 	.word	0x01d30000
 c102fe8:	01e0000c 	.word	0x01e0000c
 c102fec:	01d8000c 	.word	0x01d8000c
 c102ff0:	00000fff 	.word	0x00000fff
 c102ff4:	00038021 	.word	0x00038021
 c102ff8:	01d80008 	.word	0x01d80008
 c102ffc:	01d80004 	.word	0x01d80004
 c103000:	00007ff8 	.word	0x00007ff8
 c103004:	01e00014 	.word	0x01e00014
 c103008:	00001f1b 	.word	0x00001f1b
 c10300c:	01e00010 	.word	0x01e00010
 c103010:	1b1b1b1b 	.word	0x1b1b1b1b
 c103014:	01e00008 	.word	0x01e00008
 c103018:	01d20054 	.word	0x01d20054
 c10301c:	01e00024 	.word	0x01e00024

0c103020 <port_init>:

static void port_init(void) {
 c103020:	e1a0c00d 	mov	ip, sp
 c103024:	e92dd800 	push	{fp, ip, lr, pc}
 c103028:	e24cb004 	sub	fp, ip, #4
	PDATA = ~0;
 c10302c:	e59f3100 	ldr	r3, [pc, #256]	; c103134 <port_init+0x114>
 c103030:	e3e02000 	mvn	r2, #0
 c103034:	e5832000 	str	r2, [r3]
	PCONA = 0xfe;
 c103038:	e59f30f8 	ldr	r3, [pc, #248]	; c103138 <port_init+0x118>
 c10303c:	e3a020fe 	mov	r2, #254	; 0xfe
 c103040:	e5832000 	str	r2, [r3]

	PDATB = ~0;
 c103044:	e59f30f0 	ldr	r3, [pc, #240]	; c10313c <port_init+0x11c>
 c103048:	e3e02000 	mvn	r2, #0
 c10304c:	e5832000 	str	r2, [r3]
	PCONB = 0x14f;
 c103050:	e59f30e8 	ldr	r3, [pc, #232]	; c103140 <port_init+0x120>
 c103054:	e59f20e8 	ldr	r2, [pc, #232]	; c103144 <port_init+0x124>
 c103058:	e5832000 	str	r2, [r3]

	PDATC = ~0;
 c10305c:	e59f30e4 	ldr	r3, [pc, #228]	; c103148 <port_init+0x128>
 c103060:	e3e02000 	mvn	r2, #0
 c103064:	e5832000 	str	r2, [r3]
	PCONC = 0x5ff555ff;
 c103068:	e59f30dc 	ldr	r3, [pc, #220]	; c10314c <port_init+0x12c>
 c10306c:	e59f20dc 	ldr	r2, [pc, #220]	; c103150 <port_init+0x130>
 c103070:	e5832000 	str	r2, [r3]
	PUPC = 0x94fb;
 c103074:	e59f30d8 	ldr	r3, [pc, #216]	; c103154 <port_init+0x134>
 c103078:	e59f20d8 	ldr	r2, [pc, #216]	; c103158 <port_init+0x138>
 c10307c:	e5832000 	str	r2, [r3]

	PDATD = ~0;
 c103080:	e59f30d4 	ldr	r3, [pc, #212]	; c10315c <port_init+0x13c>
 c103084:	e3e02000 	mvn	r2, #0
 c103088:	e5832000 	str	r2, [r3]
	PCOND = 0xaaaa;
 c10308c:	e59f30cc 	ldr	r3, [pc, #204]	; c103160 <port_init+0x140>
 c103090:	e59f20cc 	ldr	r2, [pc, #204]	; c103164 <port_init+0x144>
 c103094:	e5832000 	str	r2, [r3]
	PUPD = 0xff;
 c103098:	e59f30c8 	ldr	r3, [pc, #200]	; c103168 <port_init+0x148>
 c10309c:	e3a020ff 	mov	r2, #255	; 0xff
 c1030a0:	e5832000 	str	r2, [r3]

	PDATE = ~0;
 c1030a4:	e59f30c0 	ldr	r3, [pc, #192]	; c10316c <port_init+0x14c>
 c1030a8:	e3e02000 	mvn	r2, #0
 c1030ac:	e5832000 	str	r2, [r3]
	PCONE = 0x255a9;
 c1030b0:	e59f30b8 	ldr	r3, [pc, #184]	; c103170 <port_init+0x150>
 c1030b4:	e59f20b8 	ldr	r2, [pc, #184]	; c103174 <port_init+0x154>
 c1030b8:	e5832000 	str	r2, [r3]
	PUPE = 0xfb;
 c1030bc:	e59f30b4 	ldr	r3, [pc, #180]	; c103178 <port_init+0x158>
 c1030c0:	e3a020fb 	mov	r2, #251	; 0xfb
 c1030c4:	e5832000 	str	r2, [r3]

	PDATF = ~0;
 c1030c8:	e59f30ac 	ldr	r3, [pc, #172]	; c10317c <port_init+0x15c>
 c1030cc:	e3e02000 	mvn	r2, #0
 c1030d0:	e5832000 	str	r2, [r3]
	PCONF = 0x251a;
 c1030d4:	e59f30a4 	ldr	r3, [pc, #164]	; c103180 <port_init+0x160>
 c1030d8:	e59f20a4 	ldr	r2, [pc, #164]	; c103184 <port_init+0x164>
 c1030dc:	e5832000 	str	r2, [r3]
	PUPF = 0x74;
 c1030e0:	e59f30a0 	ldr	r3, [pc, #160]	; c103188 <port_init+0x168>
 c1030e4:	e3a02074 	mov	r2, #116	; 0x74
 c1030e8:	e5832000 	str	r2, [r3]

	PDATG = ~0;
 c1030ec:	e59f3098 	ldr	r3, [pc, #152]	; c10318c <port_init+0x16c>
 c1030f0:	e3e02000 	mvn	r2, #0
 c1030f4:	e5832000 	str	r2, [r3]
	PCONG = 0xf5ff;
 c1030f8:	e59f3090 	ldr	r3, [pc, #144]	; c103190 <port_init+0x170>
 c1030fc:	e59f2090 	ldr	r2, [pc, #144]	; c103194 <port_init+0x174>
 c103100:	e5832000 	str	r2, [r3]
	PUPG = 0x30;
 c103104:	e59f308c 	ldr	r3, [pc, #140]	; c103198 <port_init+0x178>
 c103108:	e3a02030 	mov	r2, #48	; 0x30
 c10310c:	e5832000 	str	r2, [r3]

	SPUCR = 0x7;
 c103110:	e59f3084 	ldr	r3, [pc, #132]	; c10319c <port_init+0x17c>
 c103114:	e3a02007 	mov	r2, #7
 c103118:	e5832000 	str	r2, [r3]

	EXTINT = 0x22000220;
 c10311c:	e59f307c 	ldr	r3, [pc, #124]	; c1031a0 <port_init+0x180>
 c103120:	e59f207c 	ldr	r2, [pc, #124]	; c1031a4 <port_init+0x184>
 c103124:	e5832000 	str	r2, [r3]
}
 c103128:	e24bd00c 	sub	sp, fp, #12
 c10312c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103130:	e12fff1e 	bx	lr
 c103134:	01d20004 	.word	0x01d20004
 c103138:	01d20000 	.word	0x01d20000
 c10313c:	01d2000c 	.word	0x01d2000c
 c103140:	01d20008 	.word	0x01d20008
 c103144:	0000014f 	.word	0x0000014f
 c103148:	01d20014 	.word	0x01d20014
 c10314c:	01d20010 	.word	0x01d20010
 c103150:	5ff555ff 	.word	0x5ff555ff
 c103154:	01d20018 	.word	0x01d20018
 c103158:	000094fb 	.word	0x000094fb
 c10315c:	01d20020 	.word	0x01d20020
 c103160:	01d2001c 	.word	0x01d2001c
 c103164:	0000aaaa 	.word	0x0000aaaa
 c103168:	01d20024 	.word	0x01d20024
 c10316c:	01d2002c 	.word	0x01d2002c
 c103170:	01d20028 	.word	0x01d20028
 c103174:	000255a9 	.word	0x000255a9
 c103178:	01d20030 	.word	0x01d20030
 c10317c:	01d20038 	.word	0x01d20038
 c103180:	01d20034 	.word	0x01d20034
 c103184:	0000251a 	.word	0x0000251a
 c103188:	01d2003c 	.word	0x01d2003c
 c10318c:	01d20044 	.word	0x01d20044
 c103190:	01d20040 	.word	0x01d20040
 c103194:	0000f5ff 	.word	0x0000f5ff
 c103198:	01d20048 	.word	0x01d20048
 c10319c:	01d2004c 	.word	0x01d2004c
 c1031a0:	01d20050 	.word	0x01d20050
 c1031a4:	22000220 	.word	0x22000220

0c1031a8 <install_dummy_isr>:
//A LO MEJOR EL ORDEN ESTA MAL
static void install_dummy_isr(void) {
 c1031a8:	e1a0c00d 	mov	ip, sp
 c1031ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1031b0:	e24cb004 	sub	fp, ip, #4
	pISR_UNDEF = (uint32) isr_UNDEF_dummy;
 c1031b4:	e59f3184 	ldr	r3, [pc, #388]	; c103340 <install_dummy_isr+0x198>
 c1031b8:	e59f2184 	ldr	r2, [pc, #388]	; c103344 <install_dummy_isr+0x19c>
 c1031bc:	e5832000 	str	r2, [r3]
	pISR_SWI = (uint32) isr_SWI_dummy;
 c1031c0:	e59f3180 	ldr	r3, [pc, #384]	; c103348 <install_dummy_isr+0x1a0>
 c1031c4:	e59f2180 	ldr	r2, [pc, #384]	; c10334c <install_dummy_isr+0x1a4>
 c1031c8:	e5832000 	str	r2, [r3]
	pISR_PABORT = (uint32) isr_PABORT_dummy;
 c1031cc:	e59f317c 	ldr	r3, [pc, #380]	; c103350 <install_dummy_isr+0x1a8>
 c1031d0:	e59f217c 	ldr	r2, [pc, #380]	; c103354 <install_dummy_isr+0x1ac>
 c1031d4:	e5832000 	str	r2, [r3]
	pISR_DABORT = (uint32) isr_DABORT_dummy;
 c1031d8:	e59f3178 	ldr	r3, [pc, #376]	; c103358 <install_dummy_isr+0x1b0>
 c1031dc:	e59f2178 	ldr	r2, [pc, #376]	; c10335c <install_dummy_isr+0x1b4>
 c1031e0:	e5832000 	str	r2, [r3]
	pISR_IRQ = (uint32) isr_IRQ_dummy;
 c1031e4:	e59f3174 	ldr	r3, [pc, #372]	; c103360 <install_dummy_isr+0x1b8>
 c1031e8:	e59f2174 	ldr	r2, [pc, #372]	; c103364 <install_dummy_isr+0x1bc>
 c1031ec:	e5832000 	str	r2, [r3]
	pISR_FIQ = (uint32) isr_FIQ_dummy;
 c1031f0:	e59f3170 	ldr	r3, [pc, #368]	; c103368 <install_dummy_isr+0x1c0>
 c1031f4:	e59f2170 	ldr	r2, [pc, #368]	; c10336c <install_dummy_isr+0x1c4>
 c1031f8:	e5832000 	str	r2, [r3]
	pISR_ADC = (uint32) isr_ADC_dummy;
 c1031fc:	e59f316c 	ldr	r3, [pc, #364]	; c103370 <install_dummy_isr+0x1c8>
 c103200:	e59f216c 	ldr	r2, [pc, #364]	; c103374 <install_dummy_isr+0x1cc>
 c103204:	e5832000 	str	r2, [r3]
	pISR_RTC = (uint32) isr_RTC_dummy;
 c103208:	e59f3168 	ldr	r3, [pc, #360]	; c103378 <install_dummy_isr+0x1d0>
 c10320c:	e59f2168 	ldr	r2, [pc, #360]	; c10337c <install_dummy_isr+0x1d4>
 c103210:	e5832000 	str	r2, [r3]
	pISR_UTXD1 = (uint32) isr_UTXD1_dummy;
 c103214:	e59f3164 	ldr	r3, [pc, #356]	; c103380 <install_dummy_isr+0x1d8>
 c103218:	e59f2164 	ldr	r2, [pc, #356]	; c103384 <install_dummy_isr+0x1dc>
 c10321c:	e5832000 	str	r2, [r3]
	pISR_UTXD0 = (uint32) isr_UTXD0_dummy;
 c103220:	e59f3160 	ldr	r3, [pc, #352]	; c103388 <install_dummy_isr+0x1e0>
 c103224:	e59f2160 	ldr	r2, [pc, #352]	; c10338c <install_dummy_isr+0x1e4>
 c103228:	e5832000 	str	r2, [r3]
	pISR_SIO = (uint32) isr_SIO_dummy;
 c10322c:	e59f315c 	ldr	r3, [pc, #348]	; c103390 <install_dummy_isr+0x1e8>
 c103230:	e59f215c 	ldr	r2, [pc, #348]	; c103394 <install_dummy_isr+0x1ec>
 c103234:	e5832000 	str	r2, [r3]
	pISR_IIC = (uint32) isr_IIC_dummy;
 c103238:	e59f3158 	ldr	r3, [pc, #344]	; c103398 <install_dummy_isr+0x1f0>
 c10323c:	e59f2158 	ldr	r2, [pc, #344]	; c10339c <install_dummy_isr+0x1f4>
 c103240:	e5832000 	str	r2, [r3]
	pISR_URXD1 = (uint32) isr_URXD1_dummy;
 c103244:	e59f3154 	ldr	r3, [pc, #340]	; c1033a0 <install_dummy_isr+0x1f8>
 c103248:	e59f2154 	ldr	r2, [pc, #340]	; c1033a4 <install_dummy_isr+0x1fc>
 c10324c:	e5832000 	str	r2, [r3]
	pISR_URXD0 = (uint32) isr_URXD0_dummy;
 c103250:	e59f3150 	ldr	r3, [pc, #336]	; c1033a8 <install_dummy_isr+0x200>
 c103254:	e59f2150 	ldr	r2, [pc, #336]	; c1033ac <install_dummy_isr+0x204>
 c103258:	e5832000 	str	r2, [r3]
	pISR_TIMER5 = (uint32) isr_TIMER5_dummy;
 c10325c:	e59f314c 	ldr	r3, [pc, #332]	; c1033b0 <install_dummy_isr+0x208>
 c103260:	e59f214c 	ldr	r2, [pc, #332]	; c1033b4 <install_dummy_isr+0x20c>
 c103264:	e5832000 	str	r2, [r3]
	pISR_TIMER4 = (uint32) isr_TIMER4_dummy;
 c103268:	e59f3148 	ldr	r3, [pc, #328]	; c1033b8 <install_dummy_isr+0x210>
 c10326c:	e59f2148 	ldr	r2, [pc, #328]	; c1033bc <install_dummy_isr+0x214>
 c103270:	e5832000 	str	r2, [r3]
	pISR_TIMER3 = (uint32) isr_TIMER3_dummy;
 c103274:	e59f3144 	ldr	r3, [pc, #324]	; c1033c0 <install_dummy_isr+0x218>
 c103278:	e59f2144 	ldr	r2, [pc, #324]	; c1033c4 <install_dummy_isr+0x21c>
 c10327c:	e5832000 	str	r2, [r3]
	pISR_TIMER2 = (uint32) isr_TIMER2_dummy;
 c103280:	e59f3140 	ldr	r3, [pc, #320]	; c1033c8 <install_dummy_isr+0x220>
 c103284:	e59f2140 	ldr	r2, [pc, #320]	; c1033cc <install_dummy_isr+0x224>
 c103288:	e5832000 	str	r2, [r3]
	pISR_TIMER1 = (uint32) isr_TIMER1_dummy;
 c10328c:	e59f313c 	ldr	r3, [pc, #316]	; c1033d0 <install_dummy_isr+0x228>
 c103290:	e59f213c 	ldr	r2, [pc, #316]	; c1033d4 <install_dummy_isr+0x22c>
 c103294:	e5832000 	str	r2, [r3]
	pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c103298:	e59f3138 	ldr	r3, [pc, #312]	; c1033d8 <install_dummy_isr+0x230>
 c10329c:	e59f2138 	ldr	r2, [pc, #312]	; c1033dc <install_dummy_isr+0x234>
 c1032a0:	e5832000 	str	r2, [r3]
	pISR_UERR01 = (uint32) isr_UERR01_dummy;
 c1032a4:	e59f3134 	ldr	r3, [pc, #308]	; c1033e0 <install_dummy_isr+0x238>
 c1032a8:	e59f2134 	ldr	r2, [pc, #308]	; c1033e4 <install_dummy_isr+0x23c>
 c1032ac:	e5832000 	str	r2, [r3]
	pISR_WDT = (uint32) isr_WDT_dummy;
 c1032b0:	e59f3130 	ldr	r3, [pc, #304]	; c1033e8 <install_dummy_isr+0x240>
 c1032b4:	e59f2130 	ldr	r2, [pc, #304]	; c1033ec <install_dummy_isr+0x244>
 c1032b8:	e5832000 	str	r2, [r3]
	pISR_BDMA1 = (uint32) isr_BDMA1_dummy;
 c1032bc:	e59f312c 	ldr	r3, [pc, #300]	; c1033f0 <install_dummy_isr+0x248>
 c1032c0:	e59f212c 	ldr	r2, [pc, #300]	; c1033f4 <install_dummy_isr+0x24c>
 c1032c4:	e5832000 	str	r2, [r3]
	pISR_BDMA0 = (uint32) isr_BDMA0_dummy;
 c1032c8:	e59f3128 	ldr	r3, [pc, #296]	; c1033f8 <install_dummy_isr+0x250>
 c1032cc:	e59f2128 	ldr	r2, [pc, #296]	; c1033fc <install_dummy_isr+0x254>
 c1032d0:	e5832000 	str	r2, [r3]
	pISR_ZDMA1 = (uint32) isr_ZDMA1_dummy;
 c1032d4:	e59f3124 	ldr	r3, [pc, #292]	; c103400 <install_dummy_isr+0x258>
 c1032d8:	e59f2124 	ldr	r2, [pc, #292]	; c103404 <install_dummy_isr+0x25c>
 c1032dc:	e5832000 	str	r2, [r3]
	pISR_ZDMA0 = (uint32) isr_ZDMA0_dummy;
 c1032e0:	e59f3120 	ldr	r3, [pc, #288]	; c103408 <install_dummy_isr+0x260>
 c1032e4:	e59f2120 	ldr	r2, [pc, #288]	; c10340c <install_dummy_isr+0x264>
 c1032e8:	e5832000 	str	r2, [r3]
	pISR_PB = (uint32) isr_PB_dummy;
 c1032ec:	e59f311c 	ldr	r3, [pc, #284]	; c103410 <install_dummy_isr+0x268>
 c1032f0:	e59f211c 	ldr	r2, [pc, #284]	; c103414 <install_dummy_isr+0x26c>
 c1032f4:	e5832000 	str	r2, [r3]
	pISR_ETHERNET = (uint32) isr_ETHERNET_dummy;
 c1032f8:	e59f3118 	ldr	r3, [pc, #280]	; c103418 <install_dummy_isr+0x270>
 c1032fc:	e59f2118 	ldr	r2, [pc, #280]	; c10341c <install_dummy_isr+0x274>
 c103300:	e5832000 	str	r2, [r3]
	pISR_TICK = (uint32) isr_TICK_dummy;
 c103304:	e59f3114 	ldr	r3, [pc, #276]	; c103420 <install_dummy_isr+0x278>
 c103308:	e59f2114 	ldr	r2, [pc, #276]	; c103424 <install_dummy_isr+0x27c>
 c10330c:	e5832000 	str	r2, [r3]
	pISR_TS = (uint32) isr_TS_dummy;
 c103310:	e59f3110 	ldr	r3, [pc, #272]	; c103428 <install_dummy_isr+0x280>
 c103314:	e59f2110 	ldr	r2, [pc, #272]	; c10342c <install_dummy_isr+0x284>
 c103318:	e5832000 	str	r2, [r3]
	pISR_KEYPAD = (uint32) isr_KEYPAD_dummy;
 c10331c:	e59f310c 	ldr	r3, [pc, #268]	; c103430 <install_dummy_isr+0x288>
 c103320:	e59f210c 	ldr	r2, [pc, #268]	; c103434 <install_dummy_isr+0x28c>
 c103324:	e5832000 	str	r2, [r3]
	pISR_USB = (uint32) isr_USB_dummy;
 c103328:	e59f3108 	ldr	r3, [pc, #264]	; c103438 <install_dummy_isr+0x290>
 c10332c:	e59f2108 	ldr	r2, [pc, #264]	; c10343c <install_dummy_isr+0x294>
 c103330:	e5832000 	str	r2, [r3]
}
 c103334:	e24bd00c 	sub	sp, fp, #12
 c103338:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10333c:	e12fff1e 	bx	lr
 c103340:	0c7fff04 	.word	0x0c7fff04
 c103344:	0c10346c 	.word	0x0c10346c
 c103348:	0c7fff08 	.word	0x0c7fff08
 c10334c:	0c103440 	.word	0x0c103440
 c103350:	0c7fff0c 	.word	0x0c7fff0c
 c103354:	0c1034f0 	.word	0x0c1034f0
 c103358:	0c7fff10 	.word	0x0c7fff10
 c10335c:	0c10351c 	.word	0x0c10351c
 c103360:	0c7fff18 	.word	0x0c7fff18
 c103364:	0c103498 	.word	0x0c103498
 c103368:	0c7fff1c 	.word	0x0c7fff1c
 c10336c:	0c1034c4 	.word	0x0c1034c4
 c103370:	0c7fff20 	.word	0x0c7fff20
 c103374:	0c103548 	.word	0x0c103548
 c103378:	0c7fff24 	.word	0x0c7fff24
 c10337c:	0c103570 	.word	0x0c103570
 c103380:	0c7fff28 	.word	0x0c7fff28
 c103384:	0c103598 	.word	0x0c103598
 c103388:	0c7fff2c 	.word	0x0c7fff2c
 c10338c:	0c1035c0 	.word	0x0c1035c0
 c103390:	0c7fff30 	.word	0x0c7fff30
 c103394:	0c1035e8 	.word	0x0c1035e8
 c103398:	0c7fff34 	.word	0x0c7fff34
 c10339c:	0c103610 	.word	0x0c103610
 c1033a0:	0c7fff38 	.word	0x0c7fff38
 c1033a4:	0c103638 	.word	0x0c103638
 c1033a8:	0c7fff3c 	.word	0x0c7fff3c
 c1033ac:	0c103660 	.word	0x0c103660
 c1033b0:	0c7fff40 	.word	0x0c7fff40
 c1033b4:	0c103688 	.word	0x0c103688
 c1033b8:	0c7fff44 	.word	0x0c7fff44
 c1033bc:	0c1036b0 	.word	0x0c1036b0
 c1033c0:	0c7fff48 	.word	0x0c7fff48
 c1033c4:	0c1036d8 	.word	0x0c1036d8
 c1033c8:	0c7fff4c 	.word	0x0c7fff4c
 c1033cc:	0c103700 	.word	0x0c103700
 c1033d0:	0c7fff50 	.word	0x0c7fff50
 c1033d4:	0c103728 	.word	0x0c103728
 c1033d8:	0c7fff54 	.word	0x0c7fff54
 c1033dc:	0c103750 	.word	0x0c103750
 c1033e0:	0c7fff58 	.word	0x0c7fff58
 c1033e4:	0c103778 	.word	0x0c103778
 c1033e8:	0c7fff5c 	.word	0x0c7fff5c
 c1033ec:	0c1037a0 	.word	0x0c1037a0
 c1033f0:	0c7fff60 	.word	0x0c7fff60
 c1033f4:	0c1037c8 	.word	0x0c1037c8
 c1033f8:	0c7fff64 	.word	0x0c7fff64
 c1033fc:	0c1037f0 	.word	0x0c1037f0
 c103400:	0c7fff68 	.word	0x0c7fff68
 c103404:	0c103818 	.word	0x0c103818
 c103408:	0c7fff6c 	.word	0x0c7fff6c
 c10340c:	0c103840 	.word	0x0c103840
 c103410:	0c7fff74 	.word	0x0c7fff74
 c103414:	0c103890 	.word	0x0c103890
 c103418:	0c7fff78 	.word	0x0c7fff78
 c10341c:	0c1038b8 	.word	0x0c1038b8
 c103420:	0c7fff70 	.word	0x0c7fff70
 c103424:	0c103868 	.word	0x0c103868
 c103428:	0c7fff7c 	.word	0x0c7fff7c
 c10342c:	0c1038e0 	.word	0x0c1038e0
 c103430:	0c7fff80 	.word	0x0c7fff80
 c103434:	0c103908 	.word	0x0c103908
 c103438:	0c7fff84 	.word	0x0c7fff84
 c10343c:	0c103930 	.word	0x0c103930

0c103440 <isr_SWI_dummy>:
//NO SE SI SE PONE EN TODOS LOS SEGS 0X75
void isr_SWI_dummy(void) {
 c103440:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c103444:	e1a0c00d 	mov	ip, sp
 c103448:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10344c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy");
 c103450:	e59f0010 	ldr	r0, [pc, #16]	; c103468 <isr_SWI_dummy+0x28>
 c103454:	eb0004b3 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103458:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10345c:	e3a02075 	mov	r2, #117	; 0x75
 c103460:	e5c32000 	strb	r2, [r3]
	while (1);
 c103464:	eafffffe 	b	c103464 <isr_SWI_dummy+0x24>
 c103468:	0c1058d8 	.word	0x0c1058d8

0c10346c <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy(void) {
 c10346c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c103470:	e1a0c00d 	mov	ip, sp
 c103474:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c103478:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy");
 c10347c:	e59f0010 	ldr	r0, [pc, #16]	; c103494 <isr_UNDEF_dummy+0x28>
 c103480:	eb0004a8 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103484:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103488:	e3a02075 	mov	r2, #117	; 0x75
 c10348c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103490:	eafffffe 	b	c103490 <isr_UNDEF_dummy+0x24>
 c103494:	0c105904 	.word	0x0c105904

0c103498 <isr_IRQ_dummy>:
}

void isr_IRQ_dummy(void) {
 c103498:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10349c:	e1a0c00d 	mov	ip, sp
 c1034a0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1034a4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy");
 c1034a8:	e59f0010 	ldr	r0, [pc, #16]	; c1034c0 <isr_IRQ_dummy+0x28>
 c1034ac:	eb00049d 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1034b0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1034b4:	e3a02075 	mov	r2, #117	; 0x75
 c1034b8:	e5c32000 	strb	r2, [r3]
	while (1);
 c1034bc:	eafffffe 	b	c1034bc <isr_IRQ_dummy+0x24>
 c1034c0:	0c105934 	.word	0x0c105934

0c1034c4 <isr_FIQ_dummy>:
}

void isr_FIQ_dummy(void) {
 c1034c4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1034c8:	e1a0c00d 	mov	ip, sp
 c1034cc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1034d0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy");
 c1034d4:	e59f0010 	ldr	r0, [pc, #16]	; c1034ec <isr_FIQ_dummy+0x28>
 c1034d8:	eb000492 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1034dc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1034e0:	e3a02075 	mov	r2, #117	; 0x75
 c1034e4:	e5c32000 	strb	r2, [r3]
	while (1);
 c1034e8:	eafffffe 	b	c1034e8 <isr_FIQ_dummy+0x24>
 c1034ec:	0c105960 	.word	0x0c105960

0c1034f0 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy(void) {
 c1034f0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1034f4:	e1a0c00d 	mov	ip, sp
 c1034f8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1034fc:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy");
 c103500:	e59f0010 	ldr	r0, [pc, #16]	; c103518 <isr_PABORT_dummy+0x28>
 c103504:	eb000487 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103508:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10350c:	e3a02075 	mov	r2, #117	; 0x75
 c103510:	e5c32000 	strb	r2, [r3]
	while (1);
 c103514:	eafffffe 	b	c103514 <isr_PABORT_dummy+0x24>
 c103518:	0c10598c 	.word	0x0c10598c

0c10351c <isr_DABORT_dummy>:
}

void isr_DABORT_dummy(void) {
 c10351c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c103520:	e1a0c00d 	mov	ip, sp
 c103524:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c103528:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy");
 c10352c:	e59f0010 	ldr	r0, [pc, #16]	; c103544 <isr_DABORT_dummy+0x28>
 c103530:	eb00047c 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103534:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103538:	e3a02075 	mov	r2, #117	; 0x75
 c10353c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103540:	eafffffe 	b	c103540 <isr_DABORT_dummy+0x24>
 c103544:	0c1059bc 	.word	0x0c1059bc

0c103548 <isr_ADC_dummy>:
}

void isr_ADC_dummy(void) {
 c103548:	e1a0c00d 	mov	ip, sp
 c10354c:	e92dd800 	push	{fp, ip, lr, pc}
 c103550:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy");
 c103554:	e59f0010 	ldr	r0, [pc, #16]	; c10356c <isr_ADC_dummy+0x24>
 c103558:	eb000472 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c10355c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103560:	e3a02075 	mov	r2, #117	; 0x75
 c103564:	e5c32000 	strb	r2, [r3]
	while (1);
 c103568:	eafffffe 	b	c103568 <isr_ADC_dummy+0x20>
 c10356c:	0c1059ec 	.word	0x0c1059ec

0c103570 <isr_RTC_dummy>:
}

void isr_RTC_dummy(void) {
 c103570:	e1a0c00d 	mov	ip, sp
 c103574:	e92dd800 	push	{fp, ip, lr, pc}
 c103578:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy");
 c10357c:	e59f0010 	ldr	r0, [pc, #16]	; c103594 <isr_RTC_dummy+0x24>
 c103580:	eb000468 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103584:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103588:	e3a02075 	mov	r2, #117	; 0x75
 c10358c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103590:	eafffffe 	b	c103590 <isr_RTC_dummy+0x20>
 c103594:	0c105a18 	.word	0x0c105a18

0c103598 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy(void) {
 c103598:	e1a0c00d 	mov	ip, sp
 c10359c:	e92dd800 	push	{fp, ip, lr, pc}
 c1035a0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy");
 c1035a4:	e59f0010 	ldr	r0, [pc, #16]	; c1035bc <isr_UTXD1_dummy+0x24>
 c1035a8:	eb00045e 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1035ac:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1035b0:	e3a02075 	mov	r2, #117	; 0x75
 c1035b4:	e5c32000 	strb	r2, [r3]
	while (1);
 c1035b8:	eafffffe 	b	c1035b8 <isr_UTXD1_dummy+0x20>
 c1035bc:	0c105a44 	.word	0x0c105a44

0c1035c0 <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy(void) {
 c1035c0:	e1a0c00d 	mov	ip, sp
 c1035c4:	e92dd800 	push	{fp, ip, lr, pc}
 c1035c8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy");
 c1035cc:	e59f0010 	ldr	r0, [pc, #16]	; c1035e4 <isr_UTXD0_dummy+0x24>
 c1035d0:	eb000454 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1035d4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1035d8:	e3a02075 	mov	r2, #117	; 0x75
 c1035dc:	e5c32000 	strb	r2, [r3]
	while (1);
 c1035e0:	eafffffe 	b	c1035e0 <isr_UTXD0_dummy+0x20>
 c1035e4:	0c105a74 	.word	0x0c105a74

0c1035e8 <isr_SIO_dummy>:
}

void isr_SIO_dummy(void) {
 c1035e8:	e1a0c00d 	mov	ip, sp
 c1035ec:	e92dd800 	push	{fp, ip, lr, pc}
 c1035f0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy");
 c1035f4:	e59f0010 	ldr	r0, [pc, #16]	; c10360c <isr_SIO_dummy+0x24>
 c1035f8:	eb00044a 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1035fc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103600:	e3a02075 	mov	r2, #117	; 0x75
 c103604:	e5c32000 	strb	r2, [r3]
	while (1);
 c103608:	eafffffe 	b	c103608 <isr_SIO_dummy+0x20>
 c10360c:	0c105aa4 	.word	0x0c105aa4

0c103610 <isr_IIC_dummy>:
}

void isr_IIC_dummy(void) {
 c103610:	e1a0c00d 	mov	ip, sp
 c103614:	e92dd800 	push	{fp, ip, lr, pc}
 c103618:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy");
 c10361c:	e59f0010 	ldr	r0, [pc, #16]	; c103634 <isr_IIC_dummy+0x24>
 c103620:	eb000440 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103624:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103628:	e3a02075 	mov	r2, #117	; 0x75
 c10362c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103630:	eafffffe 	b	c103630 <isr_IIC_dummy+0x20>
 c103634:	0c105ad0 	.word	0x0c105ad0

0c103638 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy(void) {
 c103638:	e1a0c00d 	mov	ip, sp
 c10363c:	e92dd800 	push	{fp, ip, lr, pc}
 c103640:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD1_dummy");
 c103644:	e59f0010 	ldr	r0, [pc, #16]	; c10365c <isr_URXD1_dummy+0x24>
 c103648:	eb000436 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c10364c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103650:	e3a02075 	mov	r2, #117	; 0x75
 c103654:	e5c32000 	strb	r2, [r3]
	while (1);
 c103658:	eafffffe 	b	c103658 <isr_URXD1_dummy+0x20>
 c10365c:	0c105afc 	.word	0x0c105afc

0c103660 <isr_URXD0_dummy>:
}

void isr_URXD0_dummy(void) {
 c103660:	e1a0c00d 	mov	ip, sp
 c103664:	e92dd800 	push	{fp, ip, lr, pc}
 c103668:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD0_dummy");
 c10366c:	e59f0010 	ldr	r0, [pc, #16]	; c103684 <isr_URXD0_dummy+0x24>
 c103670:	eb00042c 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103674:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103678:	e3a02075 	mov	r2, #117	; 0x75
 c10367c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103680:	eafffffe 	b	c103680 <isr_URXD0_dummy+0x20>
 c103684:	0c105b2c 	.word	0x0c105b2c

0c103688 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy(void) {
 c103688:	e1a0c00d 	mov	ip, sp
 c10368c:	e92dd800 	push	{fp, ip, lr, pc}
 c103690:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy");
 c103694:	e59f0010 	ldr	r0, [pc, #16]	; c1036ac <isr_TIMER5_dummy+0x24>
 c103698:	eb000422 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c10369c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1036a0:	e3a02075 	mov	r2, #117	; 0x75
 c1036a4:	e5c32000 	strb	r2, [r3]
	while (1);
 c1036a8:	eafffffe 	b	c1036a8 <isr_TIMER5_dummy+0x20>
 c1036ac:	0c105b5c 	.word	0x0c105b5c

0c1036b0 <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy(void) {
 c1036b0:	e1a0c00d 	mov	ip, sp
 c1036b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1036b8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy");
 c1036bc:	e59f0010 	ldr	r0, [pc, #16]	; c1036d4 <isr_TIMER4_dummy+0x24>
 c1036c0:	eb000418 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1036c4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1036c8:	e3a02075 	mov	r2, #117	; 0x75
 c1036cc:	e5c32000 	strb	r2, [r3]
	while (1);
 c1036d0:	eafffffe 	b	c1036d0 <isr_TIMER4_dummy+0x20>
 c1036d4:	0c105b8c 	.word	0x0c105b8c

0c1036d8 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy(void) {
 c1036d8:	e1a0c00d 	mov	ip, sp
 c1036dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1036e0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy");
 c1036e4:	e59f0010 	ldr	r0, [pc, #16]	; c1036fc <isr_TIMER3_dummy+0x24>
 c1036e8:	eb00040e 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1036ec:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1036f0:	e3a02075 	mov	r2, #117	; 0x75
 c1036f4:	e5c32000 	strb	r2, [r3]
	while (1);
 c1036f8:	eafffffe 	b	c1036f8 <isr_TIMER3_dummy+0x20>
 c1036fc:	0c105bbc 	.word	0x0c105bbc

0c103700 <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy(void) {
 c103700:	e1a0c00d 	mov	ip, sp
 c103704:	e92dd800 	push	{fp, ip, lr, pc}
 c103708:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c10370c:	e59f0010 	ldr	r0, [pc, #16]	; c103724 <isr_TIMER2_dummy+0x24>
 c103710:	eb000404 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103714:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103718:	e3a02075 	mov	r2, #117	; 0x75
 c10371c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103720:	eafffffe 	b	c103720 <isr_TIMER2_dummy+0x20>
 c103724:	0c105bec 	.word	0x0c105bec

0c103728 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy(void) {
 c103728:	e1a0c00d 	mov	ip, sp
 c10372c:	e92dd800 	push	{fp, ip, lr, pc}
 c103730:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c103734:	e59f0010 	ldr	r0, [pc, #16]	; c10374c <isr_TIMER1_dummy+0x24>
 c103738:	eb0003fa 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c10373c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103740:	e3a02075 	mov	r2, #117	; 0x75
 c103744:	e5c32000 	strb	r2, [r3]
	while (1);
 c103748:	eafffffe 	b	c103748 <isr_TIMER1_dummy+0x20>
 c10374c:	0c105bec 	.word	0x0c105bec

0c103750 <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy(void) {
 c103750:	e1a0c00d 	mov	ip, sp
 c103754:	e92dd800 	push	{fp, ip, lr, pc}
 c103758:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy");
 c10375c:	e59f0010 	ldr	r0, [pc, #16]	; c103774 <isr_TIMER0_dummy+0x24>
 c103760:	eb0003f0 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103764:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103768:	e3a02075 	mov	r2, #117	; 0x75
 c10376c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103770:	eafffffe 	b	c103770 <isr_TIMER0_dummy+0x20>
 c103774:	0c105c1c 	.word	0x0c105c1c

0c103778 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy(void) {
 c103778:	e1a0c00d 	mov	ip, sp
 c10377c:	e92dd800 	push	{fp, ip, lr, pc}
 c103780:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy");
 c103784:	e59f0010 	ldr	r0, [pc, #16]	; c10379c <isr_UERR01_dummy+0x24>
 c103788:	eb0003e6 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c10378c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103790:	e3a02075 	mov	r2, #117	; 0x75
 c103794:	e5c32000 	strb	r2, [r3]
	while (1);
 c103798:	eafffffe 	b	c103798 <isr_UERR01_dummy+0x20>
 c10379c:	0c105c4c 	.word	0x0c105c4c

0c1037a0 <isr_WDT_dummy>:
}

void isr_WDT_dummy(void) {
 c1037a0:	e1a0c00d 	mov	ip, sp
 c1037a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1037a8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy");
 c1037ac:	e59f0010 	ldr	r0, [pc, #16]	; c1037c4 <isr_WDT_dummy+0x24>
 c1037b0:	eb0003dc 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1037b4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1037b8:	e3a02075 	mov	r2, #117	; 0x75
 c1037bc:	e5c32000 	strb	r2, [r3]
	while (1);
 c1037c0:	eafffffe 	b	c1037c0 <isr_WDT_dummy+0x20>
 c1037c4:	0c105c7c 	.word	0x0c105c7c

0c1037c8 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy(void) {
 c1037c8:	e1a0c00d 	mov	ip, sp
 c1037cc:	e92dd800 	push	{fp, ip, lr, pc}
 c1037d0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy");
 c1037d4:	e59f0010 	ldr	r0, [pc, #16]	; c1037ec <isr_BDMA1_dummy+0x24>
 c1037d8:	eb0003d2 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1037dc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1037e0:	e3a02075 	mov	r2, #117	; 0x75
 c1037e4:	e5c32000 	strb	r2, [r3]
	while (1);
 c1037e8:	eafffffe 	b	c1037e8 <isr_BDMA1_dummy+0x20>
 c1037ec:	0c105ca8 	.word	0x0c105ca8

0c1037f0 <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy(void) {
 c1037f0:	e1a0c00d 	mov	ip, sp
 c1037f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1037f8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy");
 c1037fc:	e59f0010 	ldr	r0, [pc, #16]	; c103814 <isr_BDMA0_dummy+0x24>
 c103800:	eb0003c8 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103804:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103808:	e3a02075 	mov	r2, #117	; 0x75
 c10380c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103810:	eafffffe 	b	c103810 <isr_BDMA0_dummy+0x20>
 c103814:	0c105cd8 	.word	0x0c105cd8

0c103818 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy(void) {
 c103818:	e1a0c00d 	mov	ip, sp
 c10381c:	e92dd800 	push	{fp, ip, lr, pc}
 c103820:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy");
 c103824:	e59f0010 	ldr	r0, [pc, #16]	; c10383c <isr_ZDMA1_dummy+0x24>
 c103828:	eb0003be 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c10382c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103830:	e3a02075 	mov	r2, #117	; 0x75
 c103834:	e5c32000 	strb	r2, [r3]
	while (1);
 c103838:	eafffffe 	b	c103838 <isr_ZDMA1_dummy+0x20>
 c10383c:	0c105d08 	.word	0x0c105d08

0c103840 <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy(void) {
 c103840:	e1a0c00d 	mov	ip, sp
 c103844:	e92dd800 	push	{fp, ip, lr, pc}
 c103848:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy");
 c10384c:	e59f0010 	ldr	r0, [pc, #16]	; c103864 <isr_ZDMA0_dummy+0x24>
 c103850:	eb0003b4 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103854:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103858:	e3a02075 	mov	r2, #117	; 0x75
 c10385c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103860:	eafffffe 	b	c103860 <isr_ZDMA0_dummy+0x20>
 c103864:	0c105d38 	.word	0x0c105d38

0c103868 <isr_TICK_dummy>:
}

void isr_TICK_dummy(void) {
 c103868:	e1a0c00d 	mov	ip, sp
 c10386c:	e92dd800 	push	{fp, ip, lr, pc}
 c103870:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy");
 c103874:	e59f0010 	ldr	r0, [pc, #16]	; c10388c <isr_TICK_dummy+0x24>
 c103878:	eb0003aa 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c10387c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103880:	e3a02075 	mov	r2, #117	; 0x75
 c103884:	e5c32000 	strb	r2, [r3]
	while (1);
 c103888:	eafffffe 	b	c103888 <isr_TICK_dummy+0x20>
 c10388c:	0c105d68 	.word	0x0c105d68

0c103890 <isr_PB_dummy>:
}

void isr_PB_dummy(void) {
 c103890:	e1a0c00d 	mov	ip, sp
 c103894:	e92dd800 	push	{fp, ip, lr, pc}
 c103898:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PB_dummy");
 c10389c:	e59f0010 	ldr	r0, [pc, #16]	; c1038b4 <isr_PB_dummy+0x24>
 c1038a0:	eb0003a0 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1038a4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1038a8:	e3a02075 	mov	r2, #117	; 0x75
 c1038ac:	e5c32000 	strb	r2, [r3]
	while (1);
 c1038b0:	eafffffe 	b	c1038b0 <isr_PB_dummy+0x20>
 c1038b4:	0c105d98 	.word	0x0c105d98

0c1038b8 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy(void) {
 c1038b8:	e1a0c00d 	mov	ip, sp
 c1038bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1038c0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy");
 c1038c4:	e59f0010 	ldr	r0, [pc, #16]	; c1038dc <isr_ETHERNET_dummy+0x24>
 c1038c8:	eb000396 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1038cc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1038d0:	e3a02075 	mov	r2, #117	; 0x75
 c1038d4:	e5c32000 	strb	r2, [r3]
	while (1);
 c1038d8:	eafffffe 	b	c1038d8 <isr_ETHERNET_dummy+0x20>
 c1038dc:	0c105dc4 	.word	0x0c105dc4

0c1038e0 <isr_TS_dummy>:
}

void isr_TS_dummy(void) {
 c1038e0:	e1a0c00d 	mov	ip, sp
 c1038e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1038e8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TS_dummy");
 c1038ec:	e59f0010 	ldr	r0, [pc, #16]	; c103904 <isr_TS_dummy+0x24>
 c1038f0:	eb00038c 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c1038f4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1038f8:	e3a02075 	mov	r2, #117	; 0x75
 c1038fc:	e5c32000 	strb	r2, [r3]
	while (1);
 c103900:	eafffffe 	b	c103900 <isr_TS_dummy+0x20>
 c103904:	0c105df8 	.word	0x0c105df8

0c103908 <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy(void) {
 c103908:	e1a0c00d 	mov	ip, sp
 c10390c:	e92dd800 	push	{fp, ip, lr, pc}
 c103910:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy");
 c103914:	e59f0010 	ldr	r0, [pc, #16]	; c10392c <isr_KEYPAD_dummy+0x24>
 c103918:	eb000382 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c10391c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103920:	e3a02075 	mov	r2, #117	; 0x75
 c103924:	e5c32000 	strb	r2, [r3]
	while (1);
 c103928:	eafffffe 	b	c103928 <isr_KEYPAD_dummy+0x20>
 c10392c:	0c105e24 	.word	0x0c105e24

0c103930 <isr_USB_dummy>:
}

void isr_USB_dummy(void) {
 c103930:	e1a0c00d 	mov	ip, sp
 c103934:	e92dd800 	push	{fp, ip, lr, pc}
 c103938:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_USB_dummy");
 c10393c:	e59f0010 	ldr	r0, [pc, #16]	; c103954 <isr_USB_dummy+0x24>
 c103940:	eb000378 	bl	c104728 <uart0_puts>
	SEGS = 0x75;
 c103944:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c103948:	e3a02075 	mov	r2, #117	; 0x75
 c10394c:	e5c32000 	strb	r2, [r3]
	while (1);
 c103950:	eafffffe 	b	c103950 <isr_USB_dummy+0x20>
 c103954:	0c105e54 	.word	0x0c105e54

0c103958 <show_sys_info>:
}
//NO SE QUE HAY QUE PONER AQUI
static void show_sys_info(void) {
 c103958:	e1a0c00d 	mov	ip, sp
 c10395c:	e92dd800 	push	{fp, ip, lr, pc}
 c103960:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n Choriso");
 c103964:	e59f000c 	ldr	r0, [pc, #12]	; c103978 <show_sys_info+0x20>
 c103968:	eb00036e 	bl	c104728 <uart0_puts>
}
 c10396c:	e24bd00c 	sub	sp, fp, #12
 c103970:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103974:	e12fff1e 	bx	lr
 c103978:	0c105e80 	.word	0x0c105e80

0c10397c <sleep>:

inline void sleep(void) {
 c10397c:	e1a0c00d 	mov	ip, sp
 c103980:	e92dd800 	push	{fp, ip, lr, pc}
 c103984:	e24cb004 	sub	fp, ip, #4
	CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c103988:	e59f3018 	ldr	r3, [pc, #24]	; c1039a8 <sleep+0x2c>
 c10398c:	e59f2014 	ldr	r2, [pc, #20]	; c1039a8 <sleep+0x2c>
 c103990:	e5922000 	ldr	r2, [r2]
 c103994:	e3822004 	orr	r2, r2, #4
 c103998:	e5832000 	str	r2, [r3]
}
 c10399c:	e24bd00c 	sub	sp, fp, #12
 c1039a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1039a4:	e12fff1e 	bx	lr
 c1039a8:	01d80004 	.word	0x01d80004

0c1039ac <sys_recovery>:

static void sys_recovery(void) {
 c1039ac:	e1a0c00d 	mov	ip, sp
 c1039b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1039b4:	e24cb004 	sub	fp, ip, #4
 c1039b8:	e24dd018 	sub	sp, sp, #24
uint8 mode;
uint32 sp, fp;
uint32 *addrSrc, *addrDst;
uint32 diffStacks;

asm volatile ( "str sp, %0" : "=m" (sp) : : );
 c1039bc:	e50bd01c 	str	sp, [fp, #-28]	; 0xffffffe4
    // lee el puntero a la cima de la pila de excepción (SP)
asm volatile ( "str fp, %0" : "=m" (fp) : : );
 c1039c0:	e50bb020 	str	fp, [fp, #-32]	; 0xffffffe0
 // lee el puntero al marco de activación (FP) de sys_recovery() en la pila de excepción

GET_OPMODE(&mode);    // lee el modo de ejecución del procesador
 c1039c4:	e10f0000 	mrs	r0, CPSR
 c1039c8:	e200001f 	and	r0, r0, #31
 c1039cc:	e54b0015 	strb	r0, [fp, #-21]	; 0xffffffeb
switch (mode) {
 c1039d0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1039d4:	e2433011 	sub	r3, r3, #17
 c1039d8:	e353000a 	cmp	r3, #10
 c1039dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c1039e0:	ea00001e 	b	c103a60 <sys_recovery+0xb4>
 c1039e4:	0c103a24 	.word	0x0c103a24
 c1039e8:	0c103a10 	.word	0x0c103a10
 c1039ec:	0c103a60 	.word	0x0c103a60
 c1039f0:	0c103a60 	.word	0x0c103a60
 c1039f4:	0c103a60 	.word	0x0c103a60
 c1039f8:	0c103a60 	.word	0x0c103a60
 c1039fc:	0c103a38 	.word	0x0c103a38
 c103a00:	0c103a60 	.word	0x0c103a60
 c103a04:	0c103a60 	.word	0x0c103a60
 c103a08:	0c103a60 	.word	0x0c103a60
 c103a0c:	0c103a4c 	.word	0x0c103a4c
case IRQMODE:
diffStacks = IRQSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila IRQ y la SVC
 c103a10:	e3a03c03 	mov	r3, #768	; 0x300
 c103a14:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) IRQSTACK;         // base de la pila IRQ
 c103a18:	e59f3198 	ldr	r3, [pc, #408]	; c103bb8 <sys_recovery+0x20c>
 c103a1c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c103a20:	ea00000f 	b	c103a64 <sys_recovery+0xb8>
case FIQMODE:
diffStacks = FIQSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila FIQ y la SVC
 c103a24:	e3a03b01 	mov	r3, #1024	; 0x400
 c103a28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) FIQSTACK;         // base de la pila FIQ
 c103a2c:	e59f3188 	ldr	r3, [pc, #392]	; c103bbc <sys_recovery+0x210>
 c103a30:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c103a34:	ea00000a 	b	c103a64 <sys_recovery+0xb8>
case ABTMODE:
diffStacks = ABTSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila ABT y la SVC
 c103a38:	e3a03c02 	mov	r3, #512	; 0x200
 c103a3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) ABTSTACK;         // base de la pila ABT
 c103a40:	e59f3178 	ldr	r3, [pc, #376]	; c103bc0 <sys_recovery+0x214>
 c103a44:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c103a48:	ea000005 	b	c103a64 <sys_recovery+0xb8>
case UNDMODE:
diffStacks = UNDSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila UND y la SVC
 c103a4c:	e3a03c01 	mov	r3, #256	; 0x100
 c103a50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) UNDSTACK;         // base de la pila UND
 c103a54:	e59f3168 	ldr	r3, [pc, #360]	; c103bc4 <sys_recovery+0x218>
 c103a58:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c103a5c:	ea000000 	b	c103a64 <sys_recovery+0xb8>
 // Habría que hacer algo análogo a lo anterior y además para volver a modo SVC dado que no es válido SET_OPMODE( SVCMODE ), es necesario esto:
 // pISR_SWI = (uint32) isr_SWI;
 // SWI( 0 );
default:
while (1)
;                           // aquí no debería llegarse
 c103a60:	eafffffe 	b	c103a60 <sys_recovery+0xb4>
break;
}

asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );
 c103a64:	e51bd024 	ldr	sp, [fp, #-36]	; 0xffffffdc
 // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento

for (addrDst = (uint32 *) SVCSTACK; addrSrc > (uint32 *) sp;) // copia el contenido completo de la pila excepción en la pila SVC
 c103a68:	e59f3158 	ldr	r3, [pc, #344]	; c103bc8 <sys_recovery+0x21c>
 c103a6c:	e50b3010 	str	r3, [fp, #-16]
 c103a70:	ea000009 	b	c103a9c <sys_recovery+0xf0>
*(--addrDst) = *(--addrSrc);
 c103a74:	e51b3010 	ldr	r3, [fp, #-16]
 c103a78:	e2433004 	sub	r3, r3, #4
 c103a7c:	e50b3010 	str	r3, [fp, #-16]
 c103a80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c103a84:	e2433004 	sub	r3, r3, #4
 c103a88:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
 c103a8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c103a90:	e5932000 	ldr	r2, [r3]
 c103a94:	e51b3010 	ldr	r3, [fp, #-16]
 c103a98:	e5832000 	str	r2, [r3]
}

asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );
 // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento

for (addrDst = (uint32 *) SVCSTACK; addrSrc > (uint32 *) sp;) // copia el contenido completo de la pila excepción en la pila SVC
 c103a9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103aa0:	e1a02003 	mov	r2, r3
 c103aa4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c103aa8:	e1520003 	cmp	r2, r3
 c103aac:	3afffff0 	bcc	c103a74 <sys_recovery+0xc8>
*(--addrDst) = *(--addrSrc);

addrDst = (uint32 *) (fp - diffStacks); // carga el puntero al marco de activación de sys_recovery() en la pila SVC
 c103ab0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c103ab4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103ab8:	e0633002 	rsb	r3, r3, r2
 c103abc:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el PC apilado
 c103ac0:	e51b3010 	ldr	r3, [fp, #-16]
 c103ac4:	e2433004 	sub	r3, r3, #4
 c103ac8:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el LR apilado
 c103acc:	e51b3010 	ldr	r3, [fp, #-16]
 c103ad0:	e2433004 	sub	r3, r3, #4
 c103ad4:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks;    // actualiza SP apilado para que apunte a la pila SVC
 c103ad8:	e51b3010 	ldr	r3, [fp, #-16]
 c103adc:	e5932000 	ldr	r2, [r3]
 c103ae0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103ae4:	e0632002 	rsb	r2, r3, r2
 c103ae8:	e51b3010 	ldr	r3, [fp, #-16]
 c103aec:	e5832000 	str	r2, [r3]
addrDst--;                             // salta el SP apilado
 c103af0:	e51b3010 	ldr	r3, [fp, #-16]
 c103af4:	e2433004 	sub	r3, r3, #4
 c103af8:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks; // actualiza el FP apilado para que apunte a la pila SVC
 c103afc:	e51b3010 	ldr	r3, [fp, #-16]
 c103b00:	e5932000 	ldr	r2, [r3]
 c103b04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103b08:	e0632002 	rsb	r2, r3, r2
 c103b0c:	e51b3010 	ldr	r3, [fp, #-16]
 c103b10:	e5832000 	str	r2, [r3]

addrDst = (uint32 *) (*addrDst); // carga el puntero al marco de activación de sys_init()
 c103b14:	e51b3010 	ldr	r3, [fp, #-16]
 c103b18:	e5933000 	ldr	r3, [r3]
 c103b1c:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el PC apilado
 c103b20:	e51b3010 	ldr	r3, [fp, #-16]
 c103b24:	e2433004 	sub	r3, r3, #4
 c103b28:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el LR apilado
 c103b2c:	e51b3010 	ldr	r3, [fp, #-16]
 c103b30:	e2433004 	sub	r3, r3, #4
 c103b34:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks;    // actualiza SP apilado para que apunte a la pila SVC
 c103b38:	e51b3010 	ldr	r3, [fp, #-16]
 c103b3c:	e5932000 	ldr	r2, [r3]
 c103b40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103b44:	e0632002 	rsb	r2, r3, r2
 c103b48:	e51b3010 	ldr	r3, [fp, #-16]
 c103b4c:	e5832000 	str	r2, [r3]
addrDst--;                             // salta el SP apilado
 c103b50:	e51b3010 	ldr	r3, [fp, #-16]
 c103b54:	e2433004 	sub	r3, r3, #4
 c103b58:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks; // actualiza el FP apilado para que apunte a la pila SVC
 c103b5c:	e51b3010 	ldr	r3, [fp, #-16]
 c103b60:	e5932000 	ldr	r2, [r3]
 c103b64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103b68:	e0632002 	rsb	r2, r3, r2
 c103b6c:	e51b3010 	ldr	r3, [fp, #-16]
 c103b70:	e5832000 	str	r2, [r3]

SET_OPMODE(SVCMODE);                           // cambia a modo SVC
 c103b74:	e10f0000 	mrs	r0, CPSR
 c103b78:	e3c0001f 	bic	r0, r0, #31
 c103b7c:	e3800013 	orr	r0, r0, #19
 c103b80:	e121f000 	msr	CPSR_c, r0

sp -= diffStacks;
 c103b84:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c103b88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103b8c:	e0633002 	rsb	r3, r3, r2
 c103b90:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
asm volatile ( "ldr sp, %0" : : "m" (sp) : );
 c103b94:	e51bd01c 	ldr	sp, [fp, #-28]	; 0xffffffe4
    // actualiza SP_svc para que apunte a la cima de la pila SVC

fp -= diffStacks;
 c103b98:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c103b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103ba0:	e0633002 	rsb	r3, r3, r2
 c103ba4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
asm volatile ( "ldr fp, %0" : : "m" (fp) : );
 c103ba8:	e51bb020 	ldr	fp, [fp, #-32]	; 0xffffffe0
 // actualiza FP para que apunte al marco de la pila SVC, debe ser siempre la última sentencia
}
 c103bac:	e24bd00c 	sub	sp, fp, #12
 c103bb0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103bb4:	e12fff1e 	bx	lr
 c103bb8:	0c7ff400 	.word	0x0c7ff400
 c103bbc:	0c7ff500 	.word	0x0c7ff500
 c103bc0:	0c7ff300 	.word	0x0c7ff300
 c103bc4:	0c7ff200 	.word	0x0c7ff200
 c103bc8:	0c7ff100 	.word	0x0c7ff100

0c103bcc <timers_init>:
static uint32 loop_s = 0;

static void sw_delay_init( void );

void timers_init( void )
{
 c103bcc:	e1a0c00d 	mov	ip, sp
 c103bd0:	e92dd800 	push	{fp, ip, lr, pc}
 c103bd4:	e24cb004 	sub	fp, ip, #4
    TCFG0 = 0x0;
 c103bd8:	e59f30bc 	ldr	r3, [pc, #188]	; c103c9c <timers_init+0xd0>
 c103bdc:	e3a02000 	mov	r2, #0
 c103be0:	e5832000 	str	r2, [r3]
    TCFG1 = 0x0;
 c103be4:	e59f30b4 	ldr	r3, [pc, #180]	; c103ca0 <timers_init+0xd4>
 c103be8:	e3a02000 	mov	r2, #0
 c103bec:	e5832000 	str	r2, [r3]

    TCNTB0 = 0x0;
 c103bf0:	e59f30ac 	ldr	r3, [pc, #172]	; c103ca4 <timers_init+0xd8>
 c103bf4:	e3a02000 	mov	r2, #0
 c103bf8:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c103bfc:	e59f30a4 	ldr	r3, [pc, #164]	; c103ca8 <timers_init+0xdc>
 c103c00:	e3a02000 	mov	r2, #0
 c103c04:	e5832000 	str	r2, [r3]
    TCNTB1 = 0x0;
 c103c08:	e59f309c 	ldr	r3, [pc, #156]	; c103cac <timers_init+0xe0>
 c103c0c:	e3a02000 	mov	r2, #0
 c103c10:	e5832000 	str	r2, [r3]
    TCMPB1 = 0x0;
 c103c14:	e59f3094 	ldr	r3, [pc, #148]	; c103cb0 <timers_init+0xe4>
 c103c18:	e3a02000 	mov	r2, #0
 c103c1c:	e5832000 	str	r2, [r3]
    TCNTB2 = 0x0;
 c103c20:	e59f308c 	ldr	r3, [pc, #140]	; c103cb4 <timers_init+0xe8>
 c103c24:	e3a02000 	mov	r2, #0
 c103c28:	e5832000 	str	r2, [r3]
    TCMPB2 = 0x0;
 c103c2c:	e59f3084 	ldr	r3, [pc, #132]	; c103cb8 <timers_init+0xec>
 c103c30:	e3a02000 	mov	r2, #0
 c103c34:	e5832000 	str	r2, [r3]
    TCNTB3 = 0x0;
 c103c38:	e59f307c 	ldr	r3, [pc, #124]	; c103cbc <timers_init+0xf0>
 c103c3c:	e3a02000 	mov	r2, #0
 c103c40:	e5832000 	str	r2, [r3]
    TCMPB3 = 0x0;
 c103c44:	e59f3074 	ldr	r3, [pc, #116]	; c103cc0 <timers_init+0xf4>
 c103c48:	e3a02000 	mov	r2, #0
 c103c4c:	e5832000 	str	r2, [r3]
    TCNTB4 = 0x0;
 c103c50:	e59f306c 	ldr	r3, [pc, #108]	; c103cc4 <timers_init+0xf8>
 c103c54:	e3a02000 	mov	r2, #0
 c103c58:	e5832000 	str	r2, [r3]
    TCMPB4 = 0x0;
 c103c5c:	e59f3064 	ldr	r3, [pc, #100]	; c103cc8 <timers_init+0xfc>
 c103c60:	e3a02000 	mov	r2, #0
 c103c64:	e5832000 	str	r2, [r3]
    TCNTB5 = 0x0;
 c103c68:	e59f305c 	ldr	r3, [pc, #92]	; c103ccc <timers_init+0x100>
 c103c6c:	e3a02000 	mov	r2, #0
 c103c70:	e5832000 	str	r2, [r3]

    TCON = 0x444442;//no estamos muy allï¿½
 c103c74:	e59f3054 	ldr	r3, [pc, #84]	; c103cd0 <timers_init+0x104>
 c103c78:	e59f2054 	ldr	r2, [pc, #84]	; c103cd4 <timers_init+0x108>
 c103c7c:	e5832000 	str	r2, [r3]
    TCON = 0x0;//azpiricuetos
 c103c80:	e59f3048 	ldr	r3, [pc, #72]	; c103cd0 <timers_init+0x104>
 c103c84:	e3a02000 	mov	r2, #0
 c103c88:	e5832000 	str	r2, [r3]

    sw_delay_init();
 c103c8c:	eb000011 	bl	c103cd8 <sw_delay_init>
}
 c103c90:	e24bd00c 	sub	sp, fp, #12
 c103c94:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103c98:	e12fff1e 	bx	lr
 c103c9c:	01d50000 	.word	0x01d50000
 c103ca0:	01d50004 	.word	0x01d50004
 c103ca4:	01d5000c 	.word	0x01d5000c
 c103ca8:	01d50010 	.word	0x01d50010
 c103cac:	01d50018 	.word	0x01d50018
 c103cb0:	01d5001c 	.word	0x01d5001c
 c103cb4:	01d50024 	.word	0x01d50024
 c103cb8:	01d50028 	.word	0x01d50028
 c103cbc:	01d50030 	.word	0x01d50030
 c103cc0:	01d50034 	.word	0x01d50034
 c103cc4:	01d5003c 	.word	0x01d5003c
 c103cc8:	01d50040 	.word	0x01d50040
 c103ccc:	01d50048 	.word	0x01d50048
 c103cd0:	01d50008 	.word	0x01d50008
 c103cd4:	00444442 	.word	0x00444442

0c103cd8 <sw_delay_init>:

static void sw_delay_init( void )
{
 c103cd8:	e1a0c00d 	mov	ip, sp
 c103cdc:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c103ce0:	e24cb004 	sub	fp, ip, #4
 c103ce4:	e24dd00c 	sub	sp, sp, #12
    uint32 i;
    
    timer3_start();
 c103ce8:	eb0000d4 	bl	c104040 <timer3_start>
    for( i=1000000; i; i--);
 c103cec:	e59f3088 	ldr	r3, [pc, #136]	; c103d7c <sw_delay_init+0xa4>
 c103cf0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c103cf4:	ea000002 	b	c103d04 <sw_delay_init+0x2c>
 c103cf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103cfc:	e2433001 	sub	r3, r3, #1
 c103d00:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c103d04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103d08:	e3530000 	cmp	r3, #0
 c103d0c:	1afffff9 	bne	c103cf8 <sw_delay_init+0x20>
    loop_s = ((uint64)1000000*10000)/timer3_stop();
 c103d10:	eb0000f6 	bl	c1040f0 <timer3_stop>
 c103d14:	e1a03000 	mov	r3, r0
 c103d18:	e1a02003 	mov	r2, r3
 c103d1c:	e1a03002 	mov	r3, r2
 c103d20:	e3a04000 	mov	r4, #0
 c103d24:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c103d28:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c103d2c:	e2800b01 	add	r0, r0, #1024	; 0x400
 c103d30:	e3a01002 	mov	r1, #2
 c103d34:	e1a02003 	mov	r2, r3
 c103d38:	e1a03004 	mov	r3, r4
 c103d3c:	eb0003fd 	bl	c104d38 <__aeabi_uldivmod>
 c103d40:	e1a03000 	mov	r3, r0
 c103d44:	e1a04001 	mov	r4, r1
 c103d48:	e1a02003 	mov	r2, r3
 c103d4c:	e59f302c 	ldr	r3, [pc, #44]	; c103d80 <sw_delay_init+0xa8>
 c103d50:	e5832000 	str	r2, [r3]
    loop_ms = loop_s / 1000;
 c103d54:	e59f3024 	ldr	r3, [pc, #36]	; c103d80 <sw_delay_init+0xa8>
 c103d58:	e5932000 	ldr	r2, [r3]
 c103d5c:	e59f3020 	ldr	r3, [pc, #32]	; c103d84 <sw_delay_init+0xac>
 c103d60:	e0831392 	umull	r1, r3, r2, r3
 c103d64:	e1a02323 	lsr	r2, r3, #6
 c103d68:	e59f3018 	ldr	r3, [pc, #24]	; c103d88 <sw_delay_init+0xb0>
 c103d6c:	e5832000 	str	r2, [r3]
};
 c103d70:	e24bd010 	sub	sp, fp, #16
 c103d74:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c103d78:	e12fff1e 	bx	lr
 c103d7c:	000f4240 	.word	0x000f4240
 c103d80:	0c106f50 	.word	0x0c106f50
 c103d84:	10624dd3 	.word	0x10624dd3
 c103d88:	0c106f4c 	.word	0x0c106f4c

0c103d8c <wait_for_1ms>:

void wait_for_1ms(){
 c103d8c:	e1a0c00d 	mov	ip, sp
 c103d90:	e92dd800 	push	{fp, ip, lr, pc}
 c103d94:	e24cb004 	sub	fp, ip, #4
	//para 64MHz, N = 0, D = 2, C = 32000 de las diapos
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (0 << 8);//N
 c103d98:	e59f3090 	ldr	r3, [pc, #144]	; c103e30 <wait_for_1ms+0xa4>
 c103d9c:	e59f208c 	ldr	r2, [pc, #140]	; c103e30 <wait_for_1ms+0xa4>
 c103da0:	e5922000 	ldr	r2, [r2]
 c103da4:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c103da8:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (0 << 12);//D
 c103dac:	e59f3080 	ldr	r3, [pc, #128]	; c103e34 <wait_for_1ms+0xa8>
 c103db0:	e59f207c 	ldr	r2, [pc, #124]	; c103e34 <wait_for_1ms+0xa8>
 c103db4:	e5922000 	ldr	r2, [r2]
 c103db8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c103dbc:	e5832000 	str	r2, [r3]
	TCNTB3 = 32000;//C
 c103dc0:	e59f3070 	ldr	r3, [pc, #112]	; c103e38 <wait_for_1ms+0xac>
 c103dc4:	e3a02c7d 	mov	r2, #32000	; 0x7d00
 c103dc8:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c103dcc:	e59f3068 	ldr	r3, [pc, #104]	; c103e3c <wait_for_1ms+0xb0>
 c103dd0:	e59f2064 	ldr	r2, [pc, #100]	; c103e3c <wait_for_1ms+0xb0>
 c103dd4:	e5922000 	ldr	r2, [r2]
 c103dd8:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c103ddc:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c103de0:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c103de4:	e59f3050 	ldr	r3, [pc, #80]	; c103e3c <wait_for_1ms+0xb0>
 c103de8:	e59f204c 	ldr	r2, [pc, #76]	; c103e3c <wait_for_1ms+0xb0>
 c103dec:	e5922000 	ldr	r2, [r2]
 c103df0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c103df4:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c103df8:	e5832000 	str	r2, [r3]
	while( !TCNTO3 );
 c103dfc:	e1a00000 	nop			; (mov r0, r0)
 c103e00:	e59f3038 	ldr	r3, [pc, #56]	; c103e40 <wait_for_1ms+0xb4>
 c103e04:	e5933000 	ldr	r3, [r3]
 c103e08:	e3530000 	cmp	r3, #0
 c103e0c:	0afffffb 	beq	c103e00 <wait_for_1ms+0x74>
	while( TCNTO3 );
 c103e10:	e1a00000 	nop			; (mov r0, r0)
 c103e14:	e59f3024 	ldr	r3, [pc, #36]	; c103e40 <wait_for_1ms+0xb4>
 c103e18:	e5933000 	ldr	r3, [r3]
 c103e1c:	e3530000 	cmp	r3, #0
 c103e20:	1afffffb 	bne	c103e14 <wait_for_1ms+0x88>
}
 c103e24:	e24bd00c 	sub	sp, fp, #12
 c103e28:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103e2c:	e12fff1e 	bx	lr
 c103e30:	01d50000 	.word	0x01d50000
 c103e34:	01d50004 	.word	0x01d50004
 c103e38:	01d50030 	.word	0x01d50030
 c103e3c:	01d50008 	.word	0x01d50008
 c103e40:	01d50038 	.word	0x01d50038

0c103e44 <timer3_delay_ms>:
void timer3_delay_ms( uint16 n )
{
 c103e44:	e1a0c00d 	mov	ip, sp
 c103e48:	e92dd800 	push	{fp, ip, lr, pc}
 c103e4c:	e24cb004 	sub	fp, ip, #4
 c103e50:	e24dd008 	sub	sp, sp, #8
 c103e54:	e1a03000 	mov	r3, r0
 c103e58:	e14b30be 	strh	r3, [fp, #-14]
    for(;n;n--){
 c103e5c:	ea000003 	b	c103e70 <timer3_delay_ms+0x2c>
        wait_for_1ms();
 c103e60:	ebffffc9 	bl	c103d8c <wait_for_1ms>
	while( !TCNTO3 );
	while( TCNTO3 );
}
void timer3_delay_ms( uint16 n )
{
    for(;n;n--){
 c103e64:	e15b30be 	ldrh	r3, [fp, #-14]
 c103e68:	e2433001 	sub	r3, r3, #1
 c103e6c:	e14b30be 	strh	r3, [fp, #-14]
 c103e70:	e15b30be 	ldrh	r3, [fp, #-14]
 c103e74:	e3530000 	cmp	r3, #0
 c103e78:	1afffff8 	bne	c103e60 <timer3_delay_ms+0x1c>
        wait_for_1ms();
    }
}
 c103e7c:	e24bd00c 	sub	sp, fp, #12
 c103e80:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103e84:	e12fff1e 	bx	lr

0c103e88 <sw_delay_ms>:



void sw_delay_ms( uint16 n )
{
 c103e88:	e1a0c00d 	mov	ip, sp
 c103e8c:	e92dd800 	push	{fp, ip, lr, pc}
 c103e90:	e24cb004 	sub	fp, ip, #4
 c103e94:	e24dd010 	sub	sp, sp, #16
 c103e98:	e1a03000 	mov	r3, r0
 c103e9c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_ms*n; i; i-- );
 c103ea0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103ea4:	e59f2030 	ldr	r2, [pc, #48]	; c103edc <sw_delay_ms+0x54>
 c103ea8:	e5922000 	ldr	r2, [r2]
 c103eac:	e0030392 	mul	r3, r2, r3
 c103eb0:	e50b3010 	str	r3, [fp, #-16]
 c103eb4:	ea000002 	b	c103ec4 <sw_delay_ms+0x3c>
 c103eb8:	e51b3010 	ldr	r3, [fp, #-16]
 c103ebc:	e2433001 	sub	r3, r3, #1
 c103ec0:	e50b3010 	str	r3, [fp, #-16]
 c103ec4:	e51b3010 	ldr	r3, [fp, #-16]
 c103ec8:	e3530000 	cmp	r3, #0
 c103ecc:	1afffff9 	bne	c103eb8 <sw_delay_ms+0x30>
}
 c103ed0:	e24bd00c 	sub	sp, fp, #12
 c103ed4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103ed8:	e12fff1e 	bx	lr
 c103edc:	0c106f4c 	.word	0x0c106f4c

0c103ee0 <wait_for_1s>:
void wait_for_1s( void )
{
 c103ee0:	e1a0c00d 	mov	ip, sp
 c103ee4:	e92dd800 	push	{fp, ip, lr, pc}
 c103ee8:	e24cb004 	sub	fp, ip, #4
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (63 << 8);
 c103eec:	e59f3098 	ldr	r3, [pc, #152]	; c103f8c <wait_for_1s+0xac>
 c103ef0:	e59f2094 	ldr	r2, [pc, #148]	; c103f8c <wait_for_1s+0xac>
 c103ef4:	e5922000 	ldr	r2, [r2]
 c103ef8:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c103efc:	e3822c3f 	orr	r2, r2, #16128	; 0x3f00
 c103f00:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c103f04:	e59f3084 	ldr	r3, [pc, #132]	; c103f90 <wait_for_1s+0xb0>
 c103f08:	e59f2080 	ldr	r2, [pc, #128]	; c103f90 <wait_for_1s+0xb0>
 c103f0c:	e5922000 	ldr	r2, [r2]
 c103f10:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c103f14:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c103f18:	e5832000 	str	r2, [r3]
	TCNTB3 = 31250;
 c103f1c:	e59f3070 	ldr	r3, [pc, #112]	; c103f94 <wait_for_1s+0xb4>
 c103f20:	e59f2070 	ldr	r2, [pc, #112]	; c103f98 <wait_for_1s+0xb8>
 c103f24:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c103f28:	e59f306c 	ldr	r3, [pc, #108]	; c103f9c <wait_for_1s+0xbc>
 c103f2c:	e59f2068 	ldr	r2, [pc, #104]	; c103f9c <wait_for_1s+0xbc>
 c103f30:	e5922000 	ldr	r2, [r2]
 c103f34:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c103f38:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c103f3c:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c103f40:	e59f3054 	ldr	r3, [pc, #84]	; c103f9c <wait_for_1s+0xbc>
 c103f44:	e59f2050 	ldr	r2, [pc, #80]	; c103f9c <wait_for_1s+0xbc>
 c103f48:	e5922000 	ldr	r2, [r2]
 c103f4c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c103f50:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c103f54:	e5832000 	str	r2, [r3]
	while( !TCNTO3 );
 c103f58:	e1a00000 	nop			; (mov r0, r0)
 c103f5c:	e59f303c 	ldr	r3, [pc, #60]	; c103fa0 <wait_for_1s+0xc0>
 c103f60:	e5933000 	ldr	r3, [r3]
 c103f64:	e3530000 	cmp	r3, #0
 c103f68:	0afffffb 	beq	c103f5c <wait_for_1s+0x7c>
	while( TCNTO3 );
 c103f6c:	e1a00000 	nop			; (mov r0, r0)
 c103f70:	e59f3028 	ldr	r3, [pc, #40]	; c103fa0 <wait_for_1s+0xc0>
 c103f74:	e5933000 	ldr	r3, [r3]
 c103f78:	e3530000 	cmp	r3, #0
 c103f7c:	1afffffb 	bne	c103f70 <wait_for_1s+0x90>
}
 c103f80:	e24bd00c 	sub	sp, fp, #12
 c103f84:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103f88:	e12fff1e 	bx	lr
 c103f8c:	01d50000 	.word	0x01d50000
 c103f90:	01d50004 	.word	0x01d50004
 c103f94:	01d50030 	.word	0x01d50030
 c103f98:	00007a12 	.word	0x00007a12
 c103f9c:	01d50008 	.word	0x01d50008
 c103fa0:	01d50038 	.word	0x01d50038

0c103fa4 <timer3_delay_s>:
void timer3_delay_s( uint16 n )
{
 c103fa4:	e1a0c00d 	mov	ip, sp
 c103fa8:	e92dd800 	push	{fp, ip, lr, pc}
 c103fac:	e24cb004 	sub	fp, ip, #4
 c103fb0:	e24dd008 	sub	sp, sp, #8
 c103fb4:	e1a03000 	mov	r3, r0
 c103fb8:	e14b30be 	strh	r3, [fp, #-14]
    for(;n;n--){
 c103fbc:	ea000003 	b	c103fd0 <timer3_delay_s+0x2c>
    	wait_for_1s();
 c103fc0:	ebffffc6 	bl	c103ee0 <wait_for_1s>
	while( !TCNTO3 );
	while( TCNTO3 );
}
void timer3_delay_s( uint16 n )
{
    for(;n;n--){
 c103fc4:	e15b30be 	ldrh	r3, [fp, #-14]
 c103fc8:	e2433001 	sub	r3, r3, #1
 c103fcc:	e14b30be 	strh	r3, [fp, #-14]
 c103fd0:	e15b30be 	ldrh	r3, [fp, #-14]
 c103fd4:	e3530000 	cmp	r3, #0
 c103fd8:	1afffff8 	bne	c103fc0 <timer3_delay_s+0x1c>
    	wait_for_1s();
    }
}
 c103fdc:	e24bd00c 	sub	sp, fp, #12
 c103fe0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103fe4:	e12fff1e 	bx	lr

0c103fe8 <sw_delay_s>:



void sw_delay_s( uint16 n )
{
 c103fe8:	e1a0c00d 	mov	ip, sp
 c103fec:	e92dd800 	push	{fp, ip, lr, pc}
 c103ff0:	e24cb004 	sub	fp, ip, #4
 c103ff4:	e24dd010 	sub	sp, sp, #16
 c103ff8:	e1a03000 	mov	r3, r0
 c103ffc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_s*n; i; i-- );
 c104000:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c104004:	e59f2030 	ldr	r2, [pc, #48]	; c10403c <sw_delay_s+0x54>
 c104008:	e5922000 	ldr	r2, [r2]
 c10400c:	e0030392 	mul	r3, r2, r3
 c104010:	e50b3010 	str	r3, [fp, #-16]
 c104014:	ea000002 	b	c104024 <sw_delay_s+0x3c>
 c104018:	e51b3010 	ldr	r3, [fp, #-16]
 c10401c:	e2433001 	sub	r3, r3, #1
 c104020:	e50b3010 	str	r3, [fp, #-16]
 c104024:	e51b3010 	ldr	r3, [fp, #-16]
 c104028:	e3530000 	cmp	r3, #0
 c10402c:	1afffff9 	bne	c104018 <sw_delay_s+0x30>
}
 c104030:	e24bd00c 	sub	sp, fp, #12
 c104034:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104038:	e12fff1e 	bx	lr
 c10403c:	0c106f50 	.word	0x0c106f50

0c104040 <timer3_start>:

void timer3_start( void ) 
{
 c104040:	e1a0c00d 	mov	ip, sp
 c104044:	e92dd800 	push	{fp, ip, lr, pc}
 c104048:	e24cb004 	sub	fp, ip, #4
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);    
 c10404c:	e59f3084 	ldr	r3, [pc, #132]	; c1040d8 <timer3_start+0x98>
 c104050:	e59f2080 	ldr	r2, [pc, #128]	; c1040d8 <timer3_start+0x98>
 c104054:	e5922000 	ldr	r2, [r2]
 c104058:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10405c:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c104060:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c104064:	e59f3070 	ldr	r3, [pc, #112]	; c1040dc <timer3_start+0x9c>
 c104068:	e59f206c 	ldr	r2, [pc, #108]	; c1040dc <timer3_start+0x9c>
 c10406c:	e5922000 	ldr	r2, [r2]
 c104070:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104074:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c104078:	e5832000 	str	r2, [r3]
    
    TCNTB3 = 0xffff; 
 c10407c:	e59f305c 	ldr	r3, [pc, #92]	; c1040e0 <timer3_start+0xa0>
 c104080:	e59f205c 	ldr	r2, [pc, #92]	; c1040e4 <timer3_start+0xa4>
 c104084:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c104088:	e59f3058 	ldr	r3, [pc, #88]	; c1040e8 <timer3_start+0xa8>
 c10408c:	e59f2054 	ldr	r2, [pc, #84]	; c1040e8 <timer3_start+0xa8>
 c104090:	e5922000 	ldr	r2, [r2]
 c104094:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c104098:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10409c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c1040a0:	e59f3040 	ldr	r3, [pc, #64]	; c1040e8 <timer3_start+0xa8>
 c1040a4:	e59f203c 	ldr	r2, [pc, #60]	; c1040e8 <timer3_start+0xa8>
 c1040a8:	e5922000 	ldr	r2, [r2]
 c1040ac:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1040b0:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c1040b4:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c1040b8:	e1a00000 	nop			; (mov r0, r0)
 c1040bc:	e59f3028 	ldr	r3, [pc, #40]	; c1040ec <timer3_start+0xac>
 c1040c0:	e5933000 	ldr	r3, [r3]
 c1040c4:	e3530000 	cmp	r3, #0
 c1040c8:	0afffffb 	beq	c1040bc <timer3_start+0x7c>
}
 c1040cc:	e24bd00c 	sub	sp, fp, #12
 c1040d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1040d4:	e12fff1e 	bx	lr
 c1040d8:	01d50000 	.word	0x01d50000
 c1040dc:	01d50004 	.word	0x01d50004
 c1040e0:	01d50030 	.word	0x01d50030
 c1040e4:	0000ffff 	.word	0x0000ffff
 c1040e8:	01d50008 	.word	0x01d50008
 c1040ec:	01d50038 	.word	0x01d50038

0c1040f0 <timer3_stop>:

uint16 timer3_stop( void )
{
 c1040f0:	e1a0c00d 	mov	ip, sp
 c1040f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1040f8:	e24cb004 	sub	fp, ip, #4
    TCON &= ~(1 << 16);
 c1040fc:	e59f3038 	ldr	r3, [pc, #56]	; c10413c <timer3_stop+0x4c>
 c104100:	e59f2034 	ldr	r2, [pc, #52]	; c10413c <timer3_stop+0x4c>
 c104104:	e5922000 	ldr	r2, [r2]
 c104108:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c10410c:	e5832000 	str	r2, [r3]
    return 0xffff - TCNTO3;
 c104110:	e59f3028 	ldr	r3, [pc, #40]	; c104140 <timer3_stop+0x50>
 c104114:	e5933000 	ldr	r3, [r3]
 c104118:	e1a03803 	lsl	r3, r3, #16
 c10411c:	e1a03823 	lsr	r3, r3, #16
 c104120:	e1e03003 	mvn	r3, r3
 c104124:	e1a03803 	lsl	r3, r3, #16
 c104128:	e1a03823 	lsr	r3, r3, #16
}
 c10412c:	e1a00003 	mov	r0, r3
 c104130:	e24bd00c 	sub	sp, fp, #12
 c104134:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104138:	e12fff1e 	bx	lr
 c10413c:	01d50008 	.word	0x01d50008
 c104140:	01d50038 	.word	0x01d50038

0c104144 <timer3_start_timeout>:

void timer3_start_timeout( uint16 n ) 
{
 c104144:	e1a0c00d 	mov	ip, sp
 c104148:	e92dd800 	push	{fp, ip, lr, pc}
 c10414c:	e24cb004 	sub	fp, ip, #4
 c104150:	e24dd008 	sub	sp, sp, #8
 c104154:	e1a03000 	mov	r3, r0
 c104158:	e14b30be 	strh	r3, [fp, #-14]
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);          
 c10415c:	e59f3084 	ldr	r3, [pc, #132]	; c1041e8 <timer3_start_timeout+0xa4>
 c104160:	e59f2080 	ldr	r2, [pc, #128]	; c1041e8 <timer3_start_timeout+0xa4>
 c104164:	e5922000 	ldr	r2, [r2]
 c104168:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10416c:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c104170:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c104174:	e59f3070 	ldr	r3, [pc, #112]	; c1041ec <timer3_start_timeout+0xa8>
 c104178:	e59f206c 	ldr	r2, [pc, #108]	; c1041ec <timer3_start_timeout+0xa8>
 c10417c:	e5922000 	ldr	r2, [r2]
 c104180:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104184:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c104188:	e5832000 	str	r2, [r3]
    
    TCNTB3 = n; 
 c10418c:	e59f305c 	ldr	r3, [pc, #92]	; c1041f0 <timer3_start_timeout+0xac>
 c104190:	e15b20be 	ldrh	r2, [fp, #-14]
 c104194:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c104198:	e59f3054 	ldr	r3, [pc, #84]	; c1041f4 <timer3_start_timeout+0xb0>
 c10419c:	e59f2050 	ldr	r2, [pc, #80]	; c1041f4 <timer3_start_timeout+0xb0>
 c1041a0:	e5922000 	ldr	r2, [r2]
 c1041a4:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1041a8:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c1041ac:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c1041b0:	e59f303c 	ldr	r3, [pc, #60]	; c1041f4 <timer3_start_timeout+0xb0>
 c1041b4:	e59f2038 	ldr	r2, [pc, #56]	; c1041f4 <timer3_start_timeout+0xb0>
 c1041b8:	e5922000 	ldr	r2, [r2]
 c1041bc:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1041c0:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c1041c4:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c1041c8:	e1a00000 	nop			; (mov r0, r0)
 c1041cc:	e59f3024 	ldr	r3, [pc, #36]	; c1041f8 <timer3_start_timeout+0xb4>
 c1041d0:	e5933000 	ldr	r3, [r3]
 c1041d4:	e3530000 	cmp	r3, #0
 c1041d8:	0afffffb 	beq	c1041cc <timer3_start_timeout+0x88>
}
 c1041dc:	e24bd00c 	sub	sp, fp, #12
 c1041e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1041e4:	e12fff1e 	bx	lr
 c1041e8:	01d50000 	.word	0x01d50000
 c1041ec:	01d50004 	.word	0x01d50004
 c1041f0:	01d50030 	.word	0x01d50030
 c1041f4:	01d50008 	.word	0x01d50008
 c1041f8:	01d50038 	.word	0x01d50038

0c1041fc <timer3_timeout>:

uint16 timer3_timeout( )
{
 c1041fc:	e1a0c00d 	mov	ip, sp
 c104200:	e92dd800 	push	{fp, ip, lr, pc}
 c104204:	e24cb004 	sub	fp, ip, #4
    return !TCNTO3;
 c104208:	e59f3024 	ldr	r3, [pc, #36]	; c104234 <timer3_timeout+0x38>
 c10420c:	e5933000 	ldr	r3, [r3]
 c104210:	e3530000 	cmp	r3, #0
 c104214:	13a03000 	movne	r3, #0
 c104218:	03a03001 	moveq	r3, #1
 c10421c:	e1a03803 	lsl	r3, r3, #16
 c104220:	e1a03823 	lsr	r3, r3, #16
}    
 c104224:	e1a00003 	mov	r0, r3
 c104228:	e24bd00c 	sub	sp, fp, #12
 c10422c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104230:	e12fff1e 	bx	lr
 c104234:	01d50038 	.word	0x01d50038

0c104238 <timer0_open_tick>:
//He cambiado todos los N D y ahora van perfe pero no tienen ningun puto sentido
void timer0_open_tick( void (*isr)(void), uint16 tps )
{
 c104238:	e1a0c00d 	mov	ip, sp
 c10423c:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c104240:	e24cb004 	sub	fp, ip, #4
 c104244:	e24dd00c 	sub	sp, sp, #12
 c104248:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10424c:	e1a03001 	mov	r3, r1
 c104250:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
	 pISR_TIMER0 = (uint32) isr;
 c104254:	e59f31f4 	ldr	r3, [pc, #500]	; c104450 <timer0_open_tick+0x218>
 c104258:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10425c:	e5832000 	str	r2, [r3]
	 I_ISPC      = BIT_TIMER0;
 c104260:	e59f31ec 	ldr	r3, [pc, #492]	; c104454 <timer0_open_tick+0x21c>
 c104264:	e3a02a02 	mov	r2, #8192	; 0x2000
 c104268:	e5832000 	str	r2, [r3]
	 INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c10426c:	e59f21e4 	ldr	r2, [pc, #484]	; c104458 <timer0_open_tick+0x220>
 c104270:	e59f31e0 	ldr	r3, [pc, #480]	; c104458 <timer0_open_tick+0x220>
 c104274:	e5933000 	ldr	r3, [r3]
 c104278:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c10427c:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c104280:	e5823000 	str	r3, [r2]

    if( tps > 0 && tps <= 10 ) {
 c104284:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c104288:	e3530000 	cmp	r3, #0
 c10428c:	0a000018 	beq	c1042f4 <timer0_open_tick+0xbc>
 c104290:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c104294:	e353000a 	cmp	r3, #10
 c104298:	8a000015 	bhi	c1042f4 <timer0_open_tick+0xbc>
        TCFG0  = (TCFG0 & ~(0xff << 0)) | (49 << 0);
 c10429c:	e59f31b8 	ldr	r3, [pc, #440]	; c10445c <timer0_open_tick+0x224>
 c1042a0:	e59f21b4 	ldr	r2, [pc, #436]	; c10445c <timer0_open_tick+0x224>
 c1042a4:	e5922000 	ldr	r2, [r2]
 c1042a8:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1042ac:	e3822031 	orr	r2, r2, #49	; 0x31
 c1042b0:	e5832000 	str	r2, [r3]
        TCFG1  = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c1042b4:	e59f31a4 	ldr	r3, [pc, #420]	; c104460 <timer0_open_tick+0x228>
 c1042b8:	e59f21a0 	ldr	r2, [pc, #416]	; c104460 <timer0_open_tick+0x228>
 c1042bc:	e5922000 	ldr	r2, [r2]
 c1042c0:	e3c2200f 	bic	r2, r2, #15
 c1042c4:	e3822004 	orr	r2, r2, #4
 c1042c8:	e5832000 	str	r2, [r3]
        TCNTB0 = (40000U / tps);
 c1042cc:	e59f4190 	ldr	r4, [pc, #400]	; c104464 <timer0_open_tick+0x22c>
 c1042d0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1042d4:	e59f018c 	ldr	r0, [pc, #396]	; c104468 <timer0_open_tick+0x230>
 c1042d8:	e1a01003 	mov	r1, r3
 c1042dc:	eb00024f 	bl	c104c20 <__aeabi_uidiv>
 c1042e0:	e1a03000 	mov	r3, r0
 c1042e4:	e1a03803 	lsl	r3, r3, #16
 c1042e8:	e1a03823 	lsr	r3, r3, #16
 c1042ec:	e5843000 	str	r3, [r4]
 c1042f0:	ea000047 	b	c104414 <timer0_open_tick+0x1dc>
    } else if( tps > 10 && tps <= 100 ) {
 c1042f4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1042f8:	e353000a 	cmp	r3, #10
 c1042fc:	9a000016 	bls	c10435c <timer0_open_tick+0x124>
 c104300:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c104304:	e3530064 	cmp	r3, #100	; 0x64
 c104308:	8a000013 	bhi	c10435c <timer0_open_tick+0x124>
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (4 << 0);
 c10430c:	e59f3148 	ldr	r3, [pc, #328]	; c10445c <timer0_open_tick+0x224>
 c104310:	e59f2144 	ldr	r2, [pc, #324]	; c10445c <timer0_open_tick+0x224>
 c104314:	e5922000 	ldr	r2, [r2]
 c104318:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10431c:	e3822004 	orr	r2, r2, #4
 c104320:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c104324:	e59f3134 	ldr	r3, [pc, #308]	; c104460 <timer0_open_tick+0x228>
 c104328:	e59f2130 	ldr	r2, [pc, #304]	; c104460 <timer0_open_tick+0x228>
 c10432c:	e5922000 	ldr	r2, [r2]
 c104330:	e3c2200f 	bic	r2, r2, #15
 c104334:	e3822004 	orr	r2, r2, #4
 c104338:	e5832000 	str	r2, [r3]
        TCNTB0 = (400000U / (uint32) tps);
 c10433c:	e59f4120 	ldr	r4, [pc, #288]	; c104464 <timer0_open_tick+0x22c>
 c104340:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c104344:	e59f0120 	ldr	r0, [pc, #288]	; c10446c <timer0_open_tick+0x234>
 c104348:	e1a01003 	mov	r1, r3
 c10434c:	eb000233 	bl	c104c20 <__aeabi_uidiv>
 c104350:	e1a03000 	mov	r3, r0
 c104354:	e5843000 	str	r3, [r4]
 c104358:	ea00002d 	b	c104414 <timer0_open_tick+0x1dc>
    } else if( tps > 100 && tps <= 1000 ) {
 c10435c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c104360:	e3530064 	cmp	r3, #100	; 0x64
 c104364:	9a000016 	bls	c1043c4 <timer0_open_tick+0x18c>
 c104368:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10436c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c104370:	8a000013 	bhi	c1043c4 <timer0_open_tick+0x18c>
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (1 << 0);
 c104374:	e59f30e0 	ldr	r3, [pc, #224]	; c10445c <timer0_open_tick+0x224>
 c104378:	e59f20dc 	ldr	r2, [pc, #220]	; c10445c <timer0_open_tick+0x224>
 c10437c:	e5922000 	ldr	r2, [r2]
 c104380:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c104384:	e3822001 	orr	r2, r2, #1
 c104388:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf << 0)) | (2 << 0);
 c10438c:	e59f30cc 	ldr	r3, [pc, #204]	; c104460 <timer0_open_tick+0x228>
 c104390:	e59f20c8 	ldr	r2, [pc, #200]	; c104460 <timer0_open_tick+0x228>
 c104394:	e5922000 	ldr	r2, [r2]
 c104398:	e3c2200f 	bic	r2, r2, #15
 c10439c:	e3822002 	orr	r2, r2, #2
 c1043a0:	e5832000 	str	r2, [r3]
        TCNTB0 = (4000000U / (uint32) tps);
 c1043a4:	e59f40b8 	ldr	r4, [pc, #184]	; c104464 <timer0_open_tick+0x22c>
 c1043a8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1043ac:	e59f00bc 	ldr	r0, [pc, #188]	; c104470 <timer0_open_tick+0x238>
 c1043b0:	e1a01003 	mov	r1, r3
 c1043b4:	eb000219 	bl	c104c20 <__aeabi_uidiv>
 c1043b8:	e1a03000 	mov	r3, r0
 c1043bc:	e5843000 	str	r3, [r4]
 c1043c0:	ea000013 	b	c104414 <timer0_open_tick+0x1dc>
    } else if ( tps > 1000 ) {
 c1043c4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1043c8:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c1043cc:	9a000010 	bls	c104414 <timer0_open_tick+0x1dc>
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (0 << 0);
 c1043d0:	e59f3084 	ldr	r3, [pc, #132]	; c10445c <timer0_open_tick+0x224>
 c1043d4:	e59f2080 	ldr	r2, [pc, #128]	; c10445c <timer0_open_tick+0x224>
 c1043d8:	e5922000 	ldr	r2, [r2]
 c1043dc:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1043e0:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf << 0)) | (0 << 0);
 c1043e4:	e59f3074 	ldr	r3, [pc, #116]	; c104460 <timer0_open_tick+0x228>
 c1043e8:	e59f2070 	ldr	r2, [pc, #112]	; c104460 <timer0_open_tick+0x228>
 c1043ec:	e5922000 	ldr	r2, [r2]
 c1043f0:	e3c2200f 	bic	r2, r2, #15
 c1043f4:	e5832000 	str	r2, [r3]
        TCNTB0 = (32000000U / (uint32) tps);
 c1043f8:	e59f4064 	ldr	r4, [pc, #100]	; c104464 <timer0_open_tick+0x22c>
 c1043fc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c104400:	e59f006c 	ldr	r0, [pc, #108]	; c104474 <timer0_open_tick+0x23c>
 c104404:	e1a01003 	mov	r1, r3
 c104408:	eb000204 	bl	c104c20 <__aeabi_uidiv>
 c10440c:	e1a03000 	mov	r3, r0
 c104410:	e5843000 	str	r3, [r4]
    }

    TCON = (TCON & ~(0xf << 0)) | (1<<3) | (1<<1) | (0<<0);
 c104414:	e59f305c 	ldr	r3, [pc, #92]	; c104478 <timer0_open_tick+0x240>
 c104418:	e59f2058 	ldr	r2, [pc, #88]	; c104478 <timer0_open_tick+0x240>
 c10441c:	e5922000 	ldr	r2, [r2]
 c104420:	e3c2200f 	bic	r2, r2, #15
 c104424:	e382200a 	orr	r2, r2, #10
 c104428:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 0)) | (1<<3) | (0<<1) | (1<<0);
 c10442c:	e59f3044 	ldr	r3, [pc, #68]	; c104478 <timer0_open_tick+0x240>
 c104430:	e59f2040 	ldr	r2, [pc, #64]	; c104478 <timer0_open_tick+0x240>
 c104434:	e5922000 	ldr	r2, [r2]
 c104438:	e3c2200f 	bic	r2, r2, #15
 c10443c:	e3822009 	orr	r2, r2, #9
 c104440:	e5832000 	str	r2, [r3]
}
 c104444:	e24bd010 	sub	sp, fp, #16
 c104448:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c10444c:	e12fff1e 	bx	lr
 c104450:	0c7fff54 	.word	0x0c7fff54
 c104454:	01e00024 	.word	0x01e00024
 c104458:	01e0000c 	.word	0x01e0000c
 c10445c:	01d50000 	.word	0x01d50000
 c104460:	01d50004 	.word	0x01d50004
 c104464:	01d5000c 	.word	0x01d5000c
 c104468:	00009c40 	.word	0x00009c40
 c10446c:	00061a80 	.word	0x00061a80
 c104470:	003d0900 	.word	0x003d0900
 c104474:	01e84800 	.word	0x01e84800
 c104478:	01d50008 	.word	0x01d50008

0c10447c <timer0_open_ms>:

void timer0_open_ms( void (*isr)(void), uint16 ms, uint8 mode )
{
 c10447c:	e1a0c00d 	mov	ip, sp
 c104480:	e92dd800 	push	{fp, ip, lr, pc}
 c104484:	e24cb004 	sub	fp, ip, #4
 c104488:	e24dd008 	sub	sp, sp, #8
 c10448c:	e50b0010 	str	r0, [fp, #-16]
 c104490:	e1a03002 	mov	r3, r2
 c104494:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c104498:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    pISR_TIMER0 = (uint32) isr;
 c10449c:	e59f30c8 	ldr	r3, [pc, #200]	; c10456c <timer0_open_ms+0xf0>
 c1044a0:	e51b2010 	ldr	r2, [fp, #-16]
 c1044a4:	e5832000 	str	r2, [r3]
    I_ISPC      = BIT_TIMER0;
 c1044a8:	e59f30c0 	ldr	r3, [pc, #192]	; c104570 <timer0_open_ms+0xf4>
 c1044ac:	e3a02a02 	mov	r2, #8192	; 0x2000
 c1044b0:	e5832000 	str	r2, [r3]
    INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c1044b4:	e59f20b8 	ldr	r2, [pc, #184]	; c104574 <timer0_open_ms+0xf8>
 c1044b8:	e59f30b4 	ldr	r3, [pc, #180]	; c104574 <timer0_open_ms+0xf8>
 c1044bc:	e5933000 	ldr	r3, [r3]
 c1044c0:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c1044c4:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c1044c8:	e5823000 	str	r3, [r2]

    TCFG0 = (TCFG0 & ~(0xff << 0)) | (199 << 0);
 c1044cc:	e59f30a4 	ldr	r3, [pc, #164]	; c104578 <timer0_open_ms+0xfc>
 c1044d0:	e59f20a0 	ldr	r2, [pc, #160]	; c104578 <timer0_open_ms+0xfc>
 c1044d4:	e5922000 	ldr	r2, [r2]
 c1044d8:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1044dc:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c1044e0:	e5832000 	str	r2, [r3]
    TCFG1 =  (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c1044e4:	e59f3090 	ldr	r3, [pc, #144]	; c10457c <timer0_open_ms+0x100>
 c1044e8:	e59f208c 	ldr	r2, [pc, #140]	; c10457c <timer0_open_ms+0x100>
 c1044ec:	e5922000 	ldr	r2, [r2]
 c1044f0:	e3c2200f 	bic	r2, r2, #15
 c1044f4:	e3822004 	orr	r2, r2, #4
 c1044f8:	e5832000 	str	r2, [r3]
    TCNTB0 = 10*ms;
 c1044fc:	e59f107c 	ldr	r1, [pc, #124]	; c104580 <timer0_open_ms+0x104>
 c104500:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c104504:	e1a03002 	mov	r3, r2
 c104508:	e1a03103 	lsl	r3, r3, #2
 c10450c:	e0833002 	add	r3, r3, r2
 c104510:	e1a03083 	lsl	r3, r3, #1
 c104514:	e5813000 	str	r3, [r1]

    TCON =  (TCON & ~(0xf << 0)) | (mode << 3) | (1<<1) | (0<<0);
 c104518:	e59f3064 	ldr	r3, [pc, #100]	; c104584 <timer0_open_ms+0x108>
 c10451c:	e59f2060 	ldr	r2, [pc, #96]	; c104584 <timer0_open_ms+0x108>
 c104520:	e5922000 	ldr	r2, [r2]
 c104524:	e3c2100f 	bic	r1, r2, #15
 c104528:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c10452c:	e1a02182 	lsl	r2, r2, #3
 c104530:	e1812002 	orr	r2, r1, r2
 c104534:	e3822002 	orr	r2, r2, #2
 c104538:	e5832000 	str	r2, [r3]
    TCON =  (TCON & ~(0xf << 0)) | (mode << 3) | (0<<1) | (1<<0);
 c10453c:	e59f3040 	ldr	r3, [pc, #64]	; c104584 <timer0_open_ms+0x108>
 c104540:	e59f203c 	ldr	r2, [pc, #60]	; c104584 <timer0_open_ms+0x108>
 c104544:	e5922000 	ldr	r2, [r2]
 c104548:	e3c2100f 	bic	r1, r2, #15
 c10454c:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c104550:	e1a02182 	lsl	r2, r2, #3
 c104554:	e1812002 	orr	r2, r1, r2
 c104558:	e3822001 	orr	r2, r2, #1
 c10455c:	e5832000 	str	r2, [r3]
}
 c104560:	e24bd00c 	sub	sp, fp, #12
 c104564:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104568:	e12fff1e 	bx	lr
 c10456c:	0c7fff54 	.word	0x0c7fff54
 c104570:	01e00024 	.word	0x01e00024
 c104574:	01e0000c 	.word	0x01e0000c
 c104578:	01d50000 	.word	0x01d50000
 c10457c:	01d50004 	.word	0x01d50004
 c104580:	01d5000c 	.word	0x01d5000c
 c104584:	01d50008 	.word	0x01d50008

0c104588 <timer0_close>:

void timer0_close( void )
{
 c104588:	e1a0c00d 	mov	ip, sp
 c10458c:	e92dd800 	push	{fp, ip, lr, pc}
 c104590:	e24cb004 	sub	fp, ip, #4
    TCNTB0 = 0x0;
 c104594:	e59f3068 	ldr	r3, [pc, #104]	; c104604 <timer0_close+0x7c>
 c104598:	e3a02000 	mov	r2, #0
 c10459c:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c1045a0:	e59f3060 	ldr	r3, [pc, #96]	; c104608 <timer0_close+0x80>
 c1045a4:	e3a02000 	mov	r2, #0
 c1045a8:	e5832000 	str	r2, [r3]

    TCON = (TCON & ~(0xf << 0)) | (1<<1) | (0<<0);
 c1045ac:	e59f3058 	ldr	r3, [pc, #88]	; c10460c <timer0_close+0x84>
 c1045b0:	e59f2054 	ldr	r2, [pc, #84]	; c10460c <timer0_close+0x84>
 c1045b4:	e5922000 	ldr	r2, [r2]
 c1045b8:	e3c2200f 	bic	r2, r2, #15
 c1045bc:	e3822002 	orr	r2, r2, #2
 c1045c0:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 0)) | (0<<1) | (0<<0);
 c1045c4:	e59f3040 	ldr	r3, [pc, #64]	; c10460c <timer0_close+0x84>
 c1045c8:	e59f203c 	ldr	r2, [pc, #60]	; c10460c <timer0_close+0x84>
 c1045cc:	e5922000 	ldr	r2, [r2]
 c1045d0:	e3c2200f 	bic	r2, r2, #15
 c1045d4:	e5832000 	str	r2, [r3]
    
    INTMSK     |= BIT_TIMER0;
 c1045d8:	e59f3030 	ldr	r3, [pc, #48]	; c104610 <timer0_close+0x88>
 c1045dc:	e59f202c 	ldr	r2, [pc, #44]	; c104610 <timer0_close+0x88>
 c1045e0:	e5922000 	ldr	r2, [r2]
 c1045e4:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c1045e8:	e5832000 	str	r2, [r3]
    pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c1045ec:	e59f3020 	ldr	r3, [pc, #32]	; c104614 <timer0_close+0x8c>
 c1045f0:	e59f2020 	ldr	r2, [pc, #32]	; c104618 <timer0_close+0x90>
 c1045f4:	e5832000 	str	r2, [r3]
}
 c1045f8:	e24bd00c 	sub	sp, fp, #12
 c1045fc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104600:	e12fff1e 	bx	lr
 c104604:	01d5000c 	.word	0x01d5000c
 c104608:	01d50010 	.word	0x01d50010
 c10460c:	01d50008 	.word	0x01d50008
 c104610:	01e0000c 	.word	0x01e0000c
 c104614:	0c7fff54 	.word	0x0c7fff54
 c104618:	0c103750 	.word	0x0c103750

0c10461c <uart0_init>:
#include <s3c44b0x.h>
#include <uart.h>

void uart0_init( void )
{
 c10461c:	e1a0c00d 	mov	ip, sp
 c104620:	e92dd800 	push	{fp, ip, lr, pc}
 c104624:	e24cb004 	sub	fp, ip, #4
UFCON0 = 0x1;
 c104628:	e59f3040 	ldr	r3, [pc, #64]	; c104670 <uart0_init+0x54>
 c10462c:	e3a02001 	mov	r2, #1
 c104630:	e5832000 	str	r2, [r3]
UMCON0 = 0x0;
 c104634:	e59f3038 	ldr	r3, [pc, #56]	; c104674 <uart0_init+0x58>
 c104638:	e3a02000 	mov	r2, #0
 c10463c:	e5832000 	str	r2, [r3]
ULCON0 = 0x3;
 c104640:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c104644:	e3a02003 	mov	r2, #3
 c104648:	e5832000 	str	r2, [r3]
UBRDIV0 = 0x22;
 c10464c:	e59f3024 	ldr	r3, [pc, #36]	; c104678 <uart0_init+0x5c>
 c104650:	e3a02022 	mov	r2, #34	; 0x22
 c104654:	e5832000 	str	r2, [r3]
UCON0 = 0x5;
 c104658:	e59f301c 	ldr	r3, [pc, #28]	; c10467c <uart0_init+0x60>
 c10465c:	e3a02005 	mov	r2, #5
 c104660:	e5832000 	str	r2, [r3]
}
 c104664:	e24bd00c 	sub	sp, fp, #12
 c104668:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10466c:	e12fff1e 	bx	lr
 c104670:	01d00008 	.word	0x01d00008
 c104674:	01d0000c 	.word	0x01d0000c
 c104678:	01d00028 	.word	0x01d00028
 c10467c:	01d00004 	.word	0x01d00004

0c104680 <uart0_putchar>:

void uart0_putchar( char ch )
{
 c104680:	e1a0c00d 	mov	ip, sp
 c104684:	e92dd800 	push	{fp, ip, lr, pc}
 c104688:	e24cb004 	sub	fp, ip, #4
 c10468c:	e24dd008 	sub	sp, sp, #8
 c104690:	e1a03000 	mov	r3, r0
 c104694:	e54b300d 	strb	r3, [fp, #-13]
    while(UFSTAT0 & (1<<9));
 c104698:	e1a00000 	nop			; (mov r0, r0)
 c10469c:	e59f3034 	ldr	r3, [pc, #52]	; c1046d8 <uart0_putchar+0x58>
 c1046a0:	e5933000 	ldr	r3, [r3]
 c1046a4:	e2033c02 	and	r3, r3, #512	; 0x200
 c1046a8:	e3530000 	cmp	r3, #0
 c1046ac:	1afffffa 	bne	c10469c <uart0_putchar+0x1c>
    UTXH0 = (UTXH0<<8) | ch;
 c1046b0:	e59f3024 	ldr	r3, [pc, #36]	; c1046dc <uart0_putchar+0x5c>
 c1046b4:	e59f2020 	ldr	r2, [pc, #32]	; c1046dc <uart0_putchar+0x5c>
 c1046b8:	e5922000 	ldr	r2, [r2]
 c1046bc:	e1a01402 	lsl	r1, r2, #8
 c1046c0:	e55b200d 	ldrb	r2, [fp, #-13]
 c1046c4:	e1812002 	orr	r2, r1, r2
 c1046c8:	e5832000 	str	r2, [r3]

}        
 c1046cc:	e24bd00c 	sub	sp, fp, #12
 c1046d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1046d4:	e12fff1e 	bx	lr
 c1046d8:	01d00018 	.word	0x01d00018
 c1046dc:	01d00020 	.word	0x01d00020

0c1046e0 <uart0_getchar>:

char uart0_getchar( void )
{//AZPIRICUETOS
 c1046e0:	e1a0c00d 	mov	ip, sp
 c1046e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1046e8:	e24cb004 	sub	fp, ip, #4
    while(!(UFSTAT0 & 0xf));
 c1046ec:	e1a00000 	nop			; (mov r0, r0)
 c1046f0:	e59f3028 	ldr	r3, [pc, #40]	; c104720 <uart0_getchar+0x40>
 c1046f4:	e5933000 	ldr	r3, [r3]
 c1046f8:	e203300f 	and	r3, r3, #15
 c1046fc:	e3530000 	cmp	r3, #0
 c104700:	0afffffa 	beq	c1046f0 <uart0_getchar+0x10>
    return URXH0;
 c104704:	e59f3018 	ldr	r3, [pc, #24]	; c104724 <uart0_getchar+0x44>
 c104708:	e5933000 	ldr	r3, [r3]
 c10470c:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c104710:	e1a00003 	mov	r0, r3
 c104714:	e24bd00c 	sub	sp, fp, #12
 c104718:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10471c:	e12fff1e 	bx	lr
 c104720:	01d00018 	.word	0x01d00018
 c104724:	01d00024 	.word	0x01d00024

0c104728 <uart0_puts>:

void uart0_puts( char *s )
{
 c104728:	e1a0c00d 	mov	ip, sp
 c10472c:	e92dd800 	push	{fp, ip, lr, pc}
 c104730:	e24cb004 	sub	fp, ip, #4
 c104734:	e24dd010 	sub	sp, sp, #16
 c104738:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	int i = 0;
 c10473c:	e3a03000 	mov	r3, #0
 c104740:	e50b3010 	str	r3, [fp, #-16]
	while(s[i] != '\0'){
 c104744:	ea000008 	b	c10476c <uart0_puts+0x44>
		uart0_putchar(s[i]);
 c104748:	e51b3010 	ldr	r3, [fp, #-16]
 c10474c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c104750:	e0823003 	add	r3, r2, r3
 c104754:	e5d33000 	ldrb	r3, [r3]
 c104758:	e1a00003 	mov	r0, r3
 c10475c:	ebffffc7 	bl	c104680 <uart0_putchar>
		i++;
 c104760:	e51b3010 	ldr	r3, [fp, #-16]
 c104764:	e2833001 	add	r3, r3, #1
 c104768:	e50b3010 	str	r3, [fp, #-16]
}

void uart0_puts( char *s )
{
	int i = 0;
	while(s[i] != '\0'){
 c10476c:	e51b3010 	ldr	r3, [fp, #-16]
 c104770:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c104774:	e0823003 	add	r3, r2, r3
 c104778:	e5d33000 	ldrb	r3, [r3]
 c10477c:	e3530000 	cmp	r3, #0
 c104780:	1afffff0 	bne	c104748 <uart0_puts+0x20>
		uart0_putchar(s[i]);
		i++;
	}

}
 c104784:	e24bd00c 	sub	sp, fp, #12
 c104788:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10478c:	e12fff1e 	bx	lr

0c104790 <uart0_putint>:

void uart0_putint( int32 i )
{
 c104790:	e1a0c00d 	mov	ip, sp
 c104794:	e92dd800 	push	{fp, ip, lr, pc}
 c104798:	e24cb004 	sub	fp, ip, #4
 c10479c:	e24dd020 	sub	sp, sp, #32
 c1047a0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    char buf[10 + 1 + 1];
	char *p = buf+11;
 c1047a4:	e24b3020 	sub	r3, fp, #32
 c1047a8:	e283300b 	add	r3, r3, #11
 c1047ac:	e50b3010 	str	r3, [fp, #-16]
	uint8 signo;//0 es negativo
	uint8 c;
	*p = '\0';
 c1047b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1047b4:	e3a02000 	mov	r2, #0
 c1047b8:	e5c32000 	strb	r2, [r3]

	if(i<0){
 c1047bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1047c0:	e3530000 	cmp	r3, #0
 c1047c4:	aa000005 	bge	c1047e0 <uart0_putint+0x50>
		signo = 0;
 c1047c8:	e3a03000 	mov	r3, #0
 c1047cc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i *= -1;
 c1047d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1047d4:	e2633000 	rsb	r3, r3, #0
 c1047d8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c1047dc:	ea000001 	b	c1047e8 <uart0_putint+0x58>
	}
	else{
		signo = 1;
 c1047e0:	e3a03001 	mov	r3, #1
 c1047e4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	}

	do{
		c = i%10;
 c1047e8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c1047ec:	e59f30a8 	ldr	r3, [pc, #168]	; c10489c <uart0_putint+0x10c>
 c1047f0:	e0c32391 	smull	r2, r3, r1, r3
 c1047f4:	e1a02143 	asr	r2, r3, #2
 c1047f8:	e1a03fc1 	asr	r3, r1, #31
 c1047fc:	e0632002 	rsb	r2, r3, r2
 c104800:	e1a03002 	mov	r3, r2
 c104804:	e1a03103 	lsl	r3, r3, #2
 c104808:	e0833002 	add	r3, r3, r2
 c10480c:	e1a03083 	lsl	r3, r3, #1
 c104810:	e0632001 	rsb	r2, r3, r1
 c104814:	e1a03002 	mov	r3, r2
 c104818:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		i = i/10;
 c10481c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104820:	e59f2074 	ldr	r2, [pc, #116]	; c10489c <uart0_putint+0x10c>
 c104824:	e0c21293 	smull	r1, r2, r3, r2
 c104828:	e1a02142 	asr	r2, r2, #2
 c10482c:	e1a03fc3 	asr	r3, r3, #31
 c104830:	e0633002 	rsb	r3, r3, r2
 c104834:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		*--p= c + '0';
 c104838:	e51b3010 	ldr	r3, [fp, #-16]
 c10483c:	e2433001 	sub	r3, r3, #1
 c104840:	e50b3010 	str	r3, [fp, #-16]
 c104844:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c104848:	e2833030 	add	r3, r3, #48	; 0x30
 c10484c:	e20320ff 	and	r2, r3, #255	; 0xff
 c104850:	e51b3010 	ldr	r3, [fp, #-16]
 c104854:	e5c32000 	strb	r2, [r3]
	}while(i);
 c104858:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10485c:	e3530000 	cmp	r3, #0
 c104860:	1affffe0 	bne	c1047e8 <uart0_putint+0x58>

	if(!signo){
 c104864:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c104868:	e3530000 	cmp	r3, #0
 c10486c:	1a000005 	bne	c104888 <uart0_putint+0xf8>
		*--p= '-';
 c104870:	e51b3010 	ldr	r3, [fp, #-16]
 c104874:	e2433001 	sub	r3, r3, #1
 c104878:	e50b3010 	str	r3, [fp, #-16]
 c10487c:	e51b3010 	ldr	r3, [fp, #-16]
 c104880:	e3a0202d 	mov	r2, #45	; 0x2d
 c104884:	e5c32000 	strb	r2, [r3]
	}

	uart0_puts(p);
 c104888:	e51b0010 	ldr	r0, [fp, #-16]
 c10488c:	ebffffa5 	bl	c104728 <uart0_puts>
}
 c104890:	e24bd00c 	sub	sp, fp, #12
 c104894:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104898:	e12fff1e 	bx	lr
 c10489c:	66666667 	.word	0x66666667

0c1048a0 <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c1048a0:	e1a0c00d 	mov	ip, sp
 c1048a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1048a8:	e24cb004 	sub	fp, ip, #4
 c1048ac:	e24dd018 	sub	sp, sp, #24
 c1048b0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c1048b4:	e24b301c 	sub	r3, fp, #28
 c1048b8:	e2833008 	add	r3, r3, #8
 c1048bc:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c1048c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1048c4:	e3a02000 	mov	r2, #0
 c1048c8:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c1048cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1048d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1048d4:	e203300f 	and	r3, r3, #15
 c1048d8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c1048dc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1048e0:	e3530009 	cmp	r3, #9
 c1048e4:	8a000008 	bhi	c10490c <uart0_puthex+0x6c>
            *--p = '0' + c;
 c1048e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1048ec:	e2433001 	sub	r3, r3, #1
 c1048f0:	e50b3010 	str	r3, [fp, #-16]
 c1048f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1048f8:	e2833030 	add	r3, r3, #48	; 0x30
 c1048fc:	e20320ff 	and	r2, r3, #255	; 0xff
 c104900:	e51b3010 	ldr	r3, [fp, #-16]
 c104904:	e5c32000 	strb	r2, [r3]
 c104908:	ea000007 	b	c10492c <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c10490c:	e51b3010 	ldr	r3, [fp, #-16]
 c104910:	e2433001 	sub	r3, r3, #1
 c104914:	e50b3010 	str	r3, [fp, #-16]
 c104918:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10491c:	e2833057 	add	r3, r3, #87	; 0x57
 c104920:	e20320ff 	and	r2, r3, #255	; 0xff
 c104924:	e51b3010 	ldr	r3, [fp, #-16]
 c104928:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c10492c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104930:	e1a03223 	lsr	r3, r3, #4
 c104934:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c104938:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10493c:	e3530000 	cmp	r3, #0
 c104940:	1affffe1 	bne	c1048cc <uart0_puthex+0x2c>

    uart0_puts( p );
 c104944:	e51b0010 	ldr	r0, [fp, #-16]
 c104948:	ebffff76 	bl	c104728 <uart0_puts>
}
 c10494c:	e24bd00c 	sub	sp, fp, #12
 c104950:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104954:	e12fff1e 	bx	lr

0c104958 <uart0_gets>:

void uart0_gets( char *s )
{
 c104958:	e1a0c00d 	mov	ip, sp
 c10495c:	e92dd800 	push	{fp, ip, lr, pc}
 c104960:	e24cb004 	sub	fp, ip, #4
 c104964:	e24dd010 	sub	sp, sp, #16
 c104968:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8

	char c = uart0_getchar();
 c10496c:	ebffff5b 	bl	c1046e0 <uart0_getchar>
 c104970:	e1a03000 	mov	r3, r0
 c104974:	e54b300d 	strb	r3, [fp, #-13]
	while(c != '\n'){
 c104978:	ea000008 	b	c1049a0 <uart0_gets+0x48>
		*s++ = c;
 c10497c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104980:	e55b200d 	ldrb	r2, [fp, #-13]
 c104984:	e5c32000 	strb	r2, [r3]
 c104988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10498c:	e2833001 	add	r3, r3, #1
 c104990:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		c =  uart0_getchar();
 c104994:	ebffff51 	bl	c1046e0 <uart0_getchar>
 c104998:	e1a03000 	mov	r3, r0
 c10499c:	e54b300d 	strb	r3, [fp, #-13]

void uart0_gets( char *s )
{

	char c = uart0_getchar();
	while(c != '\n'){
 c1049a0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1049a4:	e353000a 	cmp	r3, #10
 c1049a8:	1afffff3 	bne	c10497c <uart0_gets+0x24>
		*s++ = c;
		c =  uart0_getchar();
	}
	*s = '\0';
 c1049ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1049b0:	e3a02000 	mov	r2, #0
 c1049b4:	e5c32000 	strb	r2, [r3]
}
 c1049b8:	e24bd00c 	sub	sp, fp, #12
 c1049bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1049c0:	e12fff1e 	bx	lr

0c1049c4 <uart0_getint>:

int32 uart0_getint( void )
{
 c1049c4:	e1a0c00d 	mov	ip, sp
 c1049c8:	e92dd800 	push	{fp, ip, lr, pc}
 c1049cc:	e24cb004 	sub	fp, ip, #4
 c1049d0:	e24dd010 	sub	sp, sp, #16
	int32 sol = 0, signo = 1;
 c1049d4:	e3a03000 	mov	r3, #0
 c1049d8:	e50b3010 	str	r3, [fp, #-16]
 c1049dc:	e3a03001 	mov	r3, #1
 c1049e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	char x = uart0_getchar();
 c1049e4:	ebffff3d 	bl	c1046e0 <uart0_getchar>
 c1049e8:	e1a03000 	mov	r3, r0
 c1049ec:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	if(x == '-'){
 c1049f0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1049f4:	e353002d 	cmp	r3, #45	; 0x2d
 c1049f8:	1a000015 	bne	c104a54 <uart0_getint+0x90>
		signo = -1;
 c1049fc:	e3e03000 	mvn	r3, #0
 c104a00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		x = uart0_getchar();
 c104a04:	ebffff35 	bl	c1046e0 <uart0_getchar>
 c104a08:	e1a03000 	mov	r3, r0
 c104a0c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	}
	while(x != '\n'){
 c104a10:	ea00000f 	b	c104a54 <uart0_getint+0x90>
		sol *= 10;
 c104a14:	e51b2010 	ldr	r2, [fp, #-16]
 c104a18:	e1a03002 	mov	r3, r2
 c104a1c:	e1a03103 	lsl	r3, r3, #2
 c104a20:	e0833002 	add	r3, r3, r2
 c104a24:	e1a03083 	lsl	r3, r3, #1
 c104a28:	e50b3010 	str	r3, [fp, #-16]
		int32 aux = x - '0';
 c104a2c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c104a30:	e2433030 	sub	r3, r3, #48	; 0x30
 c104a34:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		sol += aux;
 c104a38:	e51b2010 	ldr	r2, [fp, #-16]
 c104a3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104a40:	e0823003 	add	r3, r2, r3
 c104a44:	e50b3010 	str	r3, [fp, #-16]
		x = uart0_getchar();
 c104a48:	ebffff24 	bl	c1046e0 <uart0_getchar>
 c104a4c:	e1a03000 	mov	r3, r0
 c104a50:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	char x = uart0_getchar();
	if(x == '-'){
		signo = -1;
		x = uart0_getchar();
	}
	while(x != '\n'){
 c104a54:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c104a58:	e353000a 	cmp	r3, #10
 c104a5c:	1affffec 	bne	c104a14 <uart0_getint+0x50>
		sol *= 10;
		int32 aux = x - '0';
		sol += aux;
		x = uart0_getchar();
	}
	return sol*signo;
 c104a60:	e51b3010 	ldr	r3, [fp, #-16]
 c104a64:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c104a68:	e0030392 	mul	r3, r2, r3
}
 c104a6c:	e1a00003 	mov	r0, r3
 c104a70:	e24bd00c 	sub	sp, fp, #12
 c104a74:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104a78:	e12fff1e 	bx	lr

0c104a7c <uart0_gethex>:

uint32 uart0_gethex( void )
{//no estoy completamente seguro
 c104a7c:	e1a0c00d 	mov	ip, sp
 c104a80:	e92dd800 	push	{fp, ip, lr, pc}
 c104a84:	e24cb004 	sub	fp, ip, #4
 c104a88:	e24dd020 	sub	sp, sp, #32
	uint32 sol = 0, aux;
 c104a8c:	e3a03000 	mov	r3, #0
 c104a90:	e50b3010 	str	r3, [fp, #-16]
	char buf[8 + 1], x = uart0_getchar();
 c104a94:	ebffff11 	bl	c1046e0 <uart0_getchar>
 c104a98:	e1a03000 	mov	r3, r0
 c104a9c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uint32 i = 0, j = 0;
 c104aa0:	e3a03000 	mov	r3, #0
 c104aa4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c104aa8:	e3a03000 	mov	r3, #0
 c104aac:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	do{
		buf [i] = x;
 c104ab0:	e3e0301f 	mvn	r3, #31
 c104ab4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c104ab8:	e24b100c 	sub	r1, fp, #12
 c104abc:	e0812002 	add	r2, r1, r2
 c104ac0:	e0823003 	add	r3, r2, r3
 c104ac4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c104ac8:	e5c32000 	strb	r2, [r3]
		x = uart0_getchar();
 c104acc:	ebffff03 	bl	c1046e0 <uart0_getchar>
 c104ad0:	e1a03000 	mov	r3, r0
 c104ad4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		i++;
 c104ad8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104adc:	e2833001 	add	r3, r3, #1
 c104ae0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	}while(x != '\n');
 c104ae4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c104ae8:	e353000a 	cmp	r3, #10
 c104aec:	1affffef 	bne	c104ab0 <uart0_gethex+0x34>
	buf[i] = '\0';
 c104af0:	e3e0301f 	mvn	r3, #31
 c104af4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c104af8:	e24b100c 	sub	r1, fp, #12
 c104afc:	e0812002 	add	r2, r1, r2
 c104b00:	e0823003 	add	r3, r2, r3
 c104b04:	e3a02000 	mov	r2, #0
 c104b08:	e5c32000 	strb	r2, [r3]
	while(buf[j] != '\0'){
 c104b0c:	ea000036 	b	c104bec <uart0_gethex+0x170>
		aux = buf[j];
 c104b10:	e3e0301f 	mvn	r3, #31
 c104b14:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c104b18:	e24b100c 	sub	r1, fp, #12
 c104b1c:	e0812002 	add	r2, r1, r2
 c104b20:	e0823003 	add	r3, r2, r3
 c104b24:	e5d33000 	ldrb	r3, [r3]
 c104b28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if(buf[j] >= 97){
 c104b2c:	e3e0301f 	mvn	r3, #31
 c104b30:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c104b34:	e24b100c 	sub	r1, fp, #12
 c104b38:	e0812002 	add	r2, r1, r2
 c104b3c:	e0823003 	add	r3, r2, r3
 c104b40:	e5d33000 	ldrb	r3, [r3]
 c104b44:	e3530060 	cmp	r3, #96	; 0x60
 c104b48:	9a000006 	bls	c104b68 <uart0_gethex+0xec>
			aux -= 'a';
 c104b4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104b50:	e2433061 	sub	r3, r3, #97	; 0x61
 c104b54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			aux += 10;
 c104b58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104b5c:	e283300a 	add	r3, r3, #10
 c104b60:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c104b64:	ea000011 	b	c104bb0 <uart0_gethex+0x134>
		}
		else if(buf[j] >= 65){
 c104b68:	e3e0301f 	mvn	r3, #31
 c104b6c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c104b70:	e24b100c 	sub	r1, fp, #12
 c104b74:	e0812002 	add	r2, r1, r2
 c104b78:	e0823003 	add	r3, r2, r3
 c104b7c:	e5d33000 	ldrb	r3, [r3]
 c104b80:	e3530040 	cmp	r3, #64	; 0x40
 c104b84:	9a000006 	bls	c104ba4 <uart0_gethex+0x128>
			aux -= 'A';
 c104b88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104b8c:	e2433041 	sub	r3, r3, #65	; 0x41
 c104b90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			aux += 10;
 c104b94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104b98:	e283300a 	add	r3, r3, #10
 c104b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c104ba0:	ea000002 	b	c104bb0 <uart0_gethex+0x134>
		}
		else{ aux -= '0';}
 c104ba4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104ba8:	e2433030 	sub	r3, r3, #48	; 0x30
 c104bac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		sol += aux;
 c104bb0:	e51b2010 	ldr	r2, [fp, #-16]
 c104bb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104bb8:	e0823003 	add	r3, r2, r3
 c104bbc:	e50b3010 	str	r3, [fp, #-16]
		if(j < i - 1){
 c104bc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104bc4:	e2432001 	sub	r2, r3, #1
 c104bc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104bcc:	e1520003 	cmp	r2, r3
 c104bd0:	9a000002 	bls	c104be0 <uart0_gethex+0x164>
			sol *= 16;
 c104bd4:	e51b3010 	ldr	r3, [fp, #-16]
 c104bd8:	e1a03203 	lsl	r3, r3, #4
 c104bdc:	e50b3010 	str	r3, [fp, #-16]
		}
		j++;
 c104be0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104be4:	e2833001 	add	r3, r3, #1
 c104be8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		buf [i] = x;
		x = uart0_getchar();
		i++;
	}while(x != '\n');
	buf[i] = '\0';
	while(buf[j] != '\0'){
 c104bec:	e3e0301f 	mvn	r3, #31
 c104bf0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c104bf4:	e24b100c 	sub	r1, fp, #12
 c104bf8:	e0812002 	add	r2, r1, r2
 c104bfc:	e0823003 	add	r3, r2, r3
 c104c00:	e5d33000 	ldrb	r3, [r3]
 c104c04:	e3530000 	cmp	r3, #0
 c104c08:	1affffc0 	bne	c104b10 <uart0_gethex+0x94>
			sol *= 16;
		}
		j++;
	}

	return sol;
 c104c0c:	e51b3010 	ldr	r3, [fp, #-16]
}
 c104c10:	e1a00003 	mov	r0, r3
 c104c14:	e24bd00c 	sub	sp, fp, #12
 c104c18:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104c1c:	e12fff1e 	bx	lr

0c104c20 <__aeabi_uidiv>:
 c104c20:	e2512001 	subs	r2, r1, #1
 c104c24:	012fff1e 	bxeq	lr
 c104c28:	3a000036 	bcc	c104d08 <__aeabi_uidiv+0xe8>
 c104c2c:	e1500001 	cmp	r0, r1
 c104c30:	9a000022 	bls	c104cc0 <__aeabi_uidiv+0xa0>
 c104c34:	e1110002 	tst	r1, r2
 c104c38:	0a000023 	beq	c104ccc <__aeabi_uidiv+0xac>
 c104c3c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c104c40:	01a01181 	lsleq	r1, r1, #3
 c104c44:	03a03008 	moveq	r3, #8
 c104c48:	13a03001 	movne	r3, #1
 c104c4c:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c104c50:	31510000 	cmpcc	r1, r0
 c104c54:	31a01201 	lslcc	r1, r1, #4
 c104c58:	31a03203 	lslcc	r3, r3, #4
 c104c5c:	3afffffa 	bcc	c104c4c <__aeabi_uidiv+0x2c>
 c104c60:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c104c64:	31510000 	cmpcc	r1, r0
 c104c68:	31a01081 	lslcc	r1, r1, #1
 c104c6c:	31a03083 	lslcc	r3, r3, #1
 c104c70:	3afffffa 	bcc	c104c60 <__aeabi_uidiv+0x40>
 c104c74:	e3a02000 	mov	r2, #0
 c104c78:	e1500001 	cmp	r0, r1
 c104c7c:	20400001 	subcs	r0, r0, r1
 c104c80:	21822003 	orrcs	r2, r2, r3
 c104c84:	e15000a1 	cmp	r0, r1, lsr #1
 c104c88:	204000a1 	subcs	r0, r0, r1, lsr #1
 c104c8c:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c104c90:	e1500121 	cmp	r0, r1, lsr #2
 c104c94:	20400121 	subcs	r0, r0, r1, lsr #2
 c104c98:	21822123 	orrcs	r2, r2, r3, lsr #2
 c104c9c:	e15001a1 	cmp	r0, r1, lsr #3
 c104ca0:	204001a1 	subcs	r0, r0, r1, lsr #3
 c104ca4:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c104ca8:	e3500000 	cmp	r0, #0
 c104cac:	11b03223 	lsrsne	r3, r3, #4
 c104cb0:	11a01221 	lsrne	r1, r1, #4
 c104cb4:	1affffef 	bne	c104c78 <__aeabi_uidiv+0x58>
 c104cb8:	e1a00002 	mov	r0, r2
 c104cbc:	e12fff1e 	bx	lr
 c104cc0:	03a00001 	moveq	r0, #1
 c104cc4:	13a00000 	movne	r0, #0
 c104cc8:	e12fff1e 	bx	lr
 c104ccc:	e3510801 	cmp	r1, #65536	; 0x10000
 c104cd0:	21a01821 	lsrcs	r1, r1, #16
 c104cd4:	23a02010 	movcs	r2, #16
 c104cd8:	33a02000 	movcc	r2, #0
 c104cdc:	e3510c01 	cmp	r1, #256	; 0x100
 c104ce0:	21a01421 	lsrcs	r1, r1, #8
 c104ce4:	22822008 	addcs	r2, r2, #8
 c104ce8:	e3510010 	cmp	r1, #16
 c104cec:	21a01221 	lsrcs	r1, r1, #4
 c104cf0:	22822004 	addcs	r2, r2, #4
 c104cf4:	e3510004 	cmp	r1, #4
 c104cf8:	82822003 	addhi	r2, r2, #3
 c104cfc:	908220a1 	addls	r2, r2, r1, lsr #1
 c104d00:	e1a00230 	lsr	r0, r0, r2
 c104d04:	e12fff1e 	bx	lr
 c104d08:	e3500000 	cmp	r0, #0
 c104d0c:	13e00000 	mvnne	r0, #0
 c104d10:	ea000007 	b	c104d34 <__aeabi_idiv0>

0c104d14 <__aeabi_uidivmod>:
 c104d14:	e3510000 	cmp	r1, #0
 c104d18:	0afffffa 	beq	c104d08 <__aeabi_uidiv+0xe8>
 c104d1c:	e92d4003 	push	{r0, r1, lr}
 c104d20:	ebffffbe 	bl	c104c20 <__aeabi_uidiv>
 c104d24:	e8bd4006 	pop	{r1, r2, lr}
 c104d28:	e0030092 	mul	r3, r2, r0
 c104d2c:	e0411003 	sub	r1, r1, r3
 c104d30:	e12fff1e 	bx	lr

0c104d34 <__aeabi_idiv0>:
 c104d34:	e12fff1e 	bx	lr

0c104d38 <__aeabi_uldivmod>:
 c104d38:	e3530000 	cmp	r3, #0
 c104d3c:	03520000 	cmpeq	r2, #0
 c104d40:	1a000004 	bne	c104d58 <__aeabi_uldivmod+0x20>
 c104d44:	e3510000 	cmp	r1, #0
 c104d48:	03500000 	cmpeq	r0, #0
 c104d4c:	13e01000 	mvnne	r1, #0
 c104d50:	13e00000 	mvnne	r0, #0
 c104d54:	eafffff6 	b	c104d34 <__aeabi_idiv0>
 c104d58:	e24dd008 	sub	sp, sp, #8
 c104d5c:	e92d6000 	push	{sp, lr}
 c104d60:	eb000013 	bl	c104db4 <__gnu_uldivmod_helper>
 c104d64:	e59de004 	ldr	lr, [sp, #4]
 c104d68:	e28dd008 	add	sp, sp, #8
 c104d6c:	e8bd000c 	pop	{r2, r3}
 c104d70:	e12fff1e 	bx	lr

0c104d74 <__gnu_ldivmod_helper>:
 c104d74:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c104d78:	e1a04002 	mov	r4, r2
 c104d7c:	e1a07003 	mov	r7, r3
 c104d80:	e1a05000 	mov	r5, r0
 c104d84:	e1a06001 	mov	r6, r1
 c104d88:	eb000019 	bl	c104df4 <__divdi3>
 c104d8c:	e0070790 	mul	r7, r0, r7
 c104d90:	e0832490 	umull	r2, r3, r0, r4
 c104d94:	e0247491 	mla	r4, r1, r4, r7
 c104d98:	e0843003 	add	r3, r4, r3
 c104d9c:	e0555002 	subs	r5, r5, r2
 c104da0:	e0c66003 	sbc	r6, r6, r3
 c104da4:	e59d3018 	ldr	r3, [sp, #24]
 c104da8:	e8830060 	stm	r3, {r5, r6}
 c104dac:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c104db0:	e12fff1e 	bx	lr

0c104db4 <__gnu_uldivmod_helper>:
 c104db4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c104db8:	e1a04002 	mov	r4, r2
 c104dbc:	e1a07003 	mov	r7, r3
 c104dc0:	e1a05000 	mov	r5, r0
 c104dc4:	e1a06001 	mov	r6, r1
 c104dc8:	eb000133 	bl	c10529c <__udivdi3>
 c104dcc:	e0070790 	mul	r7, r0, r7
 c104dd0:	e0832490 	umull	r2, r3, r0, r4
 c104dd4:	e0247491 	mla	r4, r1, r4, r7
 c104dd8:	e0843003 	add	r3, r4, r3
 c104ddc:	e0555002 	subs	r5, r5, r2
 c104de0:	e0c66003 	sbc	r6, r6, r3
 c104de4:	e59d3018 	ldr	r3, [sp, #24]
 c104de8:	e8830060 	stm	r3, {r5, r6}
 c104dec:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c104df0:	e12fff1e 	bx	lr

0c104df4 <__divdi3>:
 c104df4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c104df8:	e3510000 	cmp	r1, #0
 c104dfc:	e24dd014 	sub	sp, sp, #20
 c104e00:	e1a0c003 	mov	ip, r3
 c104e04:	a3a07000 	movge	r7, #0
 c104e08:	ba000094 	blt	c105060 <__divdi3+0x26c>
 c104e0c:	e35c0000 	cmp	ip, #0
 c104e10:	ba00008e 	blt	c105050 <__divdi3+0x25c>
 c104e14:	e253a000 	subs	sl, r3, #0
 c104e18:	e1a0b000 	mov	fp, r0
 c104e1c:	e1a08001 	mov	r8, r1
 c104e20:	e1a09002 	mov	r9, r2
 c104e24:	e1a04002 	mov	r4, r2
 c104e28:	e1a05000 	mov	r5, r0
 c104e2c:	e1a06001 	mov	r6, r1
 c104e30:	1a00003e 	bne	c104f30 <__divdi3+0x13c>
 c104e34:	e1520001 	cmp	r2, r1
 c104e38:	9a00004c 	bls	c104f70 <__divdi3+0x17c>
 c104e3c:	e1a00002 	mov	r0, r2
 c104e40:	eb000222 	bl	c1056d0 <__clzsi2>
 c104e44:	e3500000 	cmp	r0, #0
 c104e48:	12603020 	rsbne	r3, r0, #32
 c104e4c:	11a0333b 	lsrne	r3, fp, r3
 c104e50:	11a04019 	lslne	r4, r9, r0
 c104e54:	11836018 	orrne	r6, r3, r8, lsl r0
 c104e58:	e1a09824 	lsr	r9, r4, #16
 c104e5c:	11a0501b 	lslne	r5, fp, r0
 c104e60:	e1a01009 	mov	r1, r9
 c104e64:	e1a00006 	mov	r0, r6
 c104e68:	ebffff6c 	bl	c104c20 <__aeabi_uidiv>
 c104e6c:	e1a01009 	mov	r1, r9
 c104e70:	e1a0a000 	mov	sl, r0
 c104e74:	e1a00006 	mov	r0, r6
 c104e78:	ebffffa5 	bl	c104d14 <__aeabi_uidivmod>
 c104e7c:	e1a08804 	lsl	r8, r4, #16
 c104e80:	e1a08828 	lsr	r8, r8, #16
 c104e84:	e0030a98 	mul	r3, r8, sl
 c104e88:	e1a0b825 	lsr	fp, r5, #16
 c104e8c:	e18bb801 	orr	fp, fp, r1, lsl #16
 c104e90:	e153000b 	cmp	r3, fp
 c104e94:	9a000005 	bls	c104eb0 <__divdi3+0xbc>
 c104e98:	e09bb004 	adds	fp, fp, r4
 c104e9c:	e24aa001 	sub	sl, sl, #1
 c104ea0:	2a000002 	bcs	c104eb0 <__divdi3+0xbc>
 c104ea4:	e153000b 	cmp	r3, fp
 c104ea8:	824aa001 	subhi	sl, sl, #1
 c104eac:	808bb004 	addhi	fp, fp, r4
 c104eb0:	e063b00b 	rsb	fp, r3, fp
 c104eb4:	e1a01009 	mov	r1, r9
 c104eb8:	e1a0000b 	mov	r0, fp
 c104ebc:	ebffff57 	bl	c104c20 <__aeabi_uidiv>
 c104ec0:	e1a01009 	mov	r1, r9
 c104ec4:	e1a06000 	mov	r6, r0
 c104ec8:	e1a0000b 	mov	r0, fp
 c104ecc:	ebffff90 	bl	c104d14 <__aeabi_uidivmod>
 c104ed0:	e0080896 	mul	r8, r6, r8
 c104ed4:	e1a00805 	lsl	r0, r5, #16
 c104ed8:	e1a05820 	lsr	r5, r0, #16
 c104edc:	e1855801 	orr	r5, r5, r1, lsl #16
 c104ee0:	e1580005 	cmp	r8, r5
 c104ee4:	9a000004 	bls	c104efc <__divdi3+0x108>
 c104ee8:	e0955004 	adds	r5, r5, r4
 c104eec:	e2466001 	sub	r6, r6, #1
 c104ef0:	2a000001 	bcs	c104efc <__divdi3+0x108>
 c104ef4:	e1580005 	cmp	r8, r5
 c104ef8:	82466001 	subhi	r6, r6, #1
 c104efc:	e186680a 	orr	r6, r6, sl, lsl #16
 c104f00:	e3a09000 	mov	r9, #0
 c104f04:	e3570000 	cmp	r7, #0
 c104f08:	e1a03006 	mov	r3, r6
 c104f0c:	e1a04009 	mov	r4, r9
 c104f10:	0a000001 	beq	c104f1c <__divdi3+0x128>
 c104f14:	e2733000 	rsbs	r3, r3, #0
 c104f18:	e2e44000 	rsc	r4, r4, #0
 c104f1c:	e1a00003 	mov	r0, r3
 c104f20:	e1a01004 	mov	r1, r4
 c104f24:	e28dd014 	add	sp, sp, #20
 c104f28:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c104f2c:	e12fff1e 	bx	lr
 c104f30:	e15a0001 	cmp	sl, r1
 c104f34:	83a09000 	movhi	r9, #0
 c104f38:	81a06009 	movhi	r6, r9
 c104f3c:	8afffff0 	bhi	c104f04 <__divdi3+0x110>
 c104f40:	e1a00003 	mov	r0, r3
 c104f44:	eb0001e1 	bl	c1056d0 <__clzsi2>
 c104f48:	e2504000 	subs	r4, r0, #0
 c104f4c:	1a00007a 	bne	c10513c <__divdi3+0x348>
 c104f50:	e15a0008 	cmp	sl, r8
 c104f54:	2159000b 	cmpcs	r9, fp
 c104f58:	83a09000 	movhi	r9, #0
 c104f5c:	93a09001 	movls	r9, #1
 c104f60:	93a06001 	movls	r6, #1
 c104f64:	91a09004 	movls	r9, r4
 c104f68:	81a06009 	movhi	r6, r9
 c104f6c:	eaffffe4 	b	c104f04 <__divdi3+0x110>
 c104f70:	e3520000 	cmp	r2, #0
 c104f74:	1a000003 	bne	c104f88 <__divdi3+0x194>
 c104f78:	e3a00001 	mov	r0, #1
 c104f7c:	e1a01002 	mov	r1, r2
 c104f80:	ebffff26 	bl	c104c20 <__aeabi_uidiv>
 c104f84:	e1a04000 	mov	r4, r0
 c104f88:	e1a00004 	mov	r0, r4
 c104f8c:	eb0001cf 	bl	c1056d0 <__clzsi2>
 c104f90:	e2503000 	subs	r3, r0, #0
 c104f94:	1a000035 	bne	c105070 <__divdi3+0x27c>
 c104f98:	e3a01001 	mov	r1, #1
 c104f9c:	e1a09804 	lsl	r9, r4, #16
 c104fa0:	e58d1008 	str	r1, [sp, #8]
 c104fa4:	e0646006 	rsb	r6, r4, r6
 c104fa8:	e1a08824 	lsr	r8, r4, #16
 c104fac:	e1a09829 	lsr	r9, r9, #16
 c104fb0:	e1a01008 	mov	r1, r8
 c104fb4:	e1a00006 	mov	r0, r6
 c104fb8:	ebffff18 	bl	c104c20 <__aeabi_uidiv>
 c104fbc:	e1a01008 	mov	r1, r8
 c104fc0:	e1a0a000 	mov	sl, r0
 c104fc4:	e1a00006 	mov	r0, r6
 c104fc8:	ebffff51 	bl	c104d14 <__aeabi_uidivmod>
 c104fcc:	e0030a99 	mul	r3, r9, sl
 c104fd0:	e1a0c825 	lsr	ip, r5, #16
 c104fd4:	e18cb801 	orr	fp, ip, r1, lsl #16
 c104fd8:	e153000b 	cmp	r3, fp
 c104fdc:	9a000005 	bls	c104ff8 <__divdi3+0x204>
 c104fe0:	e09bb004 	adds	fp, fp, r4
 c104fe4:	e24aa001 	sub	sl, sl, #1
 c104fe8:	2a000002 	bcs	c104ff8 <__divdi3+0x204>
 c104fec:	e153000b 	cmp	r3, fp
 c104ff0:	824aa001 	subhi	sl, sl, #1
 c104ff4:	808bb004 	addhi	fp, fp, r4
 c104ff8:	e063b00b 	rsb	fp, r3, fp
 c104ffc:	e1a01008 	mov	r1, r8
 c105000:	e1a0000b 	mov	r0, fp
 c105004:	ebffff05 	bl	c104c20 <__aeabi_uidiv>
 c105008:	e1a01008 	mov	r1, r8
 c10500c:	e1a06000 	mov	r6, r0
 c105010:	e1a0000b 	mov	r0, fp
 c105014:	ebffff3e 	bl	c104d14 <__aeabi_uidivmod>
 c105018:	e0090996 	mul	r9, r6, r9
 c10501c:	e1a00805 	lsl	r0, r5, #16
 c105020:	e1a05820 	lsr	r5, r0, #16
 c105024:	e1855801 	orr	r5, r5, r1, lsl #16
 c105028:	e1590005 	cmp	r9, r5
 c10502c:	9a000004 	bls	c105044 <__divdi3+0x250>
 c105030:	e0955004 	adds	r5, r5, r4
 c105034:	e2466001 	sub	r6, r6, #1
 c105038:	2a000001 	bcs	c105044 <__divdi3+0x250>
 c10503c:	e1590005 	cmp	r9, r5
 c105040:	82466001 	subhi	r6, r6, #1
 c105044:	e186680a 	orr	r6, r6, sl, lsl #16
 c105048:	e59d9008 	ldr	r9, [sp, #8]
 c10504c:	eaffffac 	b	c104f04 <__divdi3+0x110>
 c105050:	e1e07007 	mvn	r7, r7
 c105054:	e2722000 	rsbs	r2, r2, #0
 c105058:	e2e33000 	rsc	r3, r3, #0
 c10505c:	eaffff6c 	b	c104e14 <__divdi3+0x20>
 c105060:	e2700000 	rsbs	r0, r0, #0
 c105064:	e2e11000 	rsc	r1, r1, #0
 c105068:	e3e07000 	mvn	r7, #0
 c10506c:	eaffff66 	b	c104e0c <__divdi3+0x18>
 c105070:	e2638020 	rsb	r8, r3, #32
 c105074:	e1a0b835 	lsr	fp, r5, r8
 c105078:	e1a04314 	lsl	r4, r4, r3
 c10507c:	e1a0a836 	lsr	sl, r6, r8
 c105080:	e18be316 	orr	lr, fp, r6, lsl r3
 c105084:	e1a08824 	lsr	r8, r4, #16
 c105088:	e1a0c804 	lsl	ip, r4, #16
 c10508c:	e1a01008 	mov	r1, r8
 c105090:	e1a0000a 	mov	r0, sl
 c105094:	e1a0982c 	lsr	r9, ip, #16
 c105098:	e1a05315 	lsl	r5, r5, r3
 c10509c:	e58de008 	str	lr, [sp, #8]
 c1050a0:	ebfffede 	bl	c104c20 <__aeabi_uidiv>
 c1050a4:	e1a01008 	mov	r1, r8
 c1050a8:	e1a0b000 	mov	fp, r0
 c1050ac:	e1a0000a 	mov	r0, sl
 c1050b0:	ebffff17 	bl	c104d14 <__aeabi_uidivmod>
 c1050b4:	e0030b99 	mul	r3, r9, fp
 c1050b8:	e59d2008 	ldr	r2, [sp, #8]
 c1050bc:	e1a06822 	lsr	r6, r2, #16
 c1050c0:	e1866801 	orr	r6, r6, r1, lsl #16
 c1050c4:	e1530006 	cmp	r3, r6
 c1050c8:	9a000002 	bls	c1050d8 <__divdi3+0x2e4>
 c1050cc:	e0966004 	adds	r6, r6, r4
 c1050d0:	e24bb001 	sub	fp, fp, #1
 c1050d4:	3a00006c 	bcc	c10528c <__divdi3+0x498>
 c1050d8:	e0636006 	rsb	r6, r3, r6
 c1050dc:	e1a01008 	mov	r1, r8
 c1050e0:	e1a00006 	mov	r0, r6
 c1050e4:	ebfffecd 	bl	c104c20 <__aeabi_uidiv>
 c1050e8:	e1a01008 	mov	r1, r8
 c1050ec:	e1a0a000 	mov	sl, r0
 c1050f0:	e1a00006 	mov	r0, r6
 c1050f4:	ebffff06 	bl	c104d14 <__aeabi_uidivmod>
 c1050f8:	e0030a99 	mul	r3, r9, sl
 c1050fc:	e59d2008 	ldr	r2, [sp, #8]
 c105100:	e1a06802 	lsl	r6, r2, #16
 c105104:	e1a00826 	lsr	r0, r6, #16
 c105108:	e1806801 	orr	r6, r0, r1, lsl #16
 c10510c:	e1530006 	cmp	r3, r6
 c105110:	9a000005 	bls	c10512c <__divdi3+0x338>
 c105114:	e0966004 	adds	r6, r6, r4
 c105118:	e24aa001 	sub	sl, sl, #1
 c10511c:	2a000002 	bcs	c10512c <__divdi3+0x338>
 c105120:	e1530006 	cmp	r3, r6
 c105124:	824aa001 	subhi	sl, sl, #1
 c105128:	80866004 	addhi	r6, r6, r4
 c10512c:	e0636006 	rsb	r6, r3, r6
 c105130:	e18a380b 	orr	r3, sl, fp, lsl #16
 c105134:	e58d3008 	str	r3, [sp, #8]
 c105138:	eaffff9c 	b	c104fb0 <__divdi3+0x1bc>
 c10513c:	e2641020 	rsb	r1, r4, #32
 c105140:	e1a00139 	lsr	r0, r9, r1
 c105144:	e1a0213b 	lsr	r2, fp, r1
 c105148:	e180a41a 	orr	sl, r0, sl, lsl r4
 c10514c:	e1a06138 	lsr	r6, r8, r1
 c105150:	e1828418 	orr	r8, r2, r8, lsl r4
 c105154:	e1a0380a 	lsl	r3, sl, #16
 c105158:	e1a0b82a 	lsr	fp, sl, #16
 c10515c:	e1a0e823 	lsr	lr, r3, #16
 c105160:	e1a0100b 	mov	r1, fp
 c105164:	e1a00006 	mov	r0, r6
 c105168:	e58d8008 	str	r8, [sp, #8]
 c10516c:	e58de00c 	str	lr, [sp, #12]
 c105170:	ebfffeaa 	bl	c104c20 <__aeabi_uidiv>
 c105174:	e1a0100b 	mov	r1, fp
 c105178:	e1a08000 	mov	r8, r0
 c10517c:	e1a00006 	mov	r0, r6
 c105180:	ebfffee3 	bl	c104d14 <__aeabi_uidivmod>
 c105184:	e59dc00c 	ldr	ip, [sp, #12]
 c105188:	e002089c 	mul	r2, ip, r8
 c10518c:	e59d3008 	ldr	r3, [sp, #8]
 c105190:	e1a06823 	lsr	r6, r3, #16
 c105194:	e1861801 	orr	r1, r6, r1, lsl #16
 c105198:	e1520001 	cmp	r2, r1
 c10519c:	e1a03419 	lsl	r3, r9, r4
 c1051a0:	9a000002 	bls	c1051b0 <__divdi3+0x3bc>
 c1051a4:	e091100a 	adds	r1, r1, sl
 c1051a8:	e2488001 	sub	r8, r8, #1
 c1051ac:	3a000032 	bcc	c10527c <__divdi3+0x488>
 c1051b0:	e0629001 	rsb	r9, r2, r1
 c1051b4:	e1a00009 	mov	r0, r9
 c1051b8:	e1a0100b 	mov	r1, fp
 c1051bc:	e58d3004 	str	r3, [sp, #4]
 c1051c0:	ebfffe96 	bl	c104c20 <__aeabi_uidiv>
 c1051c4:	e1a0100b 	mov	r1, fp
 c1051c8:	e1a06000 	mov	r6, r0
 c1051cc:	e1a00009 	mov	r0, r9
 c1051d0:	ebfffecf 	bl	c104d14 <__aeabi_uidivmod>
 c1051d4:	e59d000c 	ldr	r0, [sp, #12]
 c1051d8:	e0020690 	mul	r2, r0, r6
 c1051dc:	e59d3008 	ldr	r3, [sp, #8]
 c1051e0:	e1a0c803 	lsl	ip, r3, #16
 c1051e4:	e1a0982c 	lsr	r9, ip, #16
 c1051e8:	e1890801 	orr	r0, r9, r1, lsl #16
 c1051ec:	e1520000 	cmp	r2, r0
 c1051f0:	e59d3004 	ldr	r3, [sp, #4]
 c1051f4:	9a000002 	bls	c105204 <__divdi3+0x410>
 c1051f8:	e090000a 	adds	r0, r0, sl
 c1051fc:	e2466001 	sub	r6, r6, #1
 c105200:	3a000019 	bcc	c10526c <__divdi3+0x478>
 c105204:	e062e000 	rsb	lr, r2, r0
 c105208:	e1866808 	orr	r6, r6, r8, lsl #16
 c10520c:	e1a02826 	lsr	r2, r6, #16
 c105210:	e1a01823 	lsr	r1, r3, #16
 c105214:	e1c6c802 	bic	ip, r6, r2, lsl #16
 c105218:	e1c39801 	bic	r9, r3, r1, lsl #16
 c10521c:	e003099c 	mul	r3, ip, r9
 c105220:	e0090992 	mul	r9, r2, r9
 c105224:	e00c0c91 	mul	ip, r1, ip
 c105228:	e0010192 	mul	r1, r2, r1
 c10522c:	e099c00c 	adds	ip, r9, ip
 c105230:	22811801 	addcs	r1, r1, #65536	; 0x10000
 c105234:	e093380c 	adds	r3, r3, ip, lsl #16
 c105238:	e0a1182c 	adc	r1, r1, ip, lsr #16
 c10523c:	e15e0001 	cmp	lr, r1
 c105240:	3a000006 	bcc	c105260 <__divdi3+0x46c>
 c105244:	13a02000 	movne	r2, #0
 c105248:	03a02001 	moveq	r2, #1
 c10524c:	e1530415 	cmp	r3, r5, lsl r4
 c105250:	93a09000 	movls	r9, #0
 c105254:	82029001 	andhi	r9, r2, #1
 c105258:	e3590000 	cmp	r9, #0
 c10525c:	0affff28 	beq	c104f04 <__divdi3+0x110>
 c105260:	e2466001 	sub	r6, r6, #1
 c105264:	e3a09000 	mov	r9, #0
 c105268:	eaffff25 	b	c104f04 <__divdi3+0x110>
 c10526c:	e1520000 	cmp	r2, r0
 c105270:	82466001 	subhi	r6, r6, #1
 c105274:	8080000a 	addhi	r0, r0, sl
 c105278:	eaffffe1 	b	c105204 <__divdi3+0x410>
 c10527c:	e1520001 	cmp	r2, r1
 c105280:	82488001 	subhi	r8, r8, #1
 c105284:	8081100a 	addhi	r1, r1, sl
 c105288:	eaffffc8 	b	c1051b0 <__divdi3+0x3bc>
 c10528c:	e1530006 	cmp	r3, r6
 c105290:	824bb001 	subhi	fp, fp, #1
 c105294:	80866004 	addhi	r6, r6, r4
 c105298:	eaffff8e 	b	c1050d8 <__divdi3+0x2e4>

0c10529c <__udivdi3>:
 c10529c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c1052a0:	e2538000 	subs	r8, r3, #0
 c1052a4:	e24dd00c 	sub	sp, sp, #12
 c1052a8:	e1a05000 	mov	r5, r0
 c1052ac:	e1a04001 	mov	r4, r1
 c1052b0:	e1a06002 	mov	r6, r2
 c1052b4:	e1a0a002 	mov	sl, r2
 c1052b8:	e1a0b000 	mov	fp, r0
 c1052bc:	e1a07001 	mov	r7, r1
 c1052c0:	1a000037 	bne	c1053a4 <__udivdi3+0x108>
 c1052c4:	e1520001 	cmp	r2, r1
 c1052c8:	9a000045 	bls	c1053e4 <__udivdi3+0x148>
 c1052cc:	e1a00002 	mov	r0, r2
 c1052d0:	eb0000fe 	bl	c1056d0 <__clzsi2>
 c1052d4:	e3500000 	cmp	r0, #0
 c1052d8:	12603020 	rsbne	r3, r0, #32
 c1052dc:	11a03335 	lsrne	r3, r5, r3
 c1052e0:	11a0a016 	lslne	sl, r6, r0
 c1052e4:	11837014 	orrne	r7, r3, r4, lsl r0
 c1052e8:	e1a0482a 	lsr	r4, sl, #16
 c1052ec:	11a0b015 	lslne	fp, r5, r0
 c1052f0:	e1a01004 	mov	r1, r4
 c1052f4:	e1a00007 	mov	r0, r7
 c1052f8:	ebfffe48 	bl	c104c20 <__aeabi_uidiv>
 c1052fc:	e1a01004 	mov	r1, r4
 c105300:	e1a08000 	mov	r8, r0
 c105304:	e1a00007 	mov	r0, r7
 c105308:	ebfffe81 	bl	c104d14 <__aeabi_uidivmod>
 c10530c:	e1a0680a 	lsl	r6, sl, #16
 c105310:	e1a06826 	lsr	r6, r6, #16
 c105314:	e0030896 	mul	r3, r6, r8
 c105318:	e1a0782b 	lsr	r7, fp, #16
 c10531c:	e1877801 	orr	r7, r7, r1, lsl #16
 c105320:	e1530007 	cmp	r3, r7
 c105324:	9a000005 	bls	c105340 <__udivdi3+0xa4>
 c105328:	e097700a 	adds	r7, r7, sl
 c10532c:	e2488001 	sub	r8, r8, #1
 c105330:	2a000002 	bcs	c105340 <__udivdi3+0xa4>
 c105334:	e1530007 	cmp	r3, r7
 c105338:	82488001 	subhi	r8, r8, #1
 c10533c:	8087700a 	addhi	r7, r7, sl
 c105340:	e0637007 	rsb	r7, r3, r7
 c105344:	e1a01004 	mov	r1, r4
 c105348:	e1a00007 	mov	r0, r7
 c10534c:	ebfffe33 	bl	c104c20 <__aeabi_uidiv>
 c105350:	e1a01004 	mov	r1, r4
 c105354:	e1a05000 	mov	r5, r0
 c105358:	e1a00007 	mov	r0, r7
 c10535c:	ebfffe6c 	bl	c104d14 <__aeabi_uidivmod>
 c105360:	e0060695 	mul	r6, r5, r6
 c105364:	e1a0080b 	lsl	r0, fp, #16
 c105368:	e1a0b820 	lsr	fp, r0, #16
 c10536c:	e18bb801 	orr	fp, fp, r1, lsl #16
 c105370:	e156000b 	cmp	r6, fp
 c105374:	9a000004 	bls	c10538c <__udivdi3+0xf0>
 c105378:	e09bb00a 	adds	fp, fp, sl
 c10537c:	e2455001 	sub	r5, r5, #1
 c105380:	2a000001 	bcs	c10538c <__udivdi3+0xf0>
 c105384:	e156000b 	cmp	r6, fp
 c105388:	82455001 	subhi	r5, r5, #1
 c10538c:	e1858808 	orr	r8, r5, r8, lsl #16
 c105390:	e3a01000 	mov	r1, #0
 c105394:	e1a00008 	mov	r0, r8
 c105398:	e28dd00c 	add	sp, sp, #12
 c10539c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c1053a0:	e12fff1e 	bx	lr
 c1053a4:	e1580001 	cmp	r8, r1
 c1053a8:	83a01000 	movhi	r1, #0
 c1053ac:	81a08001 	movhi	r8, r1
 c1053b0:	8afffff7 	bhi	c105394 <__udivdi3+0xf8>
 c1053b4:	e1a00008 	mov	r0, r8
 c1053b8:	eb0000c4 	bl	c1056d0 <__clzsi2>
 c1053bc:	e2507000 	subs	r7, r0, #0
 c1053c0:	1a00003e 	bne	c1054c0 <__udivdi3+0x224>
 c1053c4:	e1580004 	cmp	r8, r4
 c1053c8:	21560005 	cmpcs	r6, r5
 c1053cc:	83a01000 	movhi	r1, #0
 c1053d0:	93a01001 	movls	r1, #1
 c1053d4:	93a08001 	movls	r8, #1
 c1053d8:	91a01007 	movls	r1, r7
 c1053dc:	81a08001 	movhi	r8, r1
 c1053e0:	eaffffeb 	b	c105394 <__udivdi3+0xf8>
 c1053e4:	e3520000 	cmp	r2, #0
 c1053e8:	1a000003 	bne	c1053fc <__udivdi3+0x160>
 c1053ec:	e3a00001 	mov	r0, #1
 c1053f0:	e1a01002 	mov	r1, r2
 c1053f4:	ebfffe09 	bl	c104c20 <__aeabi_uidiv>
 c1053f8:	e1a0a000 	mov	sl, r0
 c1053fc:	e1a0000a 	mov	r0, sl
 c105400:	eb0000b2 	bl	c1056d0 <__clzsi2>
 c105404:	e2503000 	subs	r3, r0, #0
 c105408:	1a000075 	bne	c1055e4 <__udivdi3+0x348>
 c10540c:	e1a0180a 	lsl	r1, sl, #16
 c105410:	e06a4004 	rsb	r4, sl, r4
 c105414:	e1a0982a 	lsr	r9, sl, #16
 c105418:	e1a06821 	lsr	r6, r1, #16
 c10541c:	e3a07001 	mov	r7, #1
 c105420:	e1a01009 	mov	r1, r9
 c105424:	e1a00004 	mov	r0, r4
 c105428:	ebfffdfc 	bl	c104c20 <__aeabi_uidiv>
 c10542c:	e1a01009 	mov	r1, r9
 c105430:	e1a05000 	mov	r5, r0
 c105434:	e1a00004 	mov	r0, r4
 c105438:	ebfffe35 	bl	c104d14 <__aeabi_uidivmod>
 c10543c:	e0030596 	mul	r3, r6, r5
 c105440:	e1a0282b 	lsr	r2, fp, #16
 c105444:	e1824801 	orr	r4, r2, r1, lsl #16
 c105448:	e1530004 	cmp	r3, r4
 c10544c:	9a000005 	bls	c105468 <__udivdi3+0x1cc>
 c105450:	e094400a 	adds	r4, r4, sl
 c105454:	e2455001 	sub	r5, r5, #1
 c105458:	2a000002 	bcs	c105468 <__udivdi3+0x1cc>
 c10545c:	e1530004 	cmp	r3, r4
 c105460:	82455001 	subhi	r5, r5, #1
 c105464:	8084400a 	addhi	r4, r4, sl
 c105468:	e0634004 	rsb	r4, r3, r4
 c10546c:	e1a01009 	mov	r1, r9
 c105470:	e1a00004 	mov	r0, r4
 c105474:	ebfffde9 	bl	c104c20 <__aeabi_uidiv>
 c105478:	e1a01009 	mov	r1, r9
 c10547c:	e1a08000 	mov	r8, r0
 c105480:	e1a00004 	mov	r0, r4
 c105484:	ebfffe22 	bl	c104d14 <__aeabi_uidivmod>
 c105488:	e0060698 	mul	r6, r8, r6
 c10548c:	e1a0b80b 	lsl	fp, fp, #16
 c105490:	e1a0382b 	lsr	r3, fp, #16
 c105494:	e183b801 	orr	fp, r3, r1, lsl #16
 c105498:	e156000b 	cmp	r6, fp
 c10549c:	9a000004 	bls	c1054b4 <__udivdi3+0x218>
 c1054a0:	e09bb00a 	adds	fp, fp, sl
 c1054a4:	e2488001 	sub	r8, r8, #1
 c1054a8:	2a000001 	bcs	c1054b4 <__udivdi3+0x218>
 c1054ac:	e156000b 	cmp	r6, fp
 c1054b0:	82488001 	subhi	r8, r8, #1
 c1054b4:	e1888805 	orr	r8, r8, r5, lsl #16
 c1054b8:	e1a01007 	mov	r1, r7
 c1054bc:	eaffffb4 	b	c105394 <__udivdi3+0xf8>
 c1054c0:	e267a020 	rsb	sl, r7, #32
 c1054c4:	e1a01a36 	lsr	r1, r6, sl
 c1054c8:	e1a02a35 	lsr	r2, r5, sl
 c1054cc:	e1818718 	orr	r8, r1, r8, lsl r7
 c1054d0:	e1a0ba34 	lsr	fp, r4, sl
 c1054d4:	e1829714 	orr	r9, r2, r4, lsl r7
 c1054d8:	e1a0a828 	lsr	sl, r8, #16
 c1054dc:	e1a0e808 	lsl	lr, r8, #16
 c1054e0:	e1a0100a 	mov	r1, sl
 c1054e4:	e1a0000b 	mov	r0, fp
 c1054e8:	e1a0482e 	lsr	r4, lr, #16
 c1054ec:	e58d9004 	str	r9, [sp, #4]
 c1054f0:	ebfffdca 	bl	c104c20 <__aeabi_uidiv>
 c1054f4:	e1a0100a 	mov	r1, sl
 c1054f8:	e1a09000 	mov	r9, r0
 c1054fc:	e1a0000b 	mov	r0, fp
 c105500:	ebfffe03 	bl	c104d14 <__aeabi_uidivmod>
 c105504:	e0020994 	mul	r2, r4, r9
 c105508:	e59d0004 	ldr	r0, [sp, #4]
 c10550c:	e1a0c820 	lsr	ip, r0, #16
 c105510:	e18cb801 	orr	fp, ip, r1, lsl #16
 c105514:	e152000b 	cmp	r2, fp
 c105518:	e1a03716 	lsl	r3, r6, r7
 c10551c:	9a000002 	bls	c10552c <__udivdi3+0x290>
 c105520:	e09bb008 	adds	fp, fp, r8
 c105524:	e2499001 	sub	r9, r9, #1
 c105528:	3a000060 	bcc	c1056b0 <__udivdi3+0x414>
 c10552c:	e062b00b 	rsb	fp, r2, fp
 c105530:	e1a0100a 	mov	r1, sl
 c105534:	e1a0000b 	mov	r0, fp
 c105538:	e58d3000 	str	r3, [sp]
 c10553c:	ebfffdb7 	bl	c104c20 <__aeabi_uidiv>
 c105540:	e1a0100a 	mov	r1, sl
 c105544:	e1a06000 	mov	r6, r0
 c105548:	e1a0000b 	mov	r0, fp
 c10554c:	ebfffdf0 	bl	c104d14 <__aeabi_uidivmod>
 c105550:	e0040496 	mul	r4, r6, r4
 c105554:	e59d0004 	ldr	r0, [sp, #4]
 c105558:	e1a0c800 	lsl	ip, r0, #16
 c10555c:	e1a0382c 	lsr	r3, ip, #16
 c105560:	e1832801 	orr	r2, r3, r1, lsl #16
 c105564:	e1540002 	cmp	r4, r2
 c105568:	e59d3000 	ldr	r3, [sp]
 c10556c:	9a000002 	bls	c10557c <__udivdi3+0x2e0>
 c105570:	e0922008 	adds	r2, r2, r8
 c105574:	e2466001 	sub	r6, r6, #1
 c105578:	3a000048 	bcc	c1056a0 <__udivdi3+0x404>
 c10557c:	e0644002 	rsb	r4, r4, r2
 c105580:	e1868809 	orr	r8, r6, r9, lsl #16
 c105584:	e1a02828 	lsr	r2, r8, #16
 c105588:	e1a0e823 	lsr	lr, r3, #16
 c10558c:	e1c80802 	bic	r0, r8, r2, lsl #16
 c105590:	e1c3680e 	bic	r6, r3, lr, lsl #16
 c105594:	e0030690 	mul	r3, r0, r6
 c105598:	e0060692 	mul	r6, r2, r6
 c10559c:	e000009e 	mul	r0, lr, r0
 c1055a0:	e00e0e92 	mul	lr, r2, lr
 c1055a4:	e0960000 	adds	r0, r6, r0
 c1055a8:	228ee801 	addcs	lr, lr, #65536	; 0x10000
 c1055ac:	e0933800 	adds	r3, r3, r0, lsl #16
 c1055b0:	e0aee820 	adc	lr, lr, r0, lsr #16
 c1055b4:	e154000e 	cmp	r4, lr
 c1055b8:	3a000006 	bcc	c1055d8 <__udivdi3+0x33c>
 c1055bc:	13a02000 	movne	r2, #0
 c1055c0:	03a02001 	moveq	r2, #1
 c1055c4:	e1530715 	cmp	r3, r5, lsl r7
 c1055c8:	93a01000 	movls	r1, #0
 c1055cc:	82021001 	andhi	r1, r2, #1
 c1055d0:	e3510000 	cmp	r1, #0
 c1055d4:	0affff6e 	beq	c105394 <__udivdi3+0xf8>
 c1055d8:	e2488001 	sub	r8, r8, #1
 c1055dc:	e3a01000 	mov	r1, #0
 c1055e0:	eaffff6b 	b	c105394 <__udivdi3+0xf8>
 c1055e4:	e2639020 	rsb	r9, r3, #32
 c1055e8:	e1a0a31a 	lsl	sl, sl, r3
 c1055ec:	e1a07934 	lsr	r7, r4, r9
 c1055f0:	e1a08935 	lsr	r8, r5, r9
 c1055f4:	e1a0982a 	lsr	r9, sl, #16
 c1055f8:	e1a0280a 	lsl	r2, sl, #16
 c1055fc:	e1a01009 	mov	r1, r9
 c105600:	e1a00007 	mov	r0, r7
 c105604:	e1888314 	orr	r8, r8, r4, lsl r3
 c105608:	e1a0b315 	lsl	fp, r5, r3
 c10560c:	e1a06822 	lsr	r6, r2, #16
 c105610:	ebfffd82 	bl	c104c20 <__aeabi_uidiv>
 c105614:	e1a01009 	mov	r1, r9
 c105618:	e1a05000 	mov	r5, r0
 c10561c:	e1a00007 	mov	r0, r7
 c105620:	ebfffdbb 	bl	c104d14 <__aeabi_uidivmod>
 c105624:	e0030596 	mul	r3, r6, r5
 c105628:	e1a04828 	lsr	r4, r8, #16
 c10562c:	e1844801 	orr	r4, r4, r1, lsl #16
 c105630:	e1530004 	cmp	r3, r4
 c105634:	9a000002 	bls	c105644 <__udivdi3+0x3a8>
 c105638:	e094400a 	adds	r4, r4, sl
 c10563c:	e2455001 	sub	r5, r5, #1
 c105640:	3a00001e 	bcc	c1056c0 <__udivdi3+0x424>
 c105644:	e0634004 	rsb	r4, r3, r4
 c105648:	e1a01009 	mov	r1, r9
 c10564c:	e1a00004 	mov	r0, r4
 c105650:	ebfffd72 	bl	c104c20 <__aeabi_uidiv>
 c105654:	e1a01009 	mov	r1, r9
 c105658:	e1a07000 	mov	r7, r0
 c10565c:	e1a00004 	mov	r0, r4
 c105660:	ebfffdab 	bl	c104d14 <__aeabi_uidivmod>
 c105664:	e0030796 	mul	r3, r6, r7
 c105668:	e1a00808 	lsl	r0, r8, #16
 c10566c:	e1a0c820 	lsr	ip, r0, #16
 c105670:	e18c4801 	orr	r4, ip, r1, lsl #16
 c105674:	e1530004 	cmp	r3, r4
 c105678:	9a000005 	bls	c105694 <__udivdi3+0x3f8>
 c10567c:	e094400a 	adds	r4, r4, sl
 c105680:	e2477001 	sub	r7, r7, #1
 c105684:	2a000002 	bcs	c105694 <__udivdi3+0x3f8>
 c105688:	e1530004 	cmp	r3, r4
 c10568c:	82477001 	subhi	r7, r7, #1
 c105690:	8084400a 	addhi	r4, r4, sl
 c105694:	e0634004 	rsb	r4, r3, r4
 c105698:	e1877805 	orr	r7, r7, r5, lsl #16
 c10569c:	eaffff5f 	b	c105420 <__udivdi3+0x184>
 c1056a0:	e1540002 	cmp	r4, r2
 c1056a4:	82466001 	subhi	r6, r6, #1
 c1056a8:	80822008 	addhi	r2, r2, r8
 c1056ac:	eaffffb2 	b	c10557c <__udivdi3+0x2e0>
 c1056b0:	e152000b 	cmp	r2, fp
 c1056b4:	82499001 	subhi	r9, r9, #1
 c1056b8:	808bb008 	addhi	fp, fp, r8
 c1056bc:	eaffff9a 	b	c10552c <__udivdi3+0x290>
 c1056c0:	e1530004 	cmp	r3, r4
 c1056c4:	82455001 	subhi	r5, r5, #1
 c1056c8:	8084400a 	addhi	r4, r4, sl
 c1056cc:	eaffffdc 	b	c105644 <__udivdi3+0x3a8>

0c1056d0 <__clzsi2>:
 c1056d0:	e3a0101c 	mov	r1, #28
 c1056d4:	e3500801 	cmp	r0, #65536	; 0x10000
 c1056d8:	21a00820 	lsrcs	r0, r0, #16
 c1056dc:	22411010 	subcs	r1, r1, #16
 c1056e0:	e3500c01 	cmp	r0, #256	; 0x100
 c1056e4:	21a00420 	lsrcs	r0, r0, #8
 c1056e8:	22411008 	subcs	r1, r1, #8
 c1056ec:	e3500010 	cmp	r0, #16
 c1056f0:	21a00220 	lsrcs	r0, r0, #4
 c1056f4:	22411004 	subcs	r1, r1, #4
 c1056f8:	e28f2008 	add	r2, pc, #8
 c1056fc:	e7d20000 	ldrb	r0, [r2, r0]
 c105700:	e0800001 	add	r0, r0, r1
 c105704:	e12fff1e 	bx	lr
 c105708:	02020304 	.word	0x02020304
 c10570c:	01010101 	.word	0x01010101
	...
