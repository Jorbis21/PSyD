
lab9-wav.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000425c  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000009b8  0c10425c  0c10425c  0000c25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0c104c14  0c104c14  0000cc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000000e  0c104c1c  0c104c1c  0000cc1c  2**2
                  ALLOC
  4 .debug_abbrev 00000838  00000000  00000000  0000cc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014ae  00000000  00000000  0000d454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000bd2  00000000  00000000  0000e902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_macinfo 00031414  00000000  00000000  0000f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001188  00000000  00000000  000408e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000761  00000000  00000000  00041a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000001d6  00000000  00000000  000421d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000160  00000000  00000000  000423a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000757  00000000  00000000  00042507  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000002a  00000000  00000000  00042c5e  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000032  00000000  00000000  00042c88  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000eb0  00000000  00000000  00042cbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:

#define REC_BUFFER      ((int16 *)0x0c700000)
#define REC_SIZE        (320000)  /* (5,0 s) * (2 canales) * (2 B/canal) * (16000 muestras/s) = 320000 B  */

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd008 	sub	sp, sp, #8
    uint8 vol;
    boolean flag;

    sys_init();
 c100010:	eb0004d6 	bl	c101370 <sys_init>
    uart0_init();
 c100014:	eb000aa8 	bl	c102abc <uart0_init>
    segs_init();
 c100018:	eb00049f 	bl	c10129c <segs_init>
    keypad_init();
 c10001c:	eb00041c 	bl	c101094 <keypad_init>
    timers_init();
 c100020:	eb000811 	bl	c10206c <timers_init>
    uda1341ts_init();
 c100024:	eb000c25 	bl	c1030c0 <uda1341ts_init>

    /************************************/

    uart0_puts( "\n\nReproducción de audio no comprimido (estéreo, 16b, 16KHz) por pooling:\n" );
 c100028:	e59f05d8 	ldr	r0, [pc, #1496]	; c100608 <main+0x608>
 c10002c:	eb000ae5 	bl	c102bc8 <uart0_puts>

    iis_init( IIS_POLLING );
 c100030:	e3a00002 	mov	r0, #2
 c100034:	eb00019d 	bl	c1006b0 <iis_init>

    /************************************/

    uart0_puts( "  - Reproducción a volumen medio: escuche... " );
 c100038:	e59f05cc 	ldr	r0, [pc, #1484]	; c10060c <main+0x60c>
 c10003c:	eb000ae1 	bl	c102bc8 <uart0_puts>
    uda1341ts_setvol( VOL_MED );
 c100040:	e3a00020 	mov	r0, #32
 c100044:	eb000ca0 	bl	c1032cc <uda1341ts_setvol>
    iis_play( NOKIATUNE, NOKIATUNE_SIZE, FALSE );
 c100048:	e59f05c0 	ldr	r0, [pc, #1472]	; c100610 <main+0x610>
 c10004c:	e59f15c0 	ldr	r1, [pc, #1472]	; c100614 <main+0x614>
 c100050:	e3a02000 	mov	r2, #0
 c100054:	eb000212 	bl	c1008a4 <iis_play>
    uart0_puts( "OK\n" );
 c100058:	e59f05b8 	ldr	r0, [pc, #1464]	; c100618 <main+0x618>
 c10005c:	eb000ad9 	bl	c102bc8 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reproducción a volumen variable: escuche... " );
 c100060:	e59f05b4 	ldr	r0, [pc, #1460]	; c10061c <main+0x61c>
 c100064:	eb000ad7 	bl	c102bc8 <uart0_puts>
    for( vol=0; vol<63; vol++ )
 c100068:	e3a03000 	mov	r3, #0
 c10006c:	e54b300d 	strb	r3, [fp, #-13]
 c100070:	ea000009 	b	c10009c <main+0x9c>
    {
        uda1341ts_setvol( vol );
 c100074:	e55b300d 	ldrb	r3, [fp, #-13]
 c100078:	e1a00003 	mov	r0, r3
 c10007c:	eb000c92 	bl	c1032cc <uda1341ts_setvol>
        iis_play( DTMF1, DTMF_SIZE, FALSE );
 c100080:	e59f0598 	ldr	r0, [pc, #1432]	; c100620 <main+0x620>
 c100084:	e3a01c19 	mov	r1, #6400	; 0x1900
 c100088:	e3a02000 	mov	r2, #0
 c10008c:	eb000204 	bl	c1008a4 <iis_play>
    uart0_puts( "OK\n" );

    /************************************/

    uart0_puts( "  - Reproducción a volumen variable: escuche... " );
    for( vol=0; vol<63; vol++ )
 c100090:	e55b300d 	ldrb	r3, [fp, #-13]
 c100094:	e2833001 	add	r3, r3, #1
 c100098:	e54b300d 	strb	r3, [fp, #-13]
 c10009c:	e55b300d 	ldrb	r3, [fp, #-13]
 c1000a0:	e353003e 	cmp	r3, #62	; 0x3e
 c1000a4:	9afffff2 	bls	c100074 <main+0x74>
    {
        uda1341ts_setvol( vol );
        iis_play( DTMF1, DTMF_SIZE, FALSE );
    }
    uart0_puts( "OK\n" );
 c1000a8:	e59f0568 	ldr	r0, [pc, #1384]	; c100618 <main+0x618>
 c1000ac:	eb000ac5 	bl	c102bc8 <uart0_puts>
    uda1341ts_setvol( VOL_MAX );
 c1000b0:	e3a0003f 	mov	r0, #63	; 0x3f
 c1000b4:	eb000c84 	bl	c1032cc <uda1341ts_setvol>

    /************************************/

    uart0_puts( "  - Grabacion: hable mientras los 7 segmentos estén encendidos... " );
 c1000b8:	e59f0564 	ldr	r0, [pc, #1380]	; c100624 <main+0x624>
 c1000bc:	eb000ac1 	bl	c102bc8 <uart0_puts>
    segs_putchar( 8 );
 c1000c0:	e3a00008 	mov	r0, #8
 c1000c4:	eb000489 	bl	c1012f0 <segs_putchar>
    iis_rec( REC_BUFFER, REC_SIZE );
 c1000c8:	e3a006c7 	mov	r0, #208666624	; 0xc700000
 c1000cc:	e59f1554 	ldr	r1, [pc, #1364]	; c100628 <main+0x628>
 c1000d0:	eb00026b 	bl	c100a84 <iis_rec>
    segs_off();
 c1000d4:	eb000477 	bl	c1012b8 <segs_off>
    uart0_puts( "OK\n" );
 c1000d8:	e59f0538 	ldr	r0, [pc, #1336]	; c100618 <main+0x618>
 c1000dc:	eb000ab9 	bl	c102bc8 <uart0_puts>
    uart0_puts( "  - Reproducción de grabación: escuche... " );
 c1000e0:	e59f0544 	ldr	r0, [pc, #1348]	; c10062c <main+0x62c>
 c1000e4:	eb000ab7 	bl	c102bc8 <uart0_puts>
    iis_play( REC_BUFFER, REC_SIZE, FALSE );
 c1000e8:	e3a006c7 	mov	r0, #208666624	; 0xc700000
 c1000ec:	e59f1534 	ldr	r1, [pc, #1332]	; c100628 <main+0x628>
 c1000f0:	e3a02000 	mov	r2, #0
 c1000f4:	eb0001ea 	bl	c1008a4 <iis_play>
    uart0_puts( "OK\n" );
 c1000f8:	e59f0518 	ldr	r0, [pc, #1304]	; c100618 <main+0x618>
 c1000fc:	eb000ab1 	bl	c102bc8 <uart0_puts>

    /************************************/

    uart0_puts( "\nReproducción de audio no comprimido (estéreo, 16b, 16KHz) por DMA:\n" );
 c100100:	e59f0528 	ldr	r0, [pc, #1320]	; c100630 <main+0x630>
 c100104:	eb000aaf 	bl	c102bc8 <uart0_puts>

    iis_init( IIS_DMA );
 c100108:	e3a00001 	mov	r0, #1
 c10010c:	eb000167 	bl	c1006b0 <iis_init>

    /************************************/

    uart0_puts( "  - Reproducción a volumen medio: escuche..." );
 c100110:	e59f051c 	ldr	r0, [pc, #1308]	; c100634 <main+0x634>
 c100114:	eb000aab 	bl	c102bc8 <uart0_puts>
    uda1341ts_setvol( VOL_MED );
 c100118:	e3a00020 	mov	r0, #32
 c10011c:	eb000c6a 	bl	c1032cc <uda1341ts_setvol>
    iis_play( NOKIATUNE, NOKIATUNE_SIZE, FALSE );
 c100120:	e59f04e8 	ldr	r0, [pc, #1256]	; c100610 <main+0x610>
 c100124:	e59f14e8 	ldr	r1, [pc, #1256]	; c100614 <main+0x614>
 c100128:	e3a02000 	mov	r2, #0
 c10012c:	eb0001dc 	bl	c1008a4 <iis_play>
    while( iis_status() )
 c100130:	ea000003 	b	c100144 <main+0x144>
    {
        sw_delay_ms( 500 );
 c100134:	e3a00f7d 	mov	r0, #500	; 0x1f4
 c100138:	eb00087a 	bl	c102328 <sw_delay_ms>
        uart0_putchar( '.' );
 c10013c:	e3a0002e 	mov	r0, #46	; 0x2e
 c100140:	eb000a76 	bl	c102b20 <uart0_putchar>
    /************************************/

    uart0_puts( "  - Reproducción a volumen medio: escuche..." );
    uda1341ts_setvol( VOL_MED );
    iis_play( NOKIATUNE, NOKIATUNE_SIZE, FALSE );
    while( iis_status() )
 c100144:	eb0002c5 	bl	c100c60 <iis_status>
 c100148:	e1a03000 	mov	r3, r0
 c10014c:	e3530000 	cmp	r3, #0
 c100150:	1afffff7 	bne	c100134 <main+0x134>
    {
        sw_delay_ms( 500 );
        uart0_putchar( '.' );
    }
    uart0_puts( " OK\n" );
 c100154:	e59f04dc 	ldr	r0, [pc, #1244]	; c100638 <main+0x638>
 c100158:	eb000a9a 	bl	c102bc8 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reproducción a volumen variable: escuche..." );
 c10015c:	e59f04d8 	ldr	r0, [pc, #1240]	; c10063c <main+0x63c>
 c100160:	eb000a98 	bl	c102bc8 <uart0_puts>
    iis_play( NOKIATUNE, NOKIATUNE_SIZE, FALSE );
 c100164:	e59f04a4 	ldr	r0, [pc, #1188]	; c100610 <main+0x610>
 c100168:	e59f14a4 	ldr	r1, [pc, #1188]	; c100614 <main+0x614>
 c10016c:	e3a02000 	mov	r2, #0
 c100170:	eb0001cb 	bl	c1008a4 <iis_play>
    vol = 0;
 c100174:	e3a03000 	mov	r3, #0
 c100178:	e54b300d 	strb	r3, [fp, #-13]
    while( iis_status() )
 c10017c:	ea00000d 	b	c1001b8 <main+0x1b8>
    {
        uda1341ts_setvol( vol );
 c100180:	e55b300d 	ldrb	r3, [fp, #-13]
 c100184:	e1a00003 	mov	r0, r3
 c100188:	eb000c4f 	bl	c1032cc <uda1341ts_setvol>
        vol = ( vol != 63 ? vol+1 : 0 );
 c10018c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100190:	e353003f 	cmp	r3, #63	; 0x3f
 c100194:	0a000003 	beq	c1001a8 <main+0x1a8>
 c100198:	e55b300d 	ldrb	r3, [fp, #-13]
 c10019c:	e2833001 	add	r3, r3, #1
 c1001a0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1001a4:	ea000000 	b	c1001ac <main+0x1ac>
 c1001a8:	e3a03000 	mov	r3, #0
 c1001ac:	e54b300d 	strb	r3, [fp, #-13]
        sw_delay_ms( 20 );
 c1001b0:	e3a00014 	mov	r0, #20
 c1001b4:	eb00085b 	bl	c102328 <sw_delay_ms>
    /************************************/

    uart0_puts( "  - Reproducción a volumen variable: escuche..." );
    iis_play( NOKIATUNE, NOKIATUNE_SIZE, FALSE );
    vol = 0;
    while( iis_status() )
 c1001b8:	eb0002a8 	bl	c100c60 <iis_status>
 c1001bc:	e1a03000 	mov	r3, r0
 c1001c0:	e3530000 	cmp	r3, #0
 c1001c4:	1affffed 	bne	c100180 <main+0x180>
    {
        uda1341ts_setvol( vol );
        vol = ( vol != 63 ? vol+1 : 0 );
        sw_delay_ms( 20 );
    }
    uart0_puts( " OK\n" );
 c1001c8:	e59f0468 	ldr	r0, [pc, #1128]	; c100638 <main+0x638>
 c1001cc:	eb000a7d 	bl	c102bc8 <uart0_puts>
    uda1341ts_setvol( VOL_MAX );
 c1001d0:	e3a0003f 	mov	r0, #63	; 0x3f
 c1001d4:	eb000c3c 	bl	c1032cc <uda1341ts_setvol>

    /************************************/

    uart0_puts( "  - Grabacion: hable mientras los 7 segmentos estén encendidos..." );
 c1001d8:	e59f0460 	ldr	r0, [pc, #1120]	; c100640 <main+0x640>
 c1001dc:	eb000a79 	bl	c102bc8 <uart0_puts>
    segs_putchar( 8 );
 c1001e0:	e3a00008 	mov	r0, #8
 c1001e4:	eb000441 	bl	c1012f0 <segs_putchar>
    iis_rec( REC_BUFFER, REC_SIZE );
 c1001e8:	e3a006c7 	mov	r0, #208666624	; 0xc700000
 c1001ec:	e59f1434 	ldr	r1, [pc, #1076]	; c100628 <main+0x628>
 c1001f0:	eb000223 	bl	c100a84 <iis_rec>
    while( iis_status() )
 c1001f4:	ea000003 	b	c100208 <main+0x208>
    {
        sw_delay_ms( 500 );
 c1001f8:	e3a00f7d 	mov	r0, #500	; 0x1f4
 c1001fc:	eb000849 	bl	c102328 <sw_delay_ms>
        uart0_putchar( '.' );
 c100200:	e3a0002e 	mov	r0, #46	; 0x2e
 c100204:	eb000a45 	bl	c102b20 <uart0_putchar>
    /************************************/

    uart0_puts( "  - Grabacion: hable mientras los 7 segmentos estén encendidos..." );
    segs_putchar( 8 );
    iis_rec( REC_BUFFER, REC_SIZE );
    while( iis_status() )
 c100208:	eb000294 	bl	c100c60 <iis_status>
 c10020c:	e1a03000 	mov	r3, r0
 c100210:	e3530000 	cmp	r3, #0
 c100214:	1afffff7 	bne	c1001f8 <main+0x1f8>
    {
        sw_delay_ms( 500 );
        uart0_putchar( '.' );
    }
    segs_off();
 c100218:	eb000426 	bl	c1012b8 <segs_off>
    uart0_puts( " OK\n" );
 c10021c:	e59f0414 	ldr	r0, [pc, #1044]	; c100638 <main+0x638>
 c100220:	eb000a68 	bl	c102bc8 <uart0_puts>
    uart0_puts( "  - Reproducción de grabación: escuche..." );
 c100224:	e59f0418 	ldr	r0, [pc, #1048]	; c100644 <main+0x644>
 c100228:	eb000a66 	bl	c102bc8 <uart0_puts>
    iis_play( REC_BUFFER, REC_SIZE, FALSE );
 c10022c:	e3a006c7 	mov	r0, #208666624	; 0xc700000
 c100230:	e59f13f0 	ldr	r1, [pc, #1008]	; c100628 <main+0x628>
 c100234:	e3a02000 	mov	r2, #0
 c100238:	eb000199 	bl	c1008a4 <iis_play>
    while( iis_status() )
 c10023c:	ea000003 	b	c100250 <main+0x250>
    {
        sw_delay_ms( 500 );
 c100240:	e3a00f7d 	mov	r0, #500	; 0x1f4
 c100244:	eb000837 	bl	c102328 <sw_delay_ms>
        uart0_putchar( '.' );
 c100248:	e3a0002e 	mov	r0, #46	; 0x2e
 c10024c:	eb000a33 	bl	c102b20 <uart0_putchar>
    }
    segs_off();
    uart0_puts( " OK\n" );
    uart0_puts( "  - Reproducción de grabación: escuche..." );
    iis_play( REC_BUFFER, REC_SIZE, FALSE );
    while( iis_status() )
 c100250:	eb000282 	bl	c100c60 <iis_status>
 c100254:	e1a03000 	mov	r3, r0
 c100258:	e3530000 	cmp	r3, #0
 c10025c:	1afffff7 	bne	c100240 <main+0x240>
    {
        sw_delay_ms( 500 );
        uart0_putchar( '.' );
    }
    uart0_puts( " OK\n" );
 c100260:	e59f03d0 	ldr	r0, [pc, #976]	; c100638 <main+0x638>
 c100264:	eb000a57 	bl	c102bc8 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reproducción continua: escuche...\n" );
 c100268:	e59f03d8 	ldr	r0, [pc, #984]	; c100648 <main+0x648>
 c10026c:	eb000a55 	bl	c102bc8 <uart0_puts>
    uart0_puts( "    (para finalizar presione cualquier tecla)\n    " );
 c100270:	e59f03d4 	ldr	r0, [pc, #980]	; c10064c <main+0x64c>
 c100274:	eb000a53 	bl	c102bc8 <uart0_puts>
    uda1341ts_setvol( VOL_MED );
 c100278:	e3a00020 	mov	r0, #32
 c10027c:	eb000c12 	bl	c1032cc <uda1341ts_setvol>
    iis_playWawFile( NOKIATUNE, TRUE );
 c100280:	e59f0388 	ldr	r0, [pc, #904]	; c100610 <main+0x610>
 c100284:	e3a01001 	mov	r1, #1
 c100288:	eb000281 	bl	c100c94 <iis_playWawFile>
    while( !keypad_pressed() )
 c10028c:	ea000003 	b	c1002a0 <main+0x2a0>
    {
        sw_delay_ms( 500 );
 c100290:	e3a00f7d 	mov	r0, #500	; 0x1f4
 c100294:	eb000823 	bl	c102328 <sw_delay_ms>
        uart0_putchar( '.' );
 c100298:	e3a0002e 	mov	r0, #46	; 0x2e
 c10029c:	eb000a1f 	bl	c102b20 <uart0_putchar>

    uart0_puts( "  - Reproducción continua: escuche...\n" );
    uart0_puts( "    (para finalizar presione cualquier tecla)\n    " );
    uda1341ts_setvol( VOL_MED );
    iis_playWawFile( NOKIATUNE, TRUE );
    while( !keypad_pressed() )
 c1002a0:	eb000346 	bl	c100fc0 <keypad_pressed>
 c1002a4:	e1a03000 	mov	r3, r0
 c1002a8:	e3530000 	cmp	r3, #0
 c1002ac:	0afffff7 	beq	c100290 <main+0x290>
    {
        sw_delay_ms( 500 );
        uart0_putchar( '.' );
    }
    keypad_getchar();
 c1002b0:	eb00037e 	bl	c1010b0 <keypad_getchar>
    iis_pause();
 c1002b4:	eb000251 	bl	c100c00 <iis_pause>
    uart0_puts( " OK\n" );
 c1002b8:	e59f0378 	ldr	r0, [pc, #888]	; c100638 <main+0x638>
 c1002bc:	eb000a41 	bl	c102bc8 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reproducción continua con pause: escuche...\n" );
 c1002c0:	e59f0388 	ldr	r0, [pc, #904]	; c100650 <main+0x650>
 c1002c4:	eb000a3f 	bl	c102bc8 <uart0_puts>
    uart0_puts( "    (para finalizar presione la tecla 0)\n" );
 c1002c8:	e59f0384 	ldr	r0, [pc, #900]	; c100654 <main+0x654>
 c1002cc:	eb000a3d 	bl	c102bc8 <uart0_puts>
    uart0_puts( "    (para parar/continuar presione cualquier otra tecla)\n" );
 c1002d0:	e59f0380 	ldr	r0, [pc, #896]	; c100658 <main+0x658>
 c1002d4:	eb000a3b 	bl	c102bc8 <uart0_puts>
    iis_playWawFile( NOKIATUNE, TRUE );
 c1002d8:	e59f0330 	ldr	r0, [pc, #816]	; c100610 <main+0x610>
 c1002dc:	e3a01001 	mov	r1, #1
 c1002e0:	eb00026b 	bl	c100c94 <iis_playWawFile>
    flag = FALSE;
 c1002e4:	e3a03000 	mov	r3, #0
 c1002e8:	e54b300e 	strb	r3, [fp, #-14]
    while( keypad_getchar() )
 c1002ec:	ea00000e 	b	c10032c <main+0x32c>
    {
        if( flag )
 c1002f0:	e55b300e 	ldrb	r3, [fp, #-14]
 c1002f4:	e3530000 	cmp	r3, #0
 c1002f8:	0a000003 	beq	c10030c <main+0x30c>
        {
            iis_continue();
 c1002fc:	eb00024b 	bl	c100c30 <iis_continue>
            uart0_puts( "    PLAY\n" );
 c100300:	e59f0354 	ldr	r0, [pc, #852]	; c10065c <main+0x65c>
 c100304:	eb000a2f 	bl	c102bc8 <uart0_puts>
 c100308:	ea000002 	b	c100318 <main+0x318>
        }
        else
        {
           iis_pause();
 c10030c:	eb00023b 	bl	c100c00 <iis_pause>
           uart0_puts( "    PAUSE\n" );
 c100310:	e59f0348 	ldr	r0, [pc, #840]	; c100660 <main+0x660>
 c100314:	eb000a2b 	bl	c102bc8 <uart0_puts>
        }
        flag = !flag;
 c100318:	e55b300e 	ldrb	r3, [fp, #-14]
 c10031c:	e3530000 	cmp	r3, #0
 c100320:	13a03000 	movne	r3, #0
 c100324:	03a03001 	moveq	r3, #1
 c100328:	e54b300e 	strb	r3, [fp, #-14]
    uart0_puts( "  - Reproducción continua con pause: escuche...\n" );
    uart0_puts( "    (para finalizar presione la tecla 0)\n" );
    uart0_puts( "    (para parar/continuar presione cualquier otra tecla)\n" );
    iis_playWawFile( NOKIATUNE, TRUE );
    flag = FALSE;
    while( keypad_getchar() )
 c10032c:	eb00035f 	bl	c1010b0 <keypad_getchar>
 c100330:	e1a03000 	mov	r3, r0
 c100334:	e3530000 	cmp	r3, #0
 c100338:	1affffec 	bne	c1002f0 <main+0x2f0>
           iis_pause();
           uart0_puts( "    PAUSE\n" );
        }
        flag = !flag;
    };
    iis_pause();
 c10033c:	eb00022f 	bl	c100c00 <iis_pause>
    uart0_puts( "    ... OK\n" );
 c100340:	e59f031c 	ldr	r0, [pc, #796]	; c100664 <main+0x664>
 c100344:	eb000a1f 	bl	c102bc8 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reproducción continua con mute: escuche...\n" );
 c100348:	e59f0318 	ldr	r0, [pc, #792]	; c100668 <main+0x668>
 c10034c:	eb000a1d 	bl	c102bc8 <uart0_puts>
    uart0_puts( "    (para finalizar presione la tecla 0)\n" );
 c100350:	e59f02fc 	ldr	r0, [pc, #764]	; c100654 <main+0x654>
 c100354:	eb000a1b 	bl	c102bc8 <uart0_puts>
    uart0_puts( "    (para parar/continuar presione cualquier otra tecla)\n" );
 c100358:	e59f02f8 	ldr	r0, [pc, #760]	; c100658 <main+0x658>
 c10035c:	eb000a19 	bl	c102bc8 <uart0_puts>
    iis_playWawFile( NOKIATUNE, TRUE );
 c100360:	e59f02a8 	ldr	r0, [pc, #680]	; c100610 <main+0x610>
 c100364:	e3a01001 	mov	r1, #1
 c100368:	eb000249 	bl	c100c94 <iis_playWawFile>
    flag = FALSE;
 c10036c:	e3a03000 	mov	r3, #0
 c100370:	e54b300e 	strb	r3, [fp, #-14]
    while( keypad_getchar() )
 c100374:	ea000010 	b	c1003bc <main+0x3bc>
    {
        if( flag )
 c100378:	e55b300e 	ldrb	r3, [fp, #-14]
 c10037c:	e3530000 	cmp	r3, #0
 c100380:	0a000004 	beq	c100398 <main+0x398>
        {
            uda1341ts_mute( MUTE_OFF );
 c100384:	e3a00000 	mov	r0, #0
 c100388:	eb000b6b 	bl	c10313c <uda1341ts_mute>
            uart0_puts( "    MUTE OFF\n" );
 c10038c:	e59f02d8 	ldr	r0, [pc, #728]	; c10066c <main+0x66c>
 c100390:	eb000a0c 	bl	c102bc8 <uart0_puts>
 c100394:	ea000003 	b	c1003a8 <main+0x3a8>
        }
        else
        {
            uda1341ts_mute( MUTE_ON );
 c100398:	e3a00001 	mov	r0, #1
 c10039c:	eb000b66 	bl	c10313c <uda1341ts_mute>
            uart0_puts( "    MUTE ON\n" );
 c1003a0:	e59f02c8 	ldr	r0, [pc, #712]	; c100670 <main+0x670>
 c1003a4:	eb000a07 	bl	c102bc8 <uart0_puts>
        }
        flag = !flag;
 c1003a8:	e55b300e 	ldrb	r3, [fp, #-14]
 c1003ac:	e3530000 	cmp	r3, #0
 c1003b0:	13a03000 	movne	r3, #0
 c1003b4:	03a03001 	moveq	r3, #1
 c1003b8:	e54b300e 	strb	r3, [fp, #-14]
    uart0_puts( "  - Reproducción continua con mute: escuche...\n" );
    uart0_puts( "    (para finalizar presione la tecla 0)\n" );
    uart0_puts( "    (para parar/continuar presione cualquier otra tecla)\n" );
    iis_playWawFile( NOKIATUNE, TRUE );
    flag = FALSE;
    while( keypad_getchar() )
 c1003bc:	eb00033b 	bl	c1010b0 <keypad_getchar>
 c1003c0:	e1a03000 	mov	r3, r0
 c1003c4:	e3530000 	cmp	r3, #0
 c1003c8:	1affffea 	bne	c100378 <main+0x378>
            uda1341ts_mute( MUTE_ON );
            uart0_puts( "    MUTE ON\n" );
        }
        flag = !flag;
    };
    iis_pause();
 c1003cc:	eb00020b 	bl	c100c00 <iis_pause>
    uart0_puts( "    ... OK\n" );
 c1003d0:	e59f028c 	ldr	r0, [pc, #652]	; c100664 <main+0x664>
 c1003d4:	eb0009fb 	bl	c102bc8 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reproduccion libre de sonido: pulse el teclado y escuche...\n" );
 c1003d8:	e59f0294 	ldr	r0, [pc, #660]	; c100674 <main+0x674>
 c1003dc:	eb0009f9 	bl	c102bc8 <uart0_puts>
    while( 1 )
        switch( keypad_getchar() )
 c1003e0:	eb000332 	bl	c1010b0 <keypad_getchar>
 c1003e4:	e1a03000 	mov	r3, r0
 c1003e8:	e353000f 	cmp	r3, #15
 c1003ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c1003f0:	ea000082 	b	c100600 <main+0x600>
 c1003f4:	0c100434 	.word	0x0c100434
 c1003f8:	0c100444 	.word	0x0c100444
 c1003fc:	0c100454 	.word	0x0c100454
 c100400:	0c100464 	.word	0x0c100464
 c100404:	0c100474 	.word	0x0c100474
 c100408:	0c100484 	.word	0x0c100484
 c10040c:	0c100494 	.word	0x0c100494
 c100410:	0c1004a4 	.word	0x0c1004a4
 c100414:	0c1004d8 	.word	0x0c1004d8
 c100418:	0c1004e8 	.word	0x0c1004e8
 c10041c:	0c1004f8 	.word	0x0c1004f8
 c100420:	0c100508 	.word	0x0c100508
 c100424:	0c10053c 	.word	0x0c10053c
 c100428:	0c10054c 	.word	0x0c10054c
 c10042c:	0c10055c 	.word	0x0c10055c
 c100430:	0c10056c 	.word	0x0c10056c
        {
            case KEYPAD_KEY0:
                iis_playWawFile( DTMF1, FALSE );
 c100434:	e59f01e4 	ldr	r0, [pc, #484]	; c100620 <main+0x620>
 c100438:	e3a01000 	mov	r1, #0
 c10043c:	eb000214 	bl	c100c94 <iis_playWawFile>
                break;
 c100440:	ea00006f 	b	c100604 <main+0x604>
            case KEYPAD_KEY1:
                iis_playWawFile( DTMF2, FALSE );
 c100444:	e59f022c 	ldr	r0, [pc, #556]	; c100678 <main+0x678>
 c100448:	e3a01000 	mov	r1, #0
 c10044c:	eb000210 	bl	c100c94 <iis_playWawFile>
                break;
 c100450:	ea00006b 	b	c100604 <main+0x604>
            case KEYPAD_KEY2:
                iis_playWawFile( DTMF3, FALSE );
 c100454:	e59f0220 	ldr	r0, [pc, #544]	; c10067c <main+0x67c>
 c100458:	e3a01000 	mov	r1, #0
 c10045c:	eb00020c 	bl	c100c94 <iis_playWawFile>
                break;
 c100460:	ea000067 	b	c100604 <main+0x604>
            case KEYPAD_KEY3:
                iis_playWawFile( INVITACION, FALSE );
 c100464:	e59f0214 	ldr	r0, [pc, #532]	; c100680 <main+0x680>
 c100468:	e3a01000 	mov	r1, #0
 c10046c:	eb000208 	bl	c100c94 <iis_playWawFile>
                break;
 c100470:	ea000063 	b	c100604 <main+0x604>
            case KEYPAD_KEY4:
                iis_playWawFile( DTMF4, FALSE );
 c100474:	e59f0208 	ldr	r0, [pc, #520]	; c100684 <main+0x684>
 c100478:	e3a01000 	mov	r1, #0
 c10047c:	eb000204 	bl	c100c94 <iis_playWawFile>
                break;        
 c100480:	ea00005f 	b	c100604 <main+0x604>
            case KEYPAD_KEY5:
                iis_playWawFile( DTMF5, FALSE );
 c100484:	e59f01fc 	ldr	r0, [pc, #508]	; c100688 <main+0x688>
 c100488:	e3a01000 	mov	r1, #0
 c10048c:	eb000200 	bl	c100c94 <iis_playWawFile>
                break;
 c100490:	ea00005b 	b	c100604 <main+0x604>
            case KEYPAD_KEY6:
                iis_playWawFile( DTMF6, FALSE );
 c100494:	e59f01f0 	ldr	r0, [pc, #496]	; c10068c <main+0x68c>
 c100498:	e3a01000 	mov	r1, #0
 c10049c:	eb0001fc 	bl	c100c94 <iis_playWawFile>
                break;
 c1004a0:	ea000057 	b	c100604 <main+0x604>
            case KEYPAD_KEY7:
                iis_playWawFile( LLAMADA, FALSE );
 c1004a4:	e59f01e4 	ldr	r0, [pc, #484]	; c100690 <main+0x690>
 c1004a8:	e3a01000 	mov	r1, #0
 c1004ac:	eb0001f8 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( LLAMADA, FALSE );
 c1004b0:	e59f01d8 	ldr	r0, [pc, #472]	; c100690 <main+0x690>
 c1004b4:	e3a01000 	mov	r1, #0
 c1004b8:	eb0001f5 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( LLAMADA, FALSE );
 c1004bc:	e59f01cc 	ldr	r0, [pc, #460]	; c100690 <main+0x690>
 c1004c0:	e3a01000 	mov	r1, #0
 c1004c4:	eb0001f2 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( LLAMADA, FALSE );
 c1004c8:	e59f01c0 	ldr	r0, [pc, #448]	; c100690 <main+0x690>
 c1004cc:	e3a01000 	mov	r1, #0
 c1004d0:	eb0001ef 	bl	c100c94 <iis_playWawFile>
                break;
 c1004d4:	ea00004a 	b	c100604 <main+0x604>
            case KEYPAD_KEY8:
                iis_playWawFile( DTMF7, FALSE );
 c1004d8:	e59f01b4 	ldr	r0, [pc, #436]	; c100694 <main+0x694>
 c1004dc:	e3a01000 	mov	r1, #0
 c1004e0:	eb0001eb 	bl	c100c94 <iis_playWawFile>
                break;
 c1004e4:	ea000046 	b	c100604 <main+0x604>
            case KEYPAD_KEY9:
                iis_playWawFile( DTMF8, FALSE );
 c1004e8:	e59f01a8 	ldr	r0, [pc, #424]	; c100698 <main+0x698>
 c1004ec:	e3a01000 	mov	r1, #0
 c1004f0:	eb0001e7 	bl	c100c94 <iis_playWawFile>
                break;    
 c1004f4:	ea000042 	b	c100604 <main+0x604>
            case KEYPAD_KEYA:
                iis_playWawFile( DTMF9, FALSE );
 c1004f8:	e59f019c 	ldr	r0, [pc, #412]	; c10069c <main+0x69c>
 c1004fc:	e3a01000 	mov	r1, #0
 c100500:	eb0001e3 	bl	c100c94 <iis_playWawFile>
                break;
 c100504:	ea00003e 	b	c100604 <main+0x604>
            case KEYPAD_KEYB:
                iis_playWawFile( CONGESTION, FALSE );
 c100508:	e59f0190 	ldr	r0, [pc, #400]	; c1006a0 <main+0x6a0>
 c10050c:	e3a01000 	mov	r1, #0
 c100510:	eb0001df 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( CONGESTION, FALSE );
 c100514:	e59f0184 	ldr	r0, [pc, #388]	; c1006a0 <main+0x6a0>
 c100518:	e3a01000 	mov	r1, #0
 c10051c:	eb0001dc 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( CONGESTION, FALSE );
 c100520:	e59f0178 	ldr	r0, [pc, #376]	; c1006a0 <main+0x6a0>
 c100524:	e3a01000 	mov	r1, #0
 c100528:	eb0001d9 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( CONGESTION, FALSE );
 c10052c:	e59f016c 	ldr	r0, [pc, #364]	; c1006a0 <main+0x6a0>
 c100530:	e3a01000 	mov	r1, #0
 c100534:	eb0001d6 	bl	c100c94 <iis_playWawFile>
                break;
 c100538:	ea000031 	b	c100604 <main+0x604>
            case KEYPAD_KEYC:
                iis_playWawFile( DTMFSTAR, FALSE );
 c10053c:	e59f0160 	ldr	r0, [pc, #352]	; c1006a4 <main+0x6a4>
 c100540:	e3a01000 	mov	r1, #0
 c100544:	eb0001d2 	bl	c100c94 <iis_playWawFile>
                break;
 c100548:	ea00002d 	b	c100604 <main+0x604>
            case KEYPAD_KEYD:
                iis_playWawFile( DTMF0, FALSE );
 c10054c:	e3a00531 	mov	r0, #205520896	; 0xc400000
 c100550:	e3a01000 	mov	r1, #0
 c100554:	eb0001ce 	bl	c100c94 <iis_playWawFile>
                break;
 c100558:	ea000029 	b	c100604 <main+0x604>
            case KEYPAD_KEYE:
                iis_playWawFile( DTMFSHARP, FALSE );
 c10055c:	e59f0144 	ldr	r0, [pc, #324]	; c1006a8 <main+0x6a8>
 c100560:	e3a01000 	mov	r1, #0
 c100564:	eb0001ca 	bl	c100c94 <iis_playWawFile>
                break;
 c100568:	ea000025 	b	c100604 <main+0x604>
            case KEYPAD_KEYF:
                iis_playWawFile( OCUPADO, FALSE );
 c10056c:	e59f0138 	ldr	r0, [pc, #312]	; c1006ac <main+0x6ac>
 c100570:	e3a01000 	mov	r1, #0
 c100574:	eb0001c6 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c100578:	e59f012c 	ldr	r0, [pc, #300]	; c1006ac <main+0x6ac>
 c10057c:	e3a01000 	mov	r1, #0
 c100580:	eb0001c3 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c100584:	e59f0120 	ldr	r0, [pc, #288]	; c1006ac <main+0x6ac>
 c100588:	e3a01000 	mov	r1, #0
 c10058c:	eb0001c0 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c100590:	e59f0114 	ldr	r0, [pc, #276]	; c1006ac <main+0x6ac>
 c100594:	e3a01000 	mov	r1, #0
 c100598:	eb0001bd 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c10059c:	e59f0108 	ldr	r0, [pc, #264]	; c1006ac <main+0x6ac>
 c1005a0:	e3a01000 	mov	r1, #0
 c1005a4:	eb0001ba 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c1005a8:	e59f00fc 	ldr	r0, [pc, #252]	; c1006ac <main+0x6ac>
 c1005ac:	e3a01000 	mov	r1, #0
 c1005b0:	eb0001b7 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c1005b4:	e59f00f0 	ldr	r0, [pc, #240]	; c1006ac <main+0x6ac>
 c1005b8:	e3a01000 	mov	r1, #0
 c1005bc:	eb0001b4 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c1005c0:	e59f00e4 	ldr	r0, [pc, #228]	; c1006ac <main+0x6ac>
 c1005c4:	e3a01000 	mov	r1, #0
 c1005c8:	eb0001b1 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c1005cc:	e59f00d8 	ldr	r0, [pc, #216]	; c1006ac <main+0x6ac>
 c1005d0:	e3a01000 	mov	r1, #0
 c1005d4:	eb0001ae 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c1005d8:	e59f00cc 	ldr	r0, [pc, #204]	; c1006ac <main+0x6ac>
 c1005dc:	e3a01000 	mov	r1, #0
 c1005e0:	eb0001ab 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c1005e4:	e59f00c0 	ldr	r0, [pc, #192]	; c1006ac <main+0x6ac>
 c1005e8:	e3a01000 	mov	r1, #0
 c1005ec:	eb0001a8 	bl	c100c94 <iis_playWawFile>
                iis_playWawFile( OCUPADO, FALSE );
 c1005f0:	e59f00b4 	ldr	r0, [pc, #180]	; c1006ac <main+0x6ac>
 c1005f4:	e3a01000 	mov	r1, #0
 c1005f8:	eb0001a5 	bl	c100c94 <iis_playWawFile>
                break;            
 c1005fc:	ea000000 	b	c100604 <main+0x604>
            default:
                break;
 c100600:	e1a00000 	nop			; (mov r0, r0)
        };       
 c100604:	eaffff75 	b	c1003e0 <main+0x3e0>
 c100608:	0c10425c 	.word	0x0c10425c
 c10060c:	0c1042a8 	.word	0x0c1042a8
 c100610:	0c41a000 	.word	0x0c41a000
 c100614:	00055f00 	.word	0x00055f00
 c100618:	0c1042d8 	.word	0x0c1042d8
 c10061c:	0c1042dc 	.word	0x0c1042dc
 c100620:	0c402000 	.word	0x0c402000
 c100624:	0c104310 	.word	0x0c104310
 c100628:	0004e200 	.word	0x0004e200
 c10062c:	0c104354 	.word	0x0c104354
 c100630:	0c104380 	.word	0x0c104380
 c100634:	0c1043c8 	.word	0x0c1043c8
 c100638:	0c1043f8 	.word	0x0c1043f8
 c10063c:	0c104400 	.word	0x0c104400
 c100640:	0c104430 	.word	0x0c104430
 c100644:	0c104474 	.word	0x0c104474
 c100648:	0c1044a0 	.word	0x0c1044a0
 c10064c:	0c1044c8 	.word	0x0c1044c8
 c100650:	0c1044fc 	.word	0x0c1044fc
 c100654:	0c104530 	.word	0x0c104530
 c100658:	0c10455c 	.word	0x0c10455c
 c10065c:	0c104598 	.word	0x0c104598
 c100660:	0c1045a4 	.word	0x0c1045a4
 c100664:	0c1045b0 	.word	0x0c1045b0
 c100668:	0c1045bc 	.word	0x0c1045bc
 c10066c:	0c1045ec 	.word	0x0c1045ec
 c100670:	0c1045fc 	.word	0x0c1045fc
 c100674:	0c10460c 	.word	0x0c10460c
 c100678:	0c404000 	.word	0x0c404000
 c10067c:	0c406000 	.word	0x0c406000
 c100680:	0c47a000 	.word	0x0c47a000
 c100684:	0c408000 	.word	0x0c408000
 c100688:	0c40a000 	.word	0x0c40a000
 c10068c:	0c40c000 	.word	0x0c40c000
 c100690:	0c4fa000 	.word	0x0c4fa000
 c100694:	0c40e000 	.word	0x0c40e000
 c100698:	0c410000 	.word	0x0c410000
 c10069c:	0c412000 	.word	0x0c412000
 c1006a0:	0c54a000 	.word	0x0c54a000
 c1006a4:	0c414000 	.word	0x0c414000
 c1006a8:	0c418000 	.word	0x0c418000
 c1006ac:	0c56a000 	.word	0x0c56a000

0c1006b0 <iis_init>:
static void isr_bdma0( void ) __attribute__ ((interrupt ("IRQ")));

static uint8 iomode;

void iis_init( uint8 mode )
{
 c1006b0:	e1a0c00d 	mov	ip, sp
 c1006b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1006b8:	e24cb004 	sub	fp, ip, #4
 c1006bc:	e24dd008 	sub	sp, sp, #8
 c1006c0:	e1a03000 	mov	r3, r0
 c1006c4:	e54b300d 	strb	r3, [fp, #-13]
    iomode = mode;
 c1006c8:	e59f309c 	ldr	r3, [pc, #156]	; c10076c <iis_init+0xbc>
 c1006cc:	e55b200d 	ldrb	r2, [fp, #-13]
 c1006d0:	e5c32000 	strb	r2, [r3]

    if( iomode == IIS_POLLING )
 c1006d4:	e59f3090 	ldr	r3, [pc, #144]	; c10076c <iis_init+0xbc>
 c1006d8:	e5d33000 	ldrb	r3, [r3]
 c1006dc:	e3530002 	cmp	r3, #2
 c1006e0:	1a00000b 	bne	c100714 <iis_init+0x64>
    {
        IISPSR  = 0x77;
 c1006e4:	e59f3084 	ldr	r3, [pc, #132]	; c100770 <iis_init+0xc0>
 c1006e8:	e3a02077 	mov	r2, #119	; 0x77
 c1006ec:	e5832000 	str	r2, [r3]
        IISMOD  = 0xc9;
 c1006f0:	e59f307c 	ldr	r3, [pc, #124]	; c100774 <iis_init+0xc4>
 c1006f4:	e3a020c9 	mov	r2, #201	; 0xc9
 c1006f8:	e5832000 	str	r2, [r3]
        IISFCON = 0x300;
 c1006fc:	e59f3074 	ldr	r3, [pc, #116]	; c100778 <iis_init+0xc8>
 c100700:	e3a02c03 	mov	r2, #768	; 0x300
 c100704:	e5832000 	str	r2, [r3]
        IISCON  = 0x3;
 c100708:	e59f306c 	ldr	r3, [pc, #108]	; c10077c <iis_init+0xcc>
 c10070c:	e3a02003 	mov	r2, #3
 c100710:	e5832000 	str	r2, [r3]
    }
    if( iomode == IIS_DMA )
 c100714:	e59f3050 	ldr	r3, [pc, #80]	; c10076c <iis_init+0xbc>
 c100718:	e5d33000 	ldrb	r3, [r3]
 c10071c:	e3530001 	cmp	r3, #1
 c100720:	1a00000e 	bne	c100760 <iis_init+0xb0>
    {
        IISPSR  = 0x77;
 c100724:	e59f3044 	ldr	r3, [pc, #68]	; c100770 <iis_init+0xc0>
 c100728:	e3a02077 	mov	r2, #119	; 0x77
 c10072c:	e5832000 	str	r2, [r3]
        IISMOD  = 0x9;
 c100730:	e59f303c 	ldr	r3, [pc, #60]	; c100774 <iis_init+0xc4>
 c100734:	e3a02009 	mov	r2, #9
 c100738:	e5832000 	str	r2, [r3]
        IISFCON = 0xf00;
 c10073c:	e59f3034 	ldr	r3, [pc, #52]	; c100778 <iis_init+0xc8>
 c100740:	e3a02c0f 	mov	r2, #3840	; 0xf00
 c100744:	e5832000 	str	r2, [r3]
        IISCON  = 0x32;
 c100748:	e59f302c 	ldr	r3, [pc, #44]	; c10077c <iis_init+0xcc>
 c10074c:	e3a02032 	mov	r2, #50	; 0x32
 c100750:	e5832000 	str	r2, [r3]
        bdma0_init();
 c100754:	eb000afe 	bl	c103354 <bdma0_init>
        bdma0_open( isr_bdma0 );
 c100758:	e59f0020 	ldr	r0, [pc, #32]	; c100780 <iis_init+0xd0>
 c10075c:	eb000b11 	bl	c1033a8 <bdma0_open>
    }
}
 c100760:	e24bd00c 	sub	sp, fp, #12
 c100764:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100768:	e12fff1e 	bx	lr
 c10076c:	0c104c1c 	.word	0x0c104c1c
 c100770:	01d18008 	.word	0x01d18008
 c100774:	01d18004 	.word	0x01d18004
 c100778:	01d1800c 	.word	0x01d1800c
 c10077c:	01d18000 	.word	0x01d18000
 c100780:	0c100784 	.word	0x0c100784

0c100784 <isr_bdma0>:

static void isr_bdma0( void )
{
 c100784:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100788:	e1a0c00d 	mov	ip, sp
 c10078c:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c100790:	e24cb004 	sub	fp, ip, #4
    IISCON &= ~1;
 c100794:	e59f3028 	ldr	r3, [pc, #40]	; c1007c4 <isr_bdma0+0x40>
 c100798:	e59f2024 	ldr	r2, [pc, #36]	; c1007c4 <isr_bdma0+0x40>
 c10079c:	e5922000 	ldr	r2, [r2]
 c1007a0:	e3c22001 	bic	r2, r2, #1
 c1007a4:	e5832000 	str	r2, [r3]
    I_ISPC = BIT_BDMA0; 
 c1007a8:	e59f3018 	ldr	r3, [pc, #24]	; c1007c8 <isr_bdma0+0x44>
 c1007ac:	e3a02802 	mov	r2, #131072	; 0x20000
 c1007b0:	e5832000 	str	r2, [r3]
}
 c1007b4:	e24bd014 	sub	sp, fp, #20
 c1007b8:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c1007bc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1007c0:	e25ef004 	subs	pc, lr, #4
 c1007c4:	01d18000 	.word	0x01d18000
 c1007c8:	01e00024 	.word	0x01e00024

0c1007cc <iis_putSample>:

inline void iis_putSample( int16 ch0, int16 ch1 )
{
 c1007cc:	e1a0c00d 	mov	ip, sp
 c1007d0:	e92dd800 	push	{fp, ip, lr, pc}
 c1007d4:	e24cb004 	sub	fp, ip, #4
 c1007d8:	e24dd008 	sub	sp, sp, #8
 c1007dc:	e1a02000 	mov	r2, r0
 c1007e0:	e1a03001 	mov	r3, r1
 c1007e4:	e14b20be 	strh	r2, [fp, #-14]
 c1007e8:	e14b31b0 	strh	r3, [fp, #-16]
    while( (IISFCON & 0xf0) > 6 );
 c1007ec:	e1a00000 	nop			; (mov r0, r0)
 c1007f0:	e59f3030 	ldr	r3, [pc, #48]	; c100828 <iis_putSample+0x5c>
 c1007f4:	e5933000 	ldr	r3, [r3]
 c1007f8:	e20330f0 	and	r3, r3, #240	; 0xf0
 c1007fc:	e3530006 	cmp	r3, #6
 c100800:	8afffffa 	bhi	c1007f0 <iis_putSample+0x24>
    IISFIF = ch0;
 c100804:	e59f3020 	ldr	r3, [pc, #32]	; c10082c <iis_putSample+0x60>
 c100808:	e15b20fe 	ldrsh	r2, [fp, #-14]
 c10080c:	e5832000 	str	r2, [r3]
    IISFIF = ch1;
 c100810:	e59f3014 	ldr	r3, [pc, #20]	; c10082c <iis_putSample+0x60>
 c100814:	e15b21f0 	ldrsh	r2, [fp, #-16]
 c100818:	e5832000 	str	r2, [r3]
}
 c10081c:	e24bd00c 	sub	sp, fp, #12
 c100820:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100824:	e12fff1e 	bx	lr
 c100828:	01d1800c 	.word	0x01d1800c
 c10082c:	01d18010 	.word	0x01d18010

0c100830 <iis_getSample>:

inline void iis_getSample( int16 *ch0, int16 *ch1 )
{
 c100830:	e1a0c00d 	mov	ip, sp
 c100834:	e92dd800 	push	{fp, ip, lr, pc}
 c100838:	e24cb004 	sub	fp, ip, #4
 c10083c:	e24dd008 	sub	sp, sp, #8
 c100840:	e50b0010 	str	r0, [fp, #-16]
 c100844:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    while((IISFCON & 0xf) < 2);
 c100848:	e1a00000 	nop			; (mov r0, r0)
 c10084c:	e59f3048 	ldr	r3, [pc, #72]	; c10089c <iis_getSample+0x6c>
 c100850:	e5933000 	ldr	r3, [r3]
 c100854:	e203300f 	and	r3, r3, #15
 c100858:	e3530001 	cmp	r3, #1
 c10085c:	9afffffa 	bls	c10084c <iis_getSample+0x1c>
    *ch0 = IISFIF;
 c100860:	e59f3038 	ldr	r3, [pc, #56]	; c1008a0 <iis_getSample+0x70>
 c100864:	e5933000 	ldr	r3, [r3]
 c100868:	e1a03803 	lsl	r3, r3, #16
 c10086c:	e1a02823 	lsr	r2, r3, #16
 c100870:	e51b3010 	ldr	r3, [fp, #-16]
 c100874:	e1c320b0 	strh	r2, [r3]
    *ch1 = IISFIF;
 c100878:	e59f3020 	ldr	r3, [pc, #32]	; c1008a0 <iis_getSample+0x70>
 c10087c:	e5933000 	ldr	r3, [r3]
 c100880:	e1a03803 	lsl	r3, r3, #16
 c100884:	e1a02823 	lsr	r2, r3, #16
 c100888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10088c:	e1c320b0 	strh	r2, [r3]
}
 c100890:	e24bd00c 	sub	sp, fp, #12
 c100894:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100898:	e12fff1e 	bx	lr
 c10089c:	01d1800c 	.word	0x01d1800c
 c1008a0:	01d18010 	.word	0x01d18010

0c1008a4 <iis_play>:

void iis_play( int16 *buffer, uint32 length, uint8 loop )
{
 c1008a4:	e1a0c00d 	mov	ip, sp
 c1008a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1008ac:	e24cb004 	sub	fp, ip, #4
 c1008b0:	e24dd018 	sub	sp, sp, #24
 c1008b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1008b8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1008bc:	e1a03002 	mov	r3, r2
 c1008c0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING )
 c1008c4:	e59f319c 	ldr	r3, [pc, #412]	; c100a68 <iis_play+0x1c4>
 c1008c8:	e5d33000 	ldrb	r3, [r3]
 c1008cc:	e3530002 	cmp	r3, #2
 c1008d0:	1a00001e 	bne	c100950 <iis_play+0xac>
        for( i=0; i<length/2; )
 c1008d4:	e3a03000 	mov	r3, #0
 c1008d8:	e50b3010 	str	r3, [fp, #-16]
 c1008dc:	ea000016 	b	c10093c <iis_play+0x98>
        {
            ch1 = buffer[i++];
 c1008e0:	e51b3010 	ldr	r3, [fp, #-16]
 c1008e4:	e1a03083 	lsl	r3, r3, #1
 c1008e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1008ec:	e0823003 	add	r3, r2, r3
 c1008f0:	e1d330b0 	ldrh	r3, [r3]
 c1008f4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c1008f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1008fc:	e2833001 	add	r3, r3, #1
 c100900:	e50b3010 	str	r3, [fp, #-16]
            ch2 = buffer[i++];
 c100904:	e51b3010 	ldr	r3, [fp, #-16]
 c100908:	e1a03083 	lsl	r3, r3, #1
 c10090c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100910:	e0823003 	add	r3, r2, r3
 c100914:	e1d330b0 	ldrh	r3, [r3]
 c100918:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
 c10091c:	e51b3010 	ldr	r3, [fp, #-16]
 c100920:	e2833001 	add	r3, r3, #1
 c100924:	e50b3010 	str	r3, [fp, #-16]
            iis_putSample( ch1, ch2 );
 c100928:	e15b21f2 	ldrsh	r2, [fp, #-18]	; 0xffffffee
 c10092c:	e15b31f4 	ldrsh	r3, [fp, #-20]	; 0xffffffec
 c100930:	e1a00002 	mov	r0, r2
 c100934:	e1a01003 	mov	r1, r3
 c100938:	ebffffa3 	bl	c1007cc <iis_putSample>
{
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING )
        for( i=0; i<length/2; )
 c10093c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100940:	e1a020a3 	lsr	r2, r3, #1
 c100944:	e51b3010 	ldr	r3, [fp, #-16]
 c100948:	e1520003 	cmp	r2, r3
 c10094c:	8affffe3 	bhi	c1008e0 <iis_play+0x3c>
        {
            ch1 = buffer[i++];
            ch2 = buffer[i++];
            iis_putSample( ch1, ch2 );
        }
    if( iomode == IIS_DMA ){
 c100950:	e59f3110 	ldr	r3, [pc, #272]	; c100a68 <iis_play+0x1c4>
 c100954:	e5d33000 	ldrb	r3, [r3]
 c100958:	e3530001 	cmp	r3, #1
 c10095c:	1a00003e 	bne	c100a5c <iis_play+0x1b8>
    	while(IISCON & 1);
 c100960:	e1a00000 	nop			; (mov r0, r0)
 c100964:	e59f3100 	ldr	r3, [pc, #256]	; c100a6c <iis_play+0x1c8>
 c100968:	e5933000 	ldr	r3, [r3]
 c10096c:	e2033001 	and	r3, r3, #1
 c100970:	e20330ff 	and	r3, r3, #255	; 0xff
 c100974:	e3530000 	cmp	r3, #0
 c100978:	1afffff9 	bne	c100964 <iis_play+0xc0>
    	BDISRC0 = (1<<30) | (1<<28) | (uint32) buffer;
 c10097c:	e59f30ec 	ldr	r3, [pc, #236]	; c100a70 <iis_play+0x1cc>
 c100980:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100984:	e3822205 	orr	r2, r2, #1342177280	; 0x50000000
 c100988:	e5832000 	str	r2, [r3]
    	BDIDES0 = (1<<30) | (3<<28) | (uint32) &IISFIF;
 c10098c:	e59f30e0 	ldr	r3, [pc, #224]	; c100a74 <iis_play+0x1d0>
 c100990:	e59f20e0 	ldr	r2, [pc, #224]	; c100a78 <iis_play+0x1d4>
 c100994:	e5832000 	str	r2, [r3]
    	BDCON0 = 0;
 c100998:	e3a0377e 	mov	r3, #33030144	; 0x1f80000
 c10099c:	e3a02000 	mov	r2, #0
 c1009a0:	e5832000 	str	r2, [r3]
    	BDICNT0 = (1<<30) | (1<<26) | (0xfffff & length);
 c1009a4:	e59f20d0 	ldr	r2, [pc, #208]	; c100a7c <iis_play+0x1d8>
 c1009a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1009ac:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c1009b0:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
 c1009b4:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 c1009b8:	e5823000 	str	r3, [r2]
    	BDICNT0 |= (1<<20);
 c1009bc:	e59f30b8 	ldr	r3, [pc, #184]	; c100a7c <iis_play+0x1d8>
 c1009c0:	e59f20b4 	ldr	r2, [pc, #180]	; c100a7c <iis_play+0x1d8>
 c1009c4:	e5922000 	ldr	r2, [r2]
 c1009c8:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c1009cc:	e5832000 	str	r2, [r3]
    	if(loop){
 c1009d0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c1009d4:	e3530000 	cmp	r3, #0
 c1009d8:	0a00000a 	beq	c100a08 <iis_play+0x164>
    		BDICNT0 |= (1<<21);
 c1009dc:	e59f3098 	ldr	r3, [pc, #152]	; c100a7c <iis_play+0x1d8>
 c1009e0:	e59f2094 	ldr	r2, [pc, #148]	; c100a7c <iis_play+0x1d8>
 c1009e4:	e5922000 	ldr	r2, [r2]
 c1009e8:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 c1009ec:	e5832000 	str	r2, [r3]
    		BDICNT0 &= ~(3<<22);
 c1009f0:	e59f3084 	ldr	r3, [pc, #132]	; c100a7c <iis_play+0x1d8>
 c1009f4:	e59f2080 	ldr	r2, [pc, #128]	; c100a7c <iis_play+0x1d8>
 c1009f8:	e5922000 	ldr	r2, [r2]
 c1009fc:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
 c100a00:	e5832000 	str	r2, [r3]
 c100a04:	ea000009 	b	c100a30 <iis_play+0x18c>
    	}
    	else{
    		BDICNT0 &= ~(1<<21);
 c100a08:	e59f306c 	ldr	r3, [pc, #108]	; c100a7c <iis_play+0x1d8>
 c100a0c:	e59f2068 	ldr	r2, [pc, #104]	; c100a7c <iis_play+0x1d8>
 c100a10:	e5922000 	ldr	r2, [r2]
 c100a14:	e3c22602 	bic	r2, r2, #2097152	; 0x200000
 c100a18:	e5832000 	str	r2, [r3]
    		BDICNT0 |= (3<<22);
 c100a1c:	e59f3058 	ldr	r3, [pc, #88]	; c100a7c <iis_play+0x1d8>
 c100a20:	e59f2054 	ldr	r2, [pc, #84]	; c100a7c <iis_play+0x1d8>
 c100a24:	e5922000 	ldr	r2, [r2]
 c100a28:	e3822503 	orr	r2, r2, #12582912	; 0xc00000
 c100a2c:	e5832000 	str	r2, [r3]
    	}
    	IISMOD = (IISMOD & ~(3 << 6)) | (2 << 6);
 c100a30:	e59f3048 	ldr	r3, [pc, #72]	; c100a80 <iis_play+0x1dc>
 c100a34:	e59f2044 	ldr	r2, [pc, #68]	; c100a80 <iis_play+0x1dc>
 c100a38:	e5922000 	ldr	r2, [r2]
 c100a3c:	e3c220c0 	bic	r2, r2, #192	; 0xc0
 c100a40:	e3822080 	orr	r2, r2, #128	; 0x80
 c100a44:	e5832000 	str	r2, [r3]

    	IISCON |= 1 << 0;
 c100a48:	e59f301c 	ldr	r3, [pc, #28]	; c100a6c <iis_play+0x1c8>
 c100a4c:	e59f2018 	ldr	r2, [pc, #24]	; c100a6c <iis_play+0x1c8>
 c100a50:	e5922000 	ldr	r2, [r2]
 c100a54:	e3822001 	orr	r2, r2, #1
 c100a58:	e5832000 	str	r2, [r3]
    }

}
 c100a5c:	e24bd00c 	sub	sp, fp, #12
 c100a60:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a64:	e12fff1e 	bx	lr
 c100a68:	0c104c1c 	.word	0x0c104c1c
 c100a6c:	01d18000 	.word	0x01d18000
 c100a70:	01f80004 	.word	0x01f80004
 c100a74:	01f80008 	.word	0x01f80008
 c100a78:	71d18010 	.word	0x71d18010
 c100a7c:	01f8000c 	.word	0x01f8000c
 c100a80:	01d18004 	.word	0x01d18004

0c100a84 <iis_rec>:

void iis_rec( int16 *buffer, uint32 length )
{
 c100a84:	e1a0c00d 	mov	ip, sp
 c100a88:	e92dd800 	push	{fp, ip, lr, pc}
 c100a8c:	e24cb004 	sub	fp, ip, #4
 c100a90:	e24dd010 	sub	sp, sp, #16
 c100a94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c100a98:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING ){
 c100a9c:	e59f3140 	ldr	r3, [pc, #320]	; c100be4 <iis_rec+0x160>
 c100aa0:	e5d33000 	ldrb	r3, [r3]
 c100aa4:	e3530002 	cmp	r3, #2
 c100aa8:	1a00001e 	bne	c100b28 <iis_rec+0xa4>
    	for(i = 0; i < length/2;){
 c100aac:	e3a03000 	mov	r3, #0
 c100ab0:	e50b3010 	str	r3, [fp, #-16]
 c100ab4:	ea000016 	b	c100b14 <iis_rec+0x90>
    		iis_getSample(&ch1,&ch2);
 c100ab8:	e24b2012 	sub	r2, fp, #18
 c100abc:	e24b3014 	sub	r3, fp, #20
 c100ac0:	e1a00002 	mov	r0, r2
 c100ac4:	e1a01003 	mov	r1, r3
 c100ac8:	ebffff58 	bl	c100830 <iis_getSample>
    		buffer[i++]=ch1;
 c100acc:	e51b3010 	ldr	r3, [fp, #-16]
 c100ad0:	e1a03083 	lsl	r3, r3, #1
 c100ad4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100ad8:	e0823003 	add	r3, r2, r3
 c100adc:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100ae0:	e1c320b0 	strh	r2, [r3]
 c100ae4:	e51b3010 	ldr	r3, [fp, #-16]
 c100ae8:	e2833001 	add	r3, r3, #1
 c100aec:	e50b3010 	str	r3, [fp, #-16]
    		buffer[i++]=ch2;
 c100af0:	e51b3010 	ldr	r3, [fp, #-16]
 c100af4:	e1a03083 	lsl	r3, r3, #1
 c100af8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100afc:	e0823003 	add	r3, r2, r3
 c100b00:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c100b04:	e1c320b0 	strh	r2, [r3]
 c100b08:	e51b3010 	ldr	r3, [fp, #-16]
 c100b0c:	e2833001 	add	r3, r3, #1
 c100b10:	e50b3010 	str	r3, [fp, #-16]
{
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING ){
    	for(i = 0; i < length/2;){
 c100b14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100b18:	e1a020a3 	lsr	r2, r3, #1
 c100b1c:	e51b3010 	ldr	r3, [fp, #-16]
 c100b20:	e1520003 	cmp	r2, r3
 c100b24:	8affffe3 	bhi	c100ab8 <iis_rec+0x34>
    		iis_getSample(&ch1,&ch2);
    		buffer[i++]=ch1;
    		buffer[i++]=ch2;
    	}
    }
    if( iomode == IIS_DMA )
 c100b28:	e59f30b4 	ldr	r3, [pc, #180]	; c100be4 <iis_rec+0x160>
 c100b2c:	e5d33000 	ldrb	r3, [r3]
 c100b30:	e3530001 	cmp	r3, #1
 c100b34:	1a000027 	bne	c100bd8 <iis_rec+0x154>
    {
        while( IISCON & 1  );
 c100b38:	e1a00000 	nop			; (mov r0, r0)
 c100b3c:	e59f30a4 	ldr	r3, [pc, #164]	; c100be8 <iis_rec+0x164>
 c100b40:	e5933000 	ldr	r3, [r3]
 c100b44:	e2033001 	and	r3, r3, #1
 c100b48:	e20330ff 	and	r3, r3, #255	; 0xff
 c100b4c:	e3530000 	cmp	r3, #0
 c100b50:	1afffff9 	bne	c100b3c <iis_rec+0xb8>
        BDISRC0  = (1 << 30) | (3 << 28) | (uint32) &IISFIF;
 c100b54:	e59f3090 	ldr	r3, [pc, #144]	; c100bec <iis_rec+0x168>
 c100b58:	e59f2090 	ldr	r2, [pc, #144]	; c100bf0 <iis_rec+0x16c>
 c100b5c:	e5832000 	str	r2, [r3]
        BDIDES0  = (2 << 30) | (1 << 28) | (uint32) buffer;      
 c100b60:	e59f308c 	ldr	r3, [pc, #140]	; c100bf4 <iis_rec+0x170>
 c100b64:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100b68:	e3822209 	orr	r2, r2, #-1879048192	; 0x90000000
 c100b6c:	e5832000 	str	r2, [r3]
        BDCON0   = 0;
 c100b70:	e3a0377e 	mov	r3, #33030144	; 0x1f80000
 c100b74:	e3a02000 	mov	r2, #0
 c100b78:	e5832000 	str	r2, [r3]
        BDICNT0  = (1 << 30) | (1 << 26) | (3 << 22) | (0xfffff & length); 
 c100b7c:	e59f2074 	ldr	r2, [pc, #116]	; c100bf8 <iis_rec+0x174>
 c100b80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100b84:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c100b88:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
 c100b8c:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 c100b90:	e3833503 	orr	r3, r3, #12582912	; 0xc00000
 c100b94:	e5823000 	str	r3, [r2]
        BDICNT0 |= (1 << 20);
 c100b98:	e59f3058 	ldr	r3, [pc, #88]	; c100bf8 <iis_rec+0x174>
 c100b9c:	e59f2054 	ldr	r2, [pc, #84]	; c100bf8 <iis_rec+0x174>
 c100ba0:	e5922000 	ldr	r2, [r2]
 c100ba4:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c100ba8:	e5832000 	str	r2, [r3]

        IISMOD   = (IISMOD & ~(3 << 6)) | (1 << 6);
 c100bac:	e59f3048 	ldr	r3, [pc, #72]	; c100bfc <iis_rec+0x178>
 c100bb0:	e59f2044 	ldr	r2, [pc, #68]	; c100bfc <iis_rec+0x178>
 c100bb4:	e5922000 	ldr	r2, [r2]
 c100bb8:	e3c220c0 	bic	r2, r2, #192	; 0xc0
 c100bbc:	e3822040 	orr	r2, r2, #64	; 0x40
 c100bc0:	e5832000 	str	r2, [r3]
        IISCON  |= 1 << 0;
 c100bc4:	e59f301c 	ldr	r3, [pc, #28]	; c100be8 <iis_rec+0x164>
 c100bc8:	e59f2018 	ldr	r2, [pc, #24]	; c100be8 <iis_rec+0x164>
 c100bcc:	e5922000 	ldr	r2, [r2]
 c100bd0:	e3822001 	orr	r2, r2, #1
 c100bd4:	e5832000 	str	r2, [r3]
    }
}
 c100bd8:	e24bd00c 	sub	sp, fp, #12
 c100bdc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100be0:	e12fff1e 	bx	lr
 c100be4:	0c104c1c 	.word	0x0c104c1c
 c100be8:	01d18000 	.word	0x01d18000
 c100bec:	01f80004 	.word	0x01f80004
 c100bf0:	71d18010 	.word	0x71d18010
 c100bf4:	01f80008 	.word	0x01f80008
 c100bf8:	01f8000c 	.word	0x01f8000c
 c100bfc:	01d18004 	.word	0x01d18004

0c100c00 <iis_pause>:

void iis_pause( void )
{
 c100c00:	e1a0c00d 	mov	ip, sp
 c100c04:	e92dd800 	push	{fp, ip, lr, pc}
 c100c08:	e24cb004 	sub	fp, ip, #4
    IISCON &= ~1;
 c100c0c:	e59f3018 	ldr	r3, [pc, #24]	; c100c2c <iis_pause+0x2c>
 c100c10:	e59f2014 	ldr	r2, [pc, #20]	; c100c2c <iis_pause+0x2c>
 c100c14:	e5922000 	ldr	r2, [r2]
 c100c18:	e3c22001 	bic	r2, r2, #1
 c100c1c:	e5832000 	str	r2, [r3]
}
 c100c20:	e24bd00c 	sub	sp, fp, #12
 c100c24:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c28:	e12fff1e 	bx	lr
 c100c2c:	01d18000 	.word	0x01d18000

0c100c30 <iis_continue>:

void iis_continue( void )
{
 c100c30:	e1a0c00d 	mov	ip, sp
 c100c34:	e92dd800 	push	{fp, ip, lr, pc}
 c100c38:	e24cb004 	sub	fp, ip, #4
    IISCON |= 1;
 c100c3c:	e59f3018 	ldr	r3, [pc, #24]	; c100c5c <iis_continue+0x2c>
 c100c40:	e59f2014 	ldr	r2, [pc, #20]	; c100c5c <iis_continue+0x2c>
 c100c44:	e5922000 	ldr	r2, [r2]
 c100c48:	e3822001 	orr	r2, r2, #1
 c100c4c:	e5832000 	str	r2, [r3]
}
 c100c50:	e24bd00c 	sub	sp, fp, #12
 c100c54:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c58:	e12fff1e 	bx	lr
 c100c5c:	01d18000 	.word	0x01d18000

0c100c60 <iis_status>:

uint8 iis_status( void )
{
 c100c60:	e1a0c00d 	mov	ip, sp
 c100c64:	e92dd800 	push	{fp, ip, lr, pc}
 c100c68:	e24cb004 	sub	fp, ip, #4
    return (IISCON & 1);
 c100c6c:	e59f301c 	ldr	r3, [pc, #28]	; c100c90 <iis_status+0x30>
 c100c70:	e5933000 	ldr	r3, [r3]
 c100c74:	e20330ff 	and	r3, r3, #255	; 0xff
 c100c78:	e2033001 	and	r3, r3, #1
 c100c7c:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c100c80:	e1a00003 	mov	r0, r3
 c100c84:	e24bd00c 	sub	sp, fp, #12
 c100c88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c8c:	e12fff1e 	bx	lr
 c100c90:	01d18000 	.word	0x01d18000

0c100c94 <iis_playWawFile>:

void iis_playWawFile( int16 *wav, uint8 loop )
{
 c100c94:	e1a0c00d 	mov	ip, sp
 c100c98:	e92dd800 	push	{fp, ip, lr, pc}
 c100c9c:	e24cb004 	sub	fp, ip, #4
 c100ca0:	e24dd010 	sub	sp, sp, #16
 c100ca4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c100ca8:	e1a03001 	mov	r3, r1
 c100cac:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

    uint32 size;
    char *p;

    p = (char *) wav;
 c100cb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100cb4:	e50b3010 	str	r3, [fp, #-16]
    while ( !(p[0] == 'd' && p[1] == 'a' && p[2] == 't' && p[3] == 'a') ) // busca el chunck data
 c100cb8:	ea000002 	b	c100cc8 <iis_playWawFile+0x34>
        p++;
 c100cbc:	e51b3010 	ldr	r3, [fp, #-16]
 c100cc0:	e2833001 	add	r3, r3, #1
 c100cc4:	e50b3010 	str	r3, [fp, #-16]

    uint32 size;
    char *p;

    p = (char *) wav;
    while ( !(p[0] == 'd' && p[1] == 'a' && p[2] == 't' && p[3] == 'a') ) // busca el chunck data
 c100cc8:	e51b3010 	ldr	r3, [fp, #-16]
 c100ccc:	e5d33000 	ldrb	r3, [r3]
 c100cd0:	e3530064 	cmp	r3, #100	; 0x64
 c100cd4:	1afffff8 	bne	c100cbc <iis_playWawFile+0x28>
 c100cd8:	e51b3010 	ldr	r3, [fp, #-16]
 c100cdc:	e2833001 	add	r3, r3, #1
 c100ce0:	e5d33000 	ldrb	r3, [r3]
 c100ce4:	e3530061 	cmp	r3, #97	; 0x61
 c100ce8:	1afffff3 	bne	c100cbc <iis_playWawFile+0x28>
 c100cec:	e51b3010 	ldr	r3, [fp, #-16]
 c100cf0:	e2833002 	add	r3, r3, #2
 c100cf4:	e5d33000 	ldrb	r3, [r3]
 c100cf8:	e3530074 	cmp	r3, #116	; 0x74
 c100cfc:	1affffee 	bne	c100cbc <iis_playWawFile+0x28>
 c100d00:	e51b3010 	ldr	r3, [fp, #-16]
 c100d04:	e2833003 	add	r3, r3, #3
 c100d08:	e5d33000 	ldrb	r3, [r3]
 c100d0c:	e3530061 	cmp	r3, #97	; 0x61
 c100d10:	1affffe9 	bne	c100cbc <iis_playWawFile+0x28>
        p++;
    p += 4;
 c100d14:	e51b3010 	ldr	r3, [fp, #-16]
 c100d18:	e2833004 	add	r3, r3, #4
 c100d1c:	e50b3010 	str	r3, [fp, #-16]

    size = p[0] + (p[1] << 8) + (p[2] << 16) + (p[3] << 24); // los datos de cabecera están en little-endian
 c100d20:	e51b3010 	ldr	r3, [fp, #-16]
 c100d24:	e5d33000 	ldrb	r3, [r3]
 c100d28:	e1a02003 	mov	r2, r3
 c100d2c:	e51b3010 	ldr	r3, [fp, #-16]
 c100d30:	e2833001 	add	r3, r3, #1
 c100d34:	e5d33000 	ldrb	r3, [r3]
 c100d38:	e1a03403 	lsl	r3, r3, #8
 c100d3c:	e0822003 	add	r2, r2, r3
 c100d40:	e51b3010 	ldr	r3, [fp, #-16]
 c100d44:	e2833002 	add	r3, r3, #2
 c100d48:	e5d33000 	ldrb	r3, [r3]
 c100d4c:	e1a03803 	lsl	r3, r3, #16
 c100d50:	e0822003 	add	r2, r2, r3
 c100d54:	e51b3010 	ldr	r3, [fp, #-16]
 c100d58:	e2833003 	add	r3, r3, #3
 c100d5c:	e5d33000 	ldrb	r3, [r3]
 c100d60:	e1a03c03 	lsl	r3, r3, #24
 c100d64:	e0823003 	add	r3, r2, r3
 c100d68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    p += 4;
 c100d6c:	e51b3010 	ldr	r3, [fp, #-16]
 c100d70:	e2833004 	add	r3, r3, #4
 c100d74:	e50b3010 	str	r3, [fp, #-16]

    iis_play( (int16 *)p, size, loop );
 c100d78:	e51b2010 	ldr	r2, [fp, #-16]
 c100d7c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100d80:	e1a00002 	mov	r0, r2
 c100d84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c100d88:	e1a02003 	mov	r2, r3
 c100d8c:	ebfffec4 	bl	c1008a4 <iis_play>

}
 c100d90:	e24bd00c 	sub	sp, fp, #12
 c100d94:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d98:	e12fff1e 	bx	lr

0c100d9c <keypad_scan>:
#include <keypad.h>

extern void isr_KEYPAD_dummy( void );

uint8 keypad_scan( void )
{
 c100d9c:	e1a0c00d 	mov	ip, sp
 c100da0:	e92dd800 	push	{fp, ip, lr, pc}
 c100da4:	e24cb004 	sub	fp, ip, #4
 c100da8:	e24dd008 	sub	sp, sp, #8
    uint8 aux;

    aux = *( KEYPAD_ADDR + 0x1c );//fila 1
 c100dac:	e59f31fc 	ldr	r3, [pc, #508]	; c100fb0 <keypad_scan+0x214>
 c100db0:	e5d33000 	ldrb	r3, [r3]
 c100db4:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c100db8:	e55b300d 	ldrb	r3, [fp, #-13]
 c100dbc:	e203300f 	and	r3, r3, #15
 c100dc0:	e353000f 	cmp	r3, #15
 c100dc4:	0a000017 	beq	c100e28 <keypad_scan+0x8c>
    {
        if( (aux & 0x8) == 0 )
 c100dc8:	e55b300d 	ldrb	r3, [fp, #-13]
 c100dcc:	e2033008 	and	r3, r3, #8
 c100dd0:	e3530000 	cmp	r3, #0
 c100dd4:	1a000001 	bne	c100de0 <keypad_scan+0x44>
            return KEYPAD_KEY0;
 c100dd8:	e3a03000 	mov	r3, #0
 c100ddc:	ea00006f 	b	c100fa0 <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )
 c100de0:	e55b300d 	ldrb	r3, [fp, #-13]
 c100de4:	e2033004 	and	r3, r3, #4
 c100de8:	e3530000 	cmp	r3, #0
 c100dec:	1a000001 	bne	c100df8 <keypad_scan+0x5c>
            return KEYPAD_KEY1;
 c100df0:	e3a03001 	mov	r3, #1
 c100df4:	ea000069 	b	c100fa0 <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c100df8:	e55b300d 	ldrb	r3, [fp, #-13]
 c100dfc:	e2033002 	and	r3, r3, #2
 c100e00:	e3530000 	cmp	r3, #0
 c100e04:	1a000001 	bne	c100e10 <keypad_scan+0x74>
            return KEYPAD_KEY2;
 c100e08:	e3a03002 	mov	r3, #2
 c100e0c:	ea000063 	b	c100fa0 <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c100e10:	e55b300d 	ldrb	r3, [fp, #-13]
 c100e14:	e2033001 	and	r3, r3, #1
 c100e18:	e3530000 	cmp	r3, #0
 c100e1c:	1a000001 	bne	c100e28 <keypad_scan+0x8c>
            return KEYPAD_KEY3;
 c100e20:	e3a03003 	mov	r3, #3
 c100e24:	ea00005d 	b	c100fa0 <keypad_scan+0x204>
    }
	aux = *( KEYPAD_ADDR + 0x1a );//fila 2
 c100e28:	e59f3184 	ldr	r3, [pc, #388]	; c100fb4 <keypad_scan+0x218>
 c100e2c:	e5d33000 	ldrb	r3, [r3]
 c100e30:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c100e34:	e55b300d 	ldrb	r3, [fp, #-13]
 c100e38:	e203300f 	and	r3, r3, #15
 c100e3c:	e353000f 	cmp	r3, #15
 c100e40:	0a000017 	beq	c100ea4 <keypad_scan+0x108>
	{
		if( (aux & 0x8) == 0 )
 c100e44:	e55b300d 	ldrb	r3, [fp, #-13]
 c100e48:	e2033008 	and	r3, r3, #8
 c100e4c:	e3530000 	cmp	r3, #0
 c100e50:	1a000001 	bne	c100e5c <keypad_scan+0xc0>
			return KEYPAD_KEY4;
 c100e54:	e3a03004 	mov	r3, #4
 c100e58:	ea000050 	b	c100fa0 <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c100e5c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100e60:	e2033004 	and	r3, r3, #4
 c100e64:	e3530000 	cmp	r3, #0
 c100e68:	1a000001 	bne	c100e74 <keypad_scan+0xd8>
			return KEYPAD_KEY5;
 c100e6c:	e3a03005 	mov	r3, #5
 c100e70:	ea00004a 	b	c100fa0 <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c100e74:	e55b300d 	ldrb	r3, [fp, #-13]
 c100e78:	e2033002 	and	r3, r3, #2
 c100e7c:	e3530000 	cmp	r3, #0
 c100e80:	1a000001 	bne	c100e8c <keypad_scan+0xf0>
			return KEYPAD_KEY6;
 c100e84:	e3a03006 	mov	r3, #6
 c100e88:	ea000044 	b	c100fa0 <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c100e8c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100e90:	e2033001 	and	r3, r3, #1
 c100e94:	e3530000 	cmp	r3, #0
 c100e98:	1a000001 	bne	c100ea4 <keypad_scan+0x108>
			return KEYPAD_KEY7;
 c100e9c:	e3a03007 	mov	r3, #7
 c100ea0:	ea00003e 	b	c100fa0 <keypad_scan+0x204>
	}

    aux = *( KEYPAD_ADDR + 0x16 );//fila 3
 c100ea4:	e59f310c 	ldr	r3, [pc, #268]	; c100fb8 <keypad_scan+0x21c>
 c100ea8:	e5d33000 	ldrb	r3, [r3]
 c100eac:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c100eb0:	e55b300d 	ldrb	r3, [fp, #-13]
 c100eb4:	e203300f 	and	r3, r3, #15
 c100eb8:	e353000f 	cmp	r3, #15
 c100ebc:	0a000017 	beq	c100f20 <keypad_scan+0x184>
    {
        if( (aux & 0x8) == 0 )
 c100ec0:	e55b300d 	ldrb	r3, [fp, #-13]
 c100ec4:	e2033008 	and	r3, r3, #8
 c100ec8:	e3530000 	cmp	r3, #0
 c100ecc:	1a000001 	bne	c100ed8 <keypad_scan+0x13c>
            return KEYPAD_KEY8;
 c100ed0:	e3a03008 	mov	r3, #8
 c100ed4:	ea000031 	b	c100fa0 <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )
 c100ed8:	e55b300d 	ldrb	r3, [fp, #-13]
 c100edc:	e2033004 	and	r3, r3, #4
 c100ee0:	e3530000 	cmp	r3, #0
 c100ee4:	1a000001 	bne	c100ef0 <keypad_scan+0x154>
            return KEYPAD_KEY9;
 c100ee8:	e3a03009 	mov	r3, #9
 c100eec:	ea00002b 	b	c100fa0 <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c100ef0:	e55b300d 	ldrb	r3, [fp, #-13]
 c100ef4:	e2033002 	and	r3, r3, #2
 c100ef8:	e3530000 	cmp	r3, #0
 c100efc:	1a000001 	bne	c100f08 <keypad_scan+0x16c>
            return KEYPAD_KEYA;
 c100f00:	e3a0300a 	mov	r3, #10
 c100f04:	ea000025 	b	c100fa0 <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c100f08:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f0c:	e2033001 	and	r3, r3, #1
 c100f10:	e3530000 	cmp	r3, #0
 c100f14:	1a000001 	bne	c100f20 <keypad_scan+0x184>
            return KEYPAD_KEYB;
 c100f18:	e3a0300b 	mov	r3, #11
 c100f1c:	ea00001f 	b	c100fa0 <keypad_scan+0x204>
    }
	aux = *( KEYPAD_ADDR + 0xe );//fila 4
 c100f20:	e59f3094 	ldr	r3, [pc, #148]	; c100fbc <keypad_scan+0x220>
 c100f24:	e5d33000 	ldrb	r3, [r3]
 c100f28:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c100f2c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f30:	e203300f 	and	r3, r3, #15
 c100f34:	e353000f 	cmp	r3, #15
 c100f38:	0a000017 	beq	c100f9c <keypad_scan+0x200>
	{
		if( (aux & 0x8) == 0 )
 c100f3c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f40:	e2033008 	and	r3, r3, #8
 c100f44:	e3530000 	cmp	r3, #0
 c100f48:	1a000001 	bne	c100f54 <keypad_scan+0x1b8>
			return KEYPAD_KEYC;
 c100f4c:	e3a0300c 	mov	r3, #12
 c100f50:	ea000012 	b	c100fa0 <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c100f54:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f58:	e2033004 	and	r3, r3, #4
 c100f5c:	e3530000 	cmp	r3, #0
 c100f60:	1a000001 	bne	c100f6c <keypad_scan+0x1d0>
			return KEYPAD_KEYD;
 c100f64:	e3a0300d 	mov	r3, #13
 c100f68:	ea00000c 	b	c100fa0 <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c100f6c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f70:	e2033002 	and	r3, r3, #2
 c100f74:	e3530000 	cmp	r3, #0
 c100f78:	1a000001 	bne	c100f84 <keypad_scan+0x1e8>
			return KEYPAD_KEYE;
 c100f7c:	e3a0300e 	mov	r3, #14
 c100f80:	ea000006 	b	c100fa0 <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c100f84:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f88:	e2033001 	and	r3, r3, #1
 c100f8c:	e3530000 	cmp	r3, #0
 c100f90:	1a000001 	bne	c100f9c <keypad_scan+0x200>
			return KEYPAD_KEYF;
 c100f94:	e3a0300f 	mov	r3, #15
 c100f98:	ea000000 	b	c100fa0 <keypad_scan+0x204>
	}

    return KEYPAD_FAILURE;
 c100f9c:	e3a030ff 	mov	r3, #255	; 0xff
}
 c100fa0:	e1a00003 	mov	r0, r3
 c100fa4:	e24bd00c 	sub	sp, fp, #12
 c100fa8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100fac:	e12fff1e 	bx	lr
 c100fb0:	0600001c 	.word	0x0600001c
 c100fb4:	0600001a 	.word	0x0600001a
 c100fb8:	06000016 	.word	0x06000016
 c100fbc:	0600000e 	.word	0x0600000e

0c100fc0 <keypad_pressed>:

uint8 keypad_pressed( void )
{
 c100fc0:	e1a0c00d 	mov	ip, sp
 c100fc4:	e92dd800 	push	{fp, ip, lr, pc}
 c100fc8:	e24cb004 	sub	fp, ip, #4
    if(keypad_scan()==KEYPAD_FAILURE)
 c100fcc:	ebffff72 	bl	c100d9c <keypad_scan>
 c100fd0:	e1a03000 	mov	r3, r0
 c100fd4:	e35300ff 	cmp	r3, #255	; 0xff
 c100fd8:	1a000001 	bne	c100fe4 <keypad_pressed+0x24>
    	return 0;
 c100fdc:	e3a03000 	mov	r3, #0
 c100fe0:	ea000000 	b	c100fe8 <keypad_pressed+0x28>
    return 1;
 c100fe4:	e3a03001 	mov	r3, #1
}
 c100fe8:	e1a00003 	mov	r0, r3
 c100fec:	e24bd00c 	sub	sp, fp, #12
 c100ff0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ff4:	e12fff1e 	bx	lr

0c100ff8 <keypad_open>:

void keypad_open( void (*isr)(void) )
{
 c100ff8:	e1a0c00d 	mov	ip, sp
 c100ffc:	e92dd800 	push	{fp, ip, lr, pc}
 c101000:	e24cb004 	sub	fp, ip, #4
 c101004:	e24dd008 	sub	sp, sp, #8
 c101008:	e50b0010 	str	r0, [fp, #-16]
    pISR_KEYPAD = (uint32)isr;
 c10100c:	e59f3030 	ldr	r3, [pc, #48]	; c101044 <keypad_open+0x4c>
 c101010:	e51b2010 	ldr	r2, [fp, #-16]
 c101014:	e5832000 	str	r2, [r3]
    I_ISPC = BIT_KEYPAD;
 c101018:	e59f3028 	ldr	r3, [pc, #40]	; c101048 <keypad_open+0x50>
 c10101c:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c101020:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_GLOBAL | BIT_KEYPAD);
 c101024:	e59f3020 	ldr	r3, [pc, #32]	; c10104c <keypad_open+0x54>
 c101028:	e59f201c 	ldr	r2, [pc, #28]	; c10104c <keypad_open+0x54>
 c10102c:	e5922000 	ldr	r2, [r2]
 c101030:	e3c22405 	bic	r2, r2, #83886080	; 0x5000000
 c101034:	e5832000 	str	r2, [r3]
}
 c101038:	e24bd00c 	sub	sp, fp, #12
 c10103c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101040:	e12fff1e 	bx	lr
 c101044:	0c7fff80 	.word	0x0c7fff80
 c101048:	01e00024 	.word	0x01e00024
 c10104c:	01e0000c 	.word	0x01e0000c

0c101050 <keypad_close>:

void keypad_close( void )
{
 c101050:	e1a0c00d 	mov	ip, sp
 c101054:	e92dd800 	push	{fp, ip, lr, pc}
 c101058:	e24cb004 	sub	fp, ip, #4
    INTMSK |= BIT_KEYPAD;
 c10105c:	e59f3024 	ldr	r3, [pc, #36]	; c101088 <keypad_close+0x38>
 c101060:	e59f2020 	ldr	r2, [pc, #32]	; c101088 <keypad_close+0x38>
 c101064:	e5922000 	ldr	r2, [r2]
 c101068:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
 c10106c:	e5832000 	str	r2, [r3]
    pISR_KEYPAD = (uint32) isr_KEYPAD_dummy;
 c101070:	e59f3014 	ldr	r3, [pc, #20]	; c10108c <keypad_close+0x3c>
 c101074:	e59f2014 	ldr	r2, [pc, #20]	; c101090 <keypad_close+0x40>
 c101078:	e5832000 	str	r2, [r3]
}
 c10107c:	e24bd00c 	sub	sp, fp, #12
 c101080:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101084:	e12fff1e 	bx	lr
 c101088:	01e0000c 	.word	0x01e0000c
 c10108c:	0c7fff80 	.word	0x0c7fff80
 c101090:	0c101da8 	.word	0x0c101da8

0c101094 <keypad_init>:

#if KEYPAD_IO_METHOD == POOLING


void keypad_init( void )
{
 c101094:	e1a0c00d 	mov	ip, sp
 c101098:	e92dd800 	push	{fp, ip, lr, pc}
 c10109c:	e24cb004 	sub	fp, ip, #4
    timers_init();  
 c1010a0:	eb0003f1 	bl	c10206c <timers_init>
};
 c1010a4:	e24bd00c 	sub	sp, fp, #12
 c1010a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1010ac:	e12fff1e 	bx	lr

0c1010b0 <keypad_getchar>:

uint8 keypad_getchar( void ){
 c1010b0:	e1a0c00d 	mov	ip, sp
 c1010b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1010b8:	e24cb004 	sub	fp, ip, #4
 c1010bc:	e24dd008 	sub	sp, sp, #8
	uint8 s;
    while(PDATG & (1<<1));
 c1010c0:	e1a00000 	nop			; (mov r0, r0)
 c1010c4:	e59f3054 	ldr	r3, [pc, #84]	; c101120 <keypad_getchar+0x70>
 c1010c8:	e5933000 	ldr	r3, [r3]
 c1010cc:	e2033002 	and	r3, r3, #2
 c1010d0:	e3530000 	cmp	r3, #0
 c1010d4:	1afffffa 	bne	c1010c4 <keypad_getchar+0x14>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1010d8:	e3a0001e 	mov	r0, #30
 c1010dc:	eb000491 	bl	c102328 <sw_delay_ms>
    s = keypad_scan();
 c1010e0:	ebffff2d 	bl	c100d9c <keypad_scan>
 c1010e4:	e1a03000 	mov	r3, r0
 c1010e8:	e54b300d 	strb	r3, [fp, #-13]
    while(!(PDATG & (1<<1)));
 c1010ec:	e1a00000 	nop			; (mov r0, r0)
 c1010f0:	e59f3028 	ldr	r3, [pc, #40]	; c101120 <keypad_getchar+0x70>
 c1010f4:	e5933000 	ldr	r3, [r3]
 c1010f8:	e2033002 	and	r3, r3, #2
 c1010fc:	e3530000 	cmp	r3, #0
 c101100:	0afffffa 	beq	c1010f0 <keypad_getchar+0x40>
    sw_delay_ms(KEYPAD_KEYUP_DELAY);
 c101104:	e3a00064 	mov	r0, #100	; 0x64
 c101108:	eb000486 	bl	c102328 <sw_delay_ms>
    return s;
 c10110c:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c101110:	e1a00003 	mov	r0, r3
 c101114:	e24bd00c 	sub	sp, fp, #12
 c101118:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10111c:	e12fff1e 	bx	lr
 c101120:	01d20044 	.word	0x01d20044

0c101124 <keypad_getchartime>:

uint8 keypad_getchartime( uint16 *ms ){
 c101124:	e1a0c00d 	mov	ip, sp
 c101128:	e92dd800 	push	{fp, ip, lr, pc}
 c10112c:	e24cb004 	sub	fp, ip, #4
 c101130:	e24dd010 	sub	sp, sp, #16
 c101134:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8 scancode;

    while(PDATG & (1<<1));
 c101138:	e1a00000 	nop			; (mov r0, r0)
 c10113c:	e59f3080 	ldr	r3, [pc, #128]	; c1011c4 <keypad_getchartime+0xa0>
 c101140:	e5933000 	ldr	r3, [r3]
 c101144:	e2033002 	and	r3, r3, #2
 c101148:	e3530000 	cmp	r3, #0
 c10114c:	1afffffa 	bne	c10113c <keypad_getchartime+0x18>
    timer3_start();
 c101150:	eb0004e2 	bl	c1024e0 <timer3_start>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c101154:	e3a0001e 	mov	r0, #30
 c101158:	eb000472 	bl	c102328 <sw_delay_ms>

    scancode = keypad_scan();
 c10115c:	ebffff0e 	bl	c100d9c <keypad_scan>
 c101160:	e1a03000 	mov	r3, r0
 c101164:	e54b300d 	strb	r3, [fp, #-13]

    while(!(PDATG & (1<<1)));
 c101168:	e1a00000 	nop			; (mov r0, r0)
 c10116c:	e59f3050 	ldr	r3, [pc, #80]	; c1011c4 <keypad_getchartime+0xa0>
 c101170:	e5933000 	ldr	r3, [r3]
 c101174:	e2033002 	and	r3, r3, #2
 c101178:	e3530000 	cmp	r3, #0
 c10117c:	0afffffa 	beq	c10116c <keypad_getchartime+0x48>
    *ms = timer3_stop() / 10;
 c101180:	eb000502 	bl	c102590 <timer3_stop>
 c101184:	e1a03000 	mov	r3, r0
 c101188:	e1a02003 	mov	r2, r3
 c10118c:	e59f3034 	ldr	r3, [pc, #52]	; c1011c8 <keypad_getchartime+0xa4>
 c101190:	e0831392 	umull	r1, r3, r2, r3
 c101194:	e1a031a3 	lsr	r3, r3, #3
 c101198:	e1a03803 	lsl	r3, r3, #16
 c10119c:	e1a02823 	lsr	r2, r3, #16
 c1011a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1011a4:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c1011a8:	e3a00064 	mov	r0, #100	; 0x64
 c1011ac:	eb00045d 	bl	c102328 <sw_delay_ms>

    return scancode;
 c1011b0:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c1011b4:	e1a00003 	mov	r0, r3
 c1011b8:	e24bd00c 	sub	sp, fp, #12
 c1011bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1011c0:	e12fff1e 	bx	lr
 c1011c4:	01d20044 	.word	0x01d20044
 c1011c8:	cccccccd 	.word	0xcccccccd

0c1011cc <keypad_timeout_getchar>:

uint8 keypad_timeout_getchar( uint16 ms ){//TODO
 c1011cc:	e1a0c00d 	mov	ip, sp
 c1011d0:	e92dd800 	push	{fp, ip, lr, pc}
 c1011d4:	e24cb004 	sub	fp, ip, #4
 c1011d8:	e24dd010 	sub	sp, sp, #16
 c1011dc:	e1a03000 	mov	r3, r0
 c1011e0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 s;
	timer3_start_timeout(ms*10);
 c1011e4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1011e8:	e1a02003 	mov	r2, r3
 c1011ec:	e1a02102 	lsl	r2, r2, #2
 c1011f0:	e0823003 	add	r3, r2, r3
 c1011f4:	e1a03083 	lsl	r3, r3, #1
 c1011f8:	e1a03803 	lsl	r3, r3, #16
 c1011fc:	e1a03823 	lsr	r3, r3, #16
 c101200:	e1a00003 	mov	r0, r3
 c101204:	eb0004f6 	bl	c1025e4 <timer3_start_timeout>

	while(!keypad_pressed())
 c101208:	ea000005 	b	c101224 <keypad_timeout_getchar+0x58>
		if(timer3_timeout())
 c10120c:	eb000522 	bl	c10269c <timer3_timeout>
 c101210:	e1a03000 	mov	r3, r0
 c101214:	e3530000 	cmp	r3, #0
 c101218:	0a000001 	beq	c101224 <keypad_timeout_getchar+0x58>
			return KEYPAD_TIMEOUT;
 c10121c:	e3a030fe 	mov	r3, #254	; 0xfe
 c101220:	ea000018 	b	c101288 <keypad_timeout_getchar+0xbc>

uint8 keypad_timeout_getchar( uint16 ms ){//TODO
	uint8 s;
	timer3_start_timeout(ms*10);

	while(!keypad_pressed())
 c101224:	ebffff65 	bl	c100fc0 <keypad_pressed>
 c101228:	e1a03000 	mov	r3, r0
 c10122c:	e3530000 	cmp	r3, #0
 c101230:	0afffff5 	beq	c10120c <keypad_timeout_getchar+0x40>
		if(timer3_timeout())
			return KEYPAD_TIMEOUT;

    while(PDATG & (1<<1));
 c101234:	e1a00000 	nop			; (mov r0, r0)
 c101238:	e59f3058 	ldr	r3, [pc, #88]	; c101298 <keypad_timeout_getchar+0xcc>
 c10123c:	e5933000 	ldr	r3, [r3]
 c101240:	e2033002 	and	r3, r3, #2
 c101244:	e3530000 	cmp	r3, #0
 c101248:	1afffffa 	bne	c101238 <keypad_timeout_getchar+0x6c>
	timer3_start();
 c10124c:	eb0004a3 	bl	c1024e0 <timer3_start>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c101250:	e3a0001e 	mov	r0, #30
 c101254:	eb000433 	bl	c102328 <sw_delay_ms>

	s = keypad_scan();
 c101258:	ebfffecf 	bl	c100d9c <keypad_scan>
 c10125c:	e1a03000 	mov	r3, r0
 c101260:	e54b300d 	strb	r3, [fp, #-13]

    while(!(PDATG & (1<<1)));
 c101264:	e1a00000 	nop			; (mov r0, r0)
 c101268:	e59f3028 	ldr	r3, [pc, #40]	; c101298 <keypad_timeout_getchar+0xcc>
 c10126c:	e5933000 	ldr	r3, [r3]
 c101270:	e2033002 	and	r3, r3, #2
 c101274:	e3530000 	cmp	r3, #0
 c101278:	0afffffa 	beq	c101268 <keypad_timeout_getchar+0x9c>
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c10127c:	e3a00064 	mov	r0, #100	; 0x64
 c101280:	eb000428 	bl	c102328 <sw_delay_ms>
	return s;
 c101284:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c101288:	e1a00003 	mov	r0, r3
 c10128c:	e24bd00c 	sub	sp, fp, #12
 c101290:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101294:	e12fff1e 	bx	lr
 c101298:	01d20044 	.word	0x01d20044

0c10129c <segs_init>:
static const uint8 hex2segs[16] = {0x12, 0x9f, 0x31, 0x15, 0x9c, 0x54, 0x50, 0x1f, 0x10, 0x1c, 0x18, 0xd0, 0x72, 0x91, 0x70, 0x78, 0xef};

static uint8 state;
        
void segs_init( void )
{
 c10129c:	e1a0c00d 	mov	ip, sp
 c1012a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1012a4:	e24cb004 	sub	fp, ip, #4
    segs_off();
 c1012a8:	eb000002 	bl	c1012b8 <segs_off>
}                                  
 c1012ac:	e24bd00c 	sub	sp, fp, #12
 c1012b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1012b4:	e12fff1e 	bx	lr

0c1012b8 <segs_off>:
                          
void segs_off( void )
{
 c1012b8:	e1a0c00d 	mov	ip, sp
 c1012bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1012c0:	e24cb004 	sub	fp, ip, #4
    state = SEGS_OFF;
 c1012c4:	e59f3020 	ldr	r3, [pc, #32]	; c1012ec <segs_off+0x34>
 c1012c8:	e3e02000 	mvn	r2, #0
 c1012cc:	e5c32000 	strb	r2, [r3]
    SEGS = state;
 c1012d0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1012d4:	e59f2010 	ldr	r2, [pc, #16]	; c1012ec <segs_off+0x34>
 c1012d8:	e5d22000 	ldrb	r2, [r2]
 c1012dc:	e5c32000 	strb	r2, [r3]
}
 c1012e0:	e24bd00c 	sub	sp, fp, #12
 c1012e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1012e8:	e12fff1e 	bx	lr
 c1012ec:	0c104c1d 	.word	0x0c104c1d

0c1012f0 <segs_putchar>:

void segs_putchar( uint8 n )
{
 c1012f0:	e1a0c00d 	mov	ip, sp
 c1012f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1012f8:	e24cb004 	sub	fp, ip, #4
 c1012fc:	e24dd008 	sub	sp, sp, #8
 c101300:	e1a03000 	mov	r3, r0
 c101304:	e54b300d 	strb	r3, [fp, #-13]
    state = n & 0x0f;
 c101308:	e55b300d 	ldrb	r3, [fp, #-13]
 c10130c:	e203300f 	and	r3, r3, #15
 c101310:	e20320ff 	and	r2, r3, #255	; 0xff
 c101314:	e59f3024 	ldr	r3, [pc, #36]	; c101340 <segs_putchar+0x50>
 c101318:	e5c32000 	strb	r2, [r3]
    SEGS = hex2segs[state];
 c10131c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101320:	e59f2018 	ldr	r2, [pc, #24]	; c101340 <segs_putchar+0x50>
 c101324:	e5d22000 	ldrb	r2, [r2]
 c101328:	e59f1014 	ldr	r1, [pc, #20]	; c101344 <segs_putchar+0x54>
 c10132c:	e7d12002 	ldrb	r2, [r1, r2]
 c101330:	e5c32000 	strb	r2, [r3]
};
 c101334:	e24bd00c 	sub	sp, fp, #12
 c101338:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10133c:	e12fff1e 	bx	lr
 c101340:	0c104c1d 	.word	0x0c104c1d
 c101344:	0c104650 	.word	0x0c104650

0c101348 <segs_status>:

uint8 segs_status( void )
{
 c101348:	e1a0c00d 	mov	ip, sp
 c10134c:	e92dd800 	push	{fp, ip, lr, pc}
 c101350:	e24cb004 	sub	fp, ip, #4
    return state;
 c101354:	e59f3010 	ldr	r3, [pc, #16]	; c10136c <segs_status+0x24>
 c101358:	e5d33000 	ldrb	r3, [r3]
};
 c10135c:	e1a00003 	mov	r0, r3
 c101360:	e24bd00c 	sub	sp, fp, #12
 c101364:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101368:	e12fff1e 	bx	lr
 c10136c:	0c104c1d 	.word	0x0c104c1d

0c101370 <sys_init>:
static inline void install_dummy_isr( void );
static inline void show_sys_info( void );
static void sys_recovery( void );
inline void sleep(void);

void sys_init(void) {
 c101370:	e1a0c00d 	mov	ip, sp
 c101374:	e92dd800 	push	{fp, ip, lr, pc}
 c101378:	e24cb004 	sub	fp, ip, #4
 c10137c:	e24dd008 	sub	sp, sp, #8
	uint8 mode;

	WTCON = 0;
 c101380:	e59f30fc 	ldr	r3, [pc, #252]	; c101484 <sys_init+0x114>
 c101384:	e3a02000 	mov	r2, #0
 c101388:	e5832000 	str	r2, [r3]
	INTMSK = ~(1 << 26);
 c10138c:	e59f30f4 	ldr	r3, [pc, #244]	; c101488 <sys_init+0x118>
 c101390:	e3e02301 	mvn	r2, #67108864	; 0x4000000
 c101394:	e5832000 	str	r2, [r3]

	GET_OPMODE(&mode);    // lee el modo de ejecución del procesador
 c101398:	e10f0000 	mrs	r0, CPSR
 c10139c:	e200001f 	and	r0, r0, #31
 c1013a0:	e54b000d 	strb	r0, [fp, #-13]
	if ( mode != SVCMODE)
 c1013a4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1013a8:	e3530013 	cmp	r3, #19
 c1013ac:	0a000000 	beq	c1013b4 <sys_init+0x44>
		sys_recovery(); // si no es SVC (por una reejecución de la aplicación tras una excepción sin reset HW previo) recupera el modo SVC y restaura las pilas del sistema
 c1013b0:	eb0002a5 	bl	c101e4c <sys_recovery>

	LOCKTIME = 0xFFF;
 c1013b4:	e59f30d0 	ldr	r3, [pc, #208]	; c10148c <sys_init+0x11c>
 c1013b8:	e59f20d0 	ldr	r2, [pc, #208]	; c101490 <sys_init+0x120>
 c1013bc:	e5832000 	str	r2, [r3]
	PLLCON = 0x38021;
 c1013c0:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c1013c4:	e59f20c8 	ldr	r2, [pc, #200]	; c101494 <sys_init+0x124>
 c1013c8:	e5832000 	str	r2, [r3]
	CLKSLOW = 0x8;
 c1013cc:	e59f30c4 	ldr	r3, [pc, #196]	; c101498 <sys_init+0x128>
 c1013d0:	e3a02008 	mov	r2, #8
 c1013d4:	e5832000 	str	r2, [r3]
	CLKCON = 0x7FF8;
 c1013d8:	e59f30bc 	ldr	r3, [pc, #188]	; c10149c <sys_init+0x12c>
 c1013dc:	e59f20bc 	ldr	r2, [pc, #188]	; c1014a0 <sys_init+0x130>
 c1013e0:	e5832000 	str	r2, [r3]

	SBUSCON = 0x8000001B;
 c1013e4:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c1013e8:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c1013ec:	e5832000 	str	r2, [r3]

	SYSCFG = 0x0;
 c1013f0:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c1013f4:	e3a02000 	mov	r2, #0
 c1013f8:	e5832000 	str	r2, [r3]

	I_PMST = 0x1f1b;
 c1013fc:	e59f30a0 	ldr	r3, [pc, #160]	; c1014a4 <sys_init+0x134>
 c101400:	e59f20a0 	ldr	r2, [pc, #160]	; c1014a8 <sys_init+0x138>
 c101404:	e5832000 	str	r2, [r3]
	I_PSLV = 0x1b1b1b1b;
 c101408:	e59f309c 	ldr	r3, [pc, #156]	; c1014ac <sys_init+0x13c>
 c10140c:	e59f209c 	ldr	r2, [pc, #156]	; c1014b0 <sys_init+0x140>
 c101410:	e5832000 	str	r2, [r3]
	INTMOD = 0x0;
 c101414:	e59f3098 	ldr	r3, [pc, #152]	; c1014b4 <sys_init+0x144>
 c101418:	e3a02000 	mov	r2, #0
 c10141c:	e5832000 	str	r2, [r3]
	install_dummy_isr();
 c101420:	eb000088 	bl	c101648 <install_dummy_isr>
	EXTINTPND = 0x0;     //creo que esta bien
 c101424:	e59f308c 	ldr	r3, [pc, #140]	; c1014b8 <sys_init+0x148>
 c101428:	e3a02000 	mov	r2, #0
 c10142c:	e5832000 	str	r2, [r3]
	I_ISPC = 0x1;     //creo que esta bien
 c101430:	e59f3084 	ldr	r3, [pc, #132]	; c1014bc <sys_init+0x14c>
 c101434:	e3a02001 	mov	r2, #1
 c101438:	e5832000 	str	r2, [r3]
	INTCON = 0x1;
 c10143c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c101440:	e3a02001 	mov	r2, #1
 c101444:	e5832000 	str	r2, [r3]
	SET_IRQFLAG(0);
 c101448:	e10f0000 	mrs	r0, CPSR
 c10144c:	e3c00080 	bic	r0, r0, #128	; 0x80
 c101450:	e3800000 	orr	r0, r0, #0
 c101454:	e121f000 	msr	CPSR_c, r0
	SET_FIQFLAG(1);
 c101458:	e10f0000 	mrs	r0, CPSR
 c10145c:	e3c00040 	bic	r0, r0, #64	; 0x40
 c101460:	e3800040 	orr	r0, r0, #64	; 0x40
 c101464:	e121f000 	msr	CPSR_c, r0

	port_init();
 c101468:	eb000014 	bl	c1014c0 <port_init>
	segs_init();
 c10146c:	ebffff8a 	bl	c10129c <segs_init>
	uart0_init();
 c101470:	eb000591 	bl	c102abc <uart0_init>

	show_sys_info();
 c101474:	eb00025f 	bl	c101df8 <show_sys_info>
}
 c101478:	e24bd00c 	sub	sp, fp, #12
 c10147c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101480:	e12fff1e 	bx	lr
 c101484:	01d30000 	.word	0x01d30000
 c101488:	01e0000c 	.word	0x01e0000c
 c10148c:	01d8000c 	.word	0x01d8000c
 c101490:	00000fff 	.word	0x00000fff
 c101494:	00038021 	.word	0x00038021
 c101498:	01d80008 	.word	0x01d80008
 c10149c:	01d80004 	.word	0x01d80004
 c1014a0:	00007ff8 	.word	0x00007ff8
 c1014a4:	01e00014 	.word	0x01e00014
 c1014a8:	00001f1b 	.word	0x00001f1b
 c1014ac:	01e00010 	.word	0x01e00010
 c1014b0:	1b1b1b1b 	.word	0x1b1b1b1b
 c1014b4:	01e00008 	.word	0x01e00008
 c1014b8:	01d20054 	.word	0x01d20054
 c1014bc:	01e00024 	.word	0x01e00024

0c1014c0 <port_init>:

static void port_init(void) {
 c1014c0:	e1a0c00d 	mov	ip, sp
 c1014c4:	e92dd800 	push	{fp, ip, lr, pc}
 c1014c8:	e24cb004 	sub	fp, ip, #4
	PDATA = ~0;
 c1014cc:	e59f3100 	ldr	r3, [pc, #256]	; c1015d4 <port_init+0x114>
 c1014d0:	e3e02000 	mvn	r2, #0
 c1014d4:	e5832000 	str	r2, [r3]
	PCONA = 0xfe;
 c1014d8:	e59f30f8 	ldr	r3, [pc, #248]	; c1015d8 <port_init+0x118>
 c1014dc:	e3a020fe 	mov	r2, #254	; 0xfe
 c1014e0:	e5832000 	str	r2, [r3]

	PDATB = ~0;
 c1014e4:	e59f30f0 	ldr	r3, [pc, #240]	; c1015dc <port_init+0x11c>
 c1014e8:	e3e02000 	mvn	r2, #0
 c1014ec:	e5832000 	str	r2, [r3]
	PCONB = 0x14f;
 c1014f0:	e59f30e8 	ldr	r3, [pc, #232]	; c1015e0 <port_init+0x120>
 c1014f4:	e59f20e8 	ldr	r2, [pc, #232]	; c1015e4 <port_init+0x124>
 c1014f8:	e5832000 	str	r2, [r3]

	PDATC = ~0;
 c1014fc:	e59f30e4 	ldr	r3, [pc, #228]	; c1015e8 <port_init+0x128>
 c101500:	e3e02000 	mvn	r2, #0
 c101504:	e5832000 	str	r2, [r3]
	PCONC = 0x5ff555ff;
 c101508:	e59f30dc 	ldr	r3, [pc, #220]	; c1015ec <port_init+0x12c>
 c10150c:	e59f20dc 	ldr	r2, [pc, #220]	; c1015f0 <port_init+0x130>
 c101510:	e5832000 	str	r2, [r3]
	PUPC = 0x94fb;
 c101514:	e59f30d8 	ldr	r3, [pc, #216]	; c1015f4 <port_init+0x134>
 c101518:	e59f20d8 	ldr	r2, [pc, #216]	; c1015f8 <port_init+0x138>
 c10151c:	e5832000 	str	r2, [r3]

	PDATD = ~0;
 c101520:	e59f30d4 	ldr	r3, [pc, #212]	; c1015fc <port_init+0x13c>
 c101524:	e3e02000 	mvn	r2, #0
 c101528:	e5832000 	str	r2, [r3]
	PCOND = 0xaaaa;
 c10152c:	e59f30cc 	ldr	r3, [pc, #204]	; c101600 <port_init+0x140>
 c101530:	e59f20cc 	ldr	r2, [pc, #204]	; c101604 <port_init+0x144>
 c101534:	e5832000 	str	r2, [r3]
	PUPD = 0xff;
 c101538:	e59f30c8 	ldr	r3, [pc, #200]	; c101608 <port_init+0x148>
 c10153c:	e3a020ff 	mov	r2, #255	; 0xff
 c101540:	e5832000 	str	r2, [r3]

	PDATE = ~0;
 c101544:	e59f30c0 	ldr	r3, [pc, #192]	; c10160c <port_init+0x14c>
 c101548:	e3e02000 	mvn	r2, #0
 c10154c:	e5832000 	str	r2, [r3]
	PCONE = 0x255a9;
 c101550:	e59f30b8 	ldr	r3, [pc, #184]	; c101610 <port_init+0x150>
 c101554:	e59f20b8 	ldr	r2, [pc, #184]	; c101614 <port_init+0x154>
 c101558:	e5832000 	str	r2, [r3]
	PUPE = 0xfb;
 c10155c:	e59f30b4 	ldr	r3, [pc, #180]	; c101618 <port_init+0x158>
 c101560:	e3a020fb 	mov	r2, #251	; 0xfb
 c101564:	e5832000 	str	r2, [r3]

	PDATF = ~0;
 c101568:	e59f30ac 	ldr	r3, [pc, #172]	; c10161c <port_init+0x15c>
 c10156c:	e3e02000 	mvn	r2, #0
 c101570:	e5832000 	str	r2, [r3]
	PCONF = 0x251a;
 c101574:	e59f30a4 	ldr	r3, [pc, #164]	; c101620 <port_init+0x160>
 c101578:	e59f20a4 	ldr	r2, [pc, #164]	; c101624 <port_init+0x164>
 c10157c:	e5832000 	str	r2, [r3]
	PUPF = 0x74;
 c101580:	e59f30a0 	ldr	r3, [pc, #160]	; c101628 <port_init+0x168>
 c101584:	e3a02074 	mov	r2, #116	; 0x74
 c101588:	e5832000 	str	r2, [r3]

	PDATG = ~0;
 c10158c:	e59f3098 	ldr	r3, [pc, #152]	; c10162c <port_init+0x16c>
 c101590:	e3e02000 	mvn	r2, #0
 c101594:	e5832000 	str	r2, [r3]
	PCONG = 0xf5ff;
 c101598:	e59f3090 	ldr	r3, [pc, #144]	; c101630 <port_init+0x170>
 c10159c:	e59f2090 	ldr	r2, [pc, #144]	; c101634 <port_init+0x174>
 c1015a0:	e5832000 	str	r2, [r3]
	PUPG = 0x30;
 c1015a4:	e59f308c 	ldr	r3, [pc, #140]	; c101638 <port_init+0x178>
 c1015a8:	e3a02030 	mov	r2, #48	; 0x30
 c1015ac:	e5832000 	str	r2, [r3]

	SPUCR = 0x7;
 c1015b0:	e59f3084 	ldr	r3, [pc, #132]	; c10163c <port_init+0x17c>
 c1015b4:	e3a02007 	mov	r2, #7
 c1015b8:	e5832000 	str	r2, [r3]

	EXTINT = 0x22000220;
 c1015bc:	e59f307c 	ldr	r3, [pc, #124]	; c101640 <port_init+0x180>
 c1015c0:	e59f207c 	ldr	r2, [pc, #124]	; c101644 <port_init+0x184>
 c1015c4:	e5832000 	str	r2, [r3]
}
 c1015c8:	e24bd00c 	sub	sp, fp, #12
 c1015cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1015d0:	e12fff1e 	bx	lr
 c1015d4:	01d20004 	.word	0x01d20004
 c1015d8:	01d20000 	.word	0x01d20000
 c1015dc:	01d2000c 	.word	0x01d2000c
 c1015e0:	01d20008 	.word	0x01d20008
 c1015e4:	0000014f 	.word	0x0000014f
 c1015e8:	01d20014 	.word	0x01d20014
 c1015ec:	01d20010 	.word	0x01d20010
 c1015f0:	5ff555ff 	.word	0x5ff555ff
 c1015f4:	01d20018 	.word	0x01d20018
 c1015f8:	000094fb 	.word	0x000094fb
 c1015fc:	01d20020 	.word	0x01d20020
 c101600:	01d2001c 	.word	0x01d2001c
 c101604:	0000aaaa 	.word	0x0000aaaa
 c101608:	01d20024 	.word	0x01d20024
 c10160c:	01d2002c 	.word	0x01d2002c
 c101610:	01d20028 	.word	0x01d20028
 c101614:	000255a9 	.word	0x000255a9
 c101618:	01d20030 	.word	0x01d20030
 c10161c:	01d20038 	.word	0x01d20038
 c101620:	01d20034 	.word	0x01d20034
 c101624:	0000251a 	.word	0x0000251a
 c101628:	01d2003c 	.word	0x01d2003c
 c10162c:	01d20044 	.word	0x01d20044
 c101630:	01d20040 	.word	0x01d20040
 c101634:	0000f5ff 	.word	0x0000f5ff
 c101638:	01d20048 	.word	0x01d20048
 c10163c:	01d2004c 	.word	0x01d2004c
 c101640:	01d20050 	.word	0x01d20050
 c101644:	22000220 	.word	0x22000220

0c101648 <install_dummy_isr>:
//A LO MEJOR EL ORDEN ESTA MAL
static void install_dummy_isr(void) {
 c101648:	e1a0c00d 	mov	ip, sp
 c10164c:	e92dd800 	push	{fp, ip, lr, pc}
 c101650:	e24cb004 	sub	fp, ip, #4
	pISR_UNDEF = (uint32) isr_UNDEF_dummy;
 c101654:	e59f3184 	ldr	r3, [pc, #388]	; c1017e0 <install_dummy_isr+0x198>
 c101658:	e59f2184 	ldr	r2, [pc, #388]	; c1017e4 <install_dummy_isr+0x19c>
 c10165c:	e5832000 	str	r2, [r3]
	pISR_SWI = (uint32) isr_SWI_dummy;
 c101660:	e59f3180 	ldr	r3, [pc, #384]	; c1017e8 <install_dummy_isr+0x1a0>
 c101664:	e59f2180 	ldr	r2, [pc, #384]	; c1017ec <install_dummy_isr+0x1a4>
 c101668:	e5832000 	str	r2, [r3]
	pISR_PABORT = (uint32) isr_PABORT_dummy;
 c10166c:	e59f317c 	ldr	r3, [pc, #380]	; c1017f0 <install_dummy_isr+0x1a8>
 c101670:	e59f217c 	ldr	r2, [pc, #380]	; c1017f4 <install_dummy_isr+0x1ac>
 c101674:	e5832000 	str	r2, [r3]
	pISR_DABORT = (uint32) isr_DABORT_dummy;
 c101678:	e59f3178 	ldr	r3, [pc, #376]	; c1017f8 <install_dummy_isr+0x1b0>
 c10167c:	e59f2178 	ldr	r2, [pc, #376]	; c1017fc <install_dummy_isr+0x1b4>
 c101680:	e5832000 	str	r2, [r3]
	pISR_IRQ = (uint32) isr_IRQ_dummy;
 c101684:	e59f3174 	ldr	r3, [pc, #372]	; c101800 <install_dummy_isr+0x1b8>
 c101688:	e59f2174 	ldr	r2, [pc, #372]	; c101804 <install_dummy_isr+0x1bc>
 c10168c:	e5832000 	str	r2, [r3]
	pISR_FIQ = (uint32) isr_FIQ_dummy;
 c101690:	e59f3170 	ldr	r3, [pc, #368]	; c101808 <install_dummy_isr+0x1c0>
 c101694:	e59f2170 	ldr	r2, [pc, #368]	; c10180c <install_dummy_isr+0x1c4>
 c101698:	e5832000 	str	r2, [r3]
	pISR_ADC = (uint32) isr_ADC_dummy;
 c10169c:	e59f316c 	ldr	r3, [pc, #364]	; c101810 <install_dummy_isr+0x1c8>
 c1016a0:	e59f216c 	ldr	r2, [pc, #364]	; c101814 <install_dummy_isr+0x1cc>
 c1016a4:	e5832000 	str	r2, [r3]
	pISR_RTC = (uint32) isr_RTC_dummy;
 c1016a8:	e59f3168 	ldr	r3, [pc, #360]	; c101818 <install_dummy_isr+0x1d0>
 c1016ac:	e59f2168 	ldr	r2, [pc, #360]	; c10181c <install_dummy_isr+0x1d4>
 c1016b0:	e5832000 	str	r2, [r3]
	pISR_UTXD1 = (uint32) isr_UTXD1_dummy;
 c1016b4:	e59f3164 	ldr	r3, [pc, #356]	; c101820 <install_dummy_isr+0x1d8>
 c1016b8:	e59f2164 	ldr	r2, [pc, #356]	; c101824 <install_dummy_isr+0x1dc>
 c1016bc:	e5832000 	str	r2, [r3]
	pISR_UTXD0 = (uint32) isr_UTXD0_dummy;
 c1016c0:	e59f3160 	ldr	r3, [pc, #352]	; c101828 <install_dummy_isr+0x1e0>
 c1016c4:	e59f2160 	ldr	r2, [pc, #352]	; c10182c <install_dummy_isr+0x1e4>
 c1016c8:	e5832000 	str	r2, [r3]
	pISR_SIO = (uint32) isr_SIO_dummy;
 c1016cc:	e59f315c 	ldr	r3, [pc, #348]	; c101830 <install_dummy_isr+0x1e8>
 c1016d0:	e59f215c 	ldr	r2, [pc, #348]	; c101834 <install_dummy_isr+0x1ec>
 c1016d4:	e5832000 	str	r2, [r3]
	pISR_IIC = (uint32) isr_IIC_dummy;
 c1016d8:	e59f3158 	ldr	r3, [pc, #344]	; c101838 <install_dummy_isr+0x1f0>
 c1016dc:	e59f2158 	ldr	r2, [pc, #344]	; c10183c <install_dummy_isr+0x1f4>
 c1016e0:	e5832000 	str	r2, [r3]
	pISR_URXD1 = (uint32) isr_URXD1_dummy;
 c1016e4:	e59f3154 	ldr	r3, [pc, #340]	; c101840 <install_dummy_isr+0x1f8>
 c1016e8:	e59f2154 	ldr	r2, [pc, #340]	; c101844 <install_dummy_isr+0x1fc>
 c1016ec:	e5832000 	str	r2, [r3]
	pISR_URXD0 = (uint32) isr_URXD0_dummy;
 c1016f0:	e59f3150 	ldr	r3, [pc, #336]	; c101848 <install_dummy_isr+0x200>
 c1016f4:	e59f2150 	ldr	r2, [pc, #336]	; c10184c <install_dummy_isr+0x204>
 c1016f8:	e5832000 	str	r2, [r3]
	pISR_TIMER5 = (uint32) isr_TIMER5_dummy;
 c1016fc:	e59f314c 	ldr	r3, [pc, #332]	; c101850 <install_dummy_isr+0x208>
 c101700:	e59f214c 	ldr	r2, [pc, #332]	; c101854 <install_dummy_isr+0x20c>
 c101704:	e5832000 	str	r2, [r3]
	pISR_TIMER4 = (uint32) isr_TIMER4_dummy;
 c101708:	e59f3148 	ldr	r3, [pc, #328]	; c101858 <install_dummy_isr+0x210>
 c10170c:	e59f2148 	ldr	r2, [pc, #328]	; c10185c <install_dummy_isr+0x214>
 c101710:	e5832000 	str	r2, [r3]
	pISR_TIMER3 = (uint32) isr_TIMER3_dummy;
 c101714:	e59f3144 	ldr	r3, [pc, #324]	; c101860 <install_dummy_isr+0x218>
 c101718:	e59f2144 	ldr	r2, [pc, #324]	; c101864 <install_dummy_isr+0x21c>
 c10171c:	e5832000 	str	r2, [r3]
	pISR_TIMER2 = (uint32) isr_TIMER2_dummy;
 c101720:	e59f3140 	ldr	r3, [pc, #320]	; c101868 <install_dummy_isr+0x220>
 c101724:	e59f2140 	ldr	r2, [pc, #320]	; c10186c <install_dummy_isr+0x224>
 c101728:	e5832000 	str	r2, [r3]
	pISR_TIMER1 = (uint32) isr_TIMER1_dummy;
 c10172c:	e59f313c 	ldr	r3, [pc, #316]	; c101870 <install_dummy_isr+0x228>
 c101730:	e59f213c 	ldr	r2, [pc, #316]	; c101874 <install_dummy_isr+0x22c>
 c101734:	e5832000 	str	r2, [r3]
	pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c101738:	e59f3138 	ldr	r3, [pc, #312]	; c101878 <install_dummy_isr+0x230>
 c10173c:	e59f2138 	ldr	r2, [pc, #312]	; c10187c <install_dummy_isr+0x234>
 c101740:	e5832000 	str	r2, [r3]
	pISR_UERR01 = (uint32) isr_UERR01_dummy;
 c101744:	e59f3134 	ldr	r3, [pc, #308]	; c101880 <install_dummy_isr+0x238>
 c101748:	e59f2134 	ldr	r2, [pc, #308]	; c101884 <install_dummy_isr+0x23c>
 c10174c:	e5832000 	str	r2, [r3]
	pISR_WDT = (uint32) isr_WDT_dummy;
 c101750:	e59f3130 	ldr	r3, [pc, #304]	; c101888 <install_dummy_isr+0x240>
 c101754:	e59f2130 	ldr	r2, [pc, #304]	; c10188c <install_dummy_isr+0x244>
 c101758:	e5832000 	str	r2, [r3]
	pISR_BDMA1 = (uint32) isr_BDMA1_dummy;
 c10175c:	e59f312c 	ldr	r3, [pc, #300]	; c101890 <install_dummy_isr+0x248>
 c101760:	e59f212c 	ldr	r2, [pc, #300]	; c101894 <install_dummy_isr+0x24c>
 c101764:	e5832000 	str	r2, [r3]
	pISR_BDMA0 = (uint32) isr_BDMA0_dummy;
 c101768:	e59f3128 	ldr	r3, [pc, #296]	; c101898 <install_dummy_isr+0x250>
 c10176c:	e59f2128 	ldr	r2, [pc, #296]	; c10189c <install_dummy_isr+0x254>
 c101770:	e5832000 	str	r2, [r3]
	pISR_ZDMA1 = (uint32) isr_ZDMA1_dummy;
 c101774:	e59f3124 	ldr	r3, [pc, #292]	; c1018a0 <install_dummy_isr+0x258>
 c101778:	e59f2124 	ldr	r2, [pc, #292]	; c1018a4 <install_dummy_isr+0x25c>
 c10177c:	e5832000 	str	r2, [r3]
	pISR_ZDMA0 = (uint32) isr_ZDMA0_dummy;
 c101780:	e59f3120 	ldr	r3, [pc, #288]	; c1018a8 <install_dummy_isr+0x260>
 c101784:	e59f2120 	ldr	r2, [pc, #288]	; c1018ac <install_dummy_isr+0x264>
 c101788:	e5832000 	str	r2, [r3]
	pISR_PB = (uint32) isr_PB_dummy;
 c10178c:	e59f311c 	ldr	r3, [pc, #284]	; c1018b0 <install_dummy_isr+0x268>
 c101790:	e59f211c 	ldr	r2, [pc, #284]	; c1018b4 <install_dummy_isr+0x26c>
 c101794:	e5832000 	str	r2, [r3]
	pISR_ETHERNET = (uint32) isr_ETHERNET_dummy;
 c101798:	e59f3118 	ldr	r3, [pc, #280]	; c1018b8 <install_dummy_isr+0x270>
 c10179c:	e59f2118 	ldr	r2, [pc, #280]	; c1018bc <install_dummy_isr+0x274>
 c1017a0:	e5832000 	str	r2, [r3]
	pISR_TICK = (uint32) isr_TICK_dummy;
 c1017a4:	e59f3114 	ldr	r3, [pc, #276]	; c1018c0 <install_dummy_isr+0x278>
 c1017a8:	e59f2114 	ldr	r2, [pc, #276]	; c1018c4 <install_dummy_isr+0x27c>
 c1017ac:	e5832000 	str	r2, [r3]
	pISR_TS = (uint32) isr_TS_dummy;
 c1017b0:	e59f3110 	ldr	r3, [pc, #272]	; c1018c8 <install_dummy_isr+0x280>
 c1017b4:	e59f2110 	ldr	r2, [pc, #272]	; c1018cc <install_dummy_isr+0x284>
 c1017b8:	e5832000 	str	r2, [r3]
	pISR_KEYPAD = (uint32) isr_KEYPAD_dummy;
 c1017bc:	e59f310c 	ldr	r3, [pc, #268]	; c1018d0 <install_dummy_isr+0x288>
 c1017c0:	e59f210c 	ldr	r2, [pc, #268]	; c1018d4 <install_dummy_isr+0x28c>
 c1017c4:	e5832000 	str	r2, [r3]
	pISR_USB = (uint32) isr_USB_dummy;
 c1017c8:	e59f3108 	ldr	r3, [pc, #264]	; c1018d8 <install_dummy_isr+0x290>
 c1017cc:	e59f2108 	ldr	r2, [pc, #264]	; c1018dc <install_dummy_isr+0x294>
 c1017d0:	e5832000 	str	r2, [r3]
}
 c1017d4:	e24bd00c 	sub	sp, fp, #12
 c1017d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1017dc:	e12fff1e 	bx	lr
 c1017e0:	0c7fff04 	.word	0x0c7fff04
 c1017e4:	0c10190c 	.word	0x0c10190c
 c1017e8:	0c7fff08 	.word	0x0c7fff08
 c1017ec:	0c1018e0 	.word	0x0c1018e0
 c1017f0:	0c7fff0c 	.word	0x0c7fff0c
 c1017f4:	0c101990 	.word	0x0c101990
 c1017f8:	0c7fff10 	.word	0x0c7fff10
 c1017fc:	0c1019bc 	.word	0x0c1019bc
 c101800:	0c7fff18 	.word	0x0c7fff18
 c101804:	0c101938 	.word	0x0c101938
 c101808:	0c7fff1c 	.word	0x0c7fff1c
 c10180c:	0c101964 	.word	0x0c101964
 c101810:	0c7fff20 	.word	0x0c7fff20
 c101814:	0c1019e8 	.word	0x0c1019e8
 c101818:	0c7fff24 	.word	0x0c7fff24
 c10181c:	0c101a10 	.word	0x0c101a10
 c101820:	0c7fff28 	.word	0x0c7fff28
 c101824:	0c101a38 	.word	0x0c101a38
 c101828:	0c7fff2c 	.word	0x0c7fff2c
 c10182c:	0c101a60 	.word	0x0c101a60
 c101830:	0c7fff30 	.word	0x0c7fff30
 c101834:	0c101a88 	.word	0x0c101a88
 c101838:	0c7fff34 	.word	0x0c7fff34
 c10183c:	0c101ab0 	.word	0x0c101ab0
 c101840:	0c7fff38 	.word	0x0c7fff38
 c101844:	0c101ad8 	.word	0x0c101ad8
 c101848:	0c7fff3c 	.word	0x0c7fff3c
 c10184c:	0c101b00 	.word	0x0c101b00
 c101850:	0c7fff40 	.word	0x0c7fff40
 c101854:	0c101b28 	.word	0x0c101b28
 c101858:	0c7fff44 	.word	0x0c7fff44
 c10185c:	0c101b50 	.word	0x0c101b50
 c101860:	0c7fff48 	.word	0x0c7fff48
 c101864:	0c101b78 	.word	0x0c101b78
 c101868:	0c7fff4c 	.word	0x0c7fff4c
 c10186c:	0c101ba0 	.word	0x0c101ba0
 c101870:	0c7fff50 	.word	0x0c7fff50
 c101874:	0c101bc8 	.word	0x0c101bc8
 c101878:	0c7fff54 	.word	0x0c7fff54
 c10187c:	0c101bf0 	.word	0x0c101bf0
 c101880:	0c7fff58 	.word	0x0c7fff58
 c101884:	0c101c18 	.word	0x0c101c18
 c101888:	0c7fff5c 	.word	0x0c7fff5c
 c10188c:	0c101c40 	.word	0x0c101c40
 c101890:	0c7fff60 	.word	0x0c7fff60
 c101894:	0c101c68 	.word	0x0c101c68
 c101898:	0c7fff64 	.word	0x0c7fff64
 c10189c:	0c101c90 	.word	0x0c101c90
 c1018a0:	0c7fff68 	.word	0x0c7fff68
 c1018a4:	0c101cb8 	.word	0x0c101cb8
 c1018a8:	0c7fff6c 	.word	0x0c7fff6c
 c1018ac:	0c101ce0 	.word	0x0c101ce0
 c1018b0:	0c7fff74 	.word	0x0c7fff74
 c1018b4:	0c101d30 	.word	0x0c101d30
 c1018b8:	0c7fff78 	.word	0x0c7fff78
 c1018bc:	0c101d58 	.word	0x0c101d58
 c1018c0:	0c7fff70 	.word	0x0c7fff70
 c1018c4:	0c101d08 	.word	0x0c101d08
 c1018c8:	0c7fff7c 	.word	0x0c7fff7c
 c1018cc:	0c101d80 	.word	0x0c101d80
 c1018d0:	0c7fff80 	.word	0x0c7fff80
 c1018d4:	0c101da8 	.word	0x0c101da8
 c1018d8:	0c7fff84 	.word	0x0c7fff84
 c1018dc:	0c101dd0 	.word	0x0c101dd0

0c1018e0 <isr_SWI_dummy>:
//NO SE SI SE PONE EN TODOS LOS SEGS 0X75
void isr_SWI_dummy(void) {
 c1018e0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1018e4:	e1a0c00d 	mov	ip, sp
 c1018e8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1018ec:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy");
 c1018f0:	e59f0010 	ldr	r0, [pc, #16]	; c101908 <isr_SWI_dummy+0x28>
 c1018f4:	eb0004b3 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c1018f8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1018fc:	e3a02075 	mov	r2, #117	; 0x75
 c101900:	e5c32000 	strb	r2, [r3]
	while (1);
 c101904:	eafffffe 	b	c101904 <isr_SWI_dummy+0x24>
 c101908:	0c104660 	.word	0x0c104660

0c10190c <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy(void) {
 c10190c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101910:	e1a0c00d 	mov	ip, sp
 c101914:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101918:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy");
 c10191c:	e59f0010 	ldr	r0, [pc, #16]	; c101934 <isr_UNDEF_dummy+0x28>
 c101920:	eb0004a8 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101924:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101928:	e3a02075 	mov	r2, #117	; 0x75
 c10192c:	e5c32000 	strb	r2, [r3]
	while (1);
 c101930:	eafffffe 	b	c101930 <isr_UNDEF_dummy+0x24>
 c101934:	0c10468c 	.word	0x0c10468c

0c101938 <isr_IRQ_dummy>:
}

void isr_IRQ_dummy(void) {
 c101938:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10193c:	e1a0c00d 	mov	ip, sp
 c101940:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101944:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy");
 c101948:	e59f0010 	ldr	r0, [pc, #16]	; c101960 <isr_IRQ_dummy+0x28>
 c10194c:	eb00049d 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101950:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101954:	e3a02075 	mov	r2, #117	; 0x75
 c101958:	e5c32000 	strb	r2, [r3]
	while (1);
 c10195c:	eafffffe 	b	c10195c <isr_IRQ_dummy+0x24>
 c101960:	0c1046bc 	.word	0x0c1046bc

0c101964 <isr_FIQ_dummy>:
}

void isr_FIQ_dummy(void) {
 c101964:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101968:	e1a0c00d 	mov	ip, sp
 c10196c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101970:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy");
 c101974:	e59f0010 	ldr	r0, [pc, #16]	; c10198c <isr_FIQ_dummy+0x28>
 c101978:	eb000492 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c10197c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101980:	e3a02075 	mov	r2, #117	; 0x75
 c101984:	e5c32000 	strb	r2, [r3]
	while (1);
 c101988:	eafffffe 	b	c101988 <isr_FIQ_dummy+0x24>
 c10198c:	0c1046e8 	.word	0x0c1046e8

0c101990 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy(void) {
 c101990:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101994:	e1a0c00d 	mov	ip, sp
 c101998:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10199c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy");
 c1019a0:	e59f0010 	ldr	r0, [pc, #16]	; c1019b8 <isr_PABORT_dummy+0x28>
 c1019a4:	eb000487 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c1019a8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1019ac:	e3a02075 	mov	r2, #117	; 0x75
 c1019b0:	e5c32000 	strb	r2, [r3]
	while (1);
 c1019b4:	eafffffe 	b	c1019b4 <isr_PABORT_dummy+0x24>
 c1019b8:	0c104714 	.word	0x0c104714

0c1019bc <isr_DABORT_dummy>:
}

void isr_DABORT_dummy(void) {
 c1019bc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1019c0:	e1a0c00d 	mov	ip, sp
 c1019c4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1019c8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy");
 c1019cc:	e59f0010 	ldr	r0, [pc, #16]	; c1019e4 <isr_DABORT_dummy+0x28>
 c1019d0:	eb00047c 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c1019d4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1019d8:	e3a02075 	mov	r2, #117	; 0x75
 c1019dc:	e5c32000 	strb	r2, [r3]
	while (1);
 c1019e0:	eafffffe 	b	c1019e0 <isr_DABORT_dummy+0x24>
 c1019e4:	0c104744 	.word	0x0c104744

0c1019e8 <isr_ADC_dummy>:
}

void isr_ADC_dummy(void) {
 c1019e8:	e1a0c00d 	mov	ip, sp
 c1019ec:	e92dd800 	push	{fp, ip, lr, pc}
 c1019f0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy");
 c1019f4:	e59f0010 	ldr	r0, [pc, #16]	; c101a0c <isr_ADC_dummy+0x24>
 c1019f8:	eb000472 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c1019fc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a00:	e3a02075 	mov	r2, #117	; 0x75
 c101a04:	e5c32000 	strb	r2, [r3]
	while (1);
 c101a08:	eafffffe 	b	c101a08 <isr_ADC_dummy+0x20>
 c101a0c:	0c104774 	.word	0x0c104774

0c101a10 <isr_RTC_dummy>:
}

void isr_RTC_dummy(void) {
 c101a10:	e1a0c00d 	mov	ip, sp
 c101a14:	e92dd800 	push	{fp, ip, lr, pc}
 c101a18:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy");
 c101a1c:	e59f0010 	ldr	r0, [pc, #16]	; c101a34 <isr_RTC_dummy+0x24>
 c101a20:	eb000468 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101a24:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a28:	e3a02075 	mov	r2, #117	; 0x75
 c101a2c:	e5c32000 	strb	r2, [r3]
	while (1);
 c101a30:	eafffffe 	b	c101a30 <isr_RTC_dummy+0x20>
 c101a34:	0c1047a0 	.word	0x0c1047a0

0c101a38 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy(void) {
 c101a38:	e1a0c00d 	mov	ip, sp
 c101a3c:	e92dd800 	push	{fp, ip, lr, pc}
 c101a40:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy");
 c101a44:	e59f0010 	ldr	r0, [pc, #16]	; c101a5c <isr_UTXD1_dummy+0x24>
 c101a48:	eb00045e 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101a4c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a50:	e3a02075 	mov	r2, #117	; 0x75
 c101a54:	e5c32000 	strb	r2, [r3]
	while (1);
 c101a58:	eafffffe 	b	c101a58 <isr_UTXD1_dummy+0x20>
 c101a5c:	0c1047cc 	.word	0x0c1047cc

0c101a60 <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy(void) {
 c101a60:	e1a0c00d 	mov	ip, sp
 c101a64:	e92dd800 	push	{fp, ip, lr, pc}
 c101a68:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy");
 c101a6c:	e59f0010 	ldr	r0, [pc, #16]	; c101a84 <isr_UTXD0_dummy+0x24>
 c101a70:	eb000454 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101a74:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a78:	e3a02075 	mov	r2, #117	; 0x75
 c101a7c:	e5c32000 	strb	r2, [r3]
	while (1);
 c101a80:	eafffffe 	b	c101a80 <isr_UTXD0_dummy+0x20>
 c101a84:	0c1047fc 	.word	0x0c1047fc

0c101a88 <isr_SIO_dummy>:
}

void isr_SIO_dummy(void) {
 c101a88:	e1a0c00d 	mov	ip, sp
 c101a8c:	e92dd800 	push	{fp, ip, lr, pc}
 c101a90:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy");
 c101a94:	e59f0010 	ldr	r0, [pc, #16]	; c101aac <isr_SIO_dummy+0x24>
 c101a98:	eb00044a 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101a9c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101aa0:	e3a02075 	mov	r2, #117	; 0x75
 c101aa4:	e5c32000 	strb	r2, [r3]
	while (1);
 c101aa8:	eafffffe 	b	c101aa8 <isr_SIO_dummy+0x20>
 c101aac:	0c10482c 	.word	0x0c10482c

0c101ab0 <isr_IIC_dummy>:
}

void isr_IIC_dummy(void) {
 c101ab0:	e1a0c00d 	mov	ip, sp
 c101ab4:	e92dd800 	push	{fp, ip, lr, pc}
 c101ab8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy");
 c101abc:	e59f0010 	ldr	r0, [pc, #16]	; c101ad4 <isr_IIC_dummy+0x24>
 c101ac0:	eb000440 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101ac4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ac8:	e3a02075 	mov	r2, #117	; 0x75
 c101acc:	e5c32000 	strb	r2, [r3]
	while (1);
 c101ad0:	eafffffe 	b	c101ad0 <isr_IIC_dummy+0x20>
 c101ad4:	0c104858 	.word	0x0c104858

0c101ad8 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy(void) {
 c101ad8:	e1a0c00d 	mov	ip, sp
 c101adc:	e92dd800 	push	{fp, ip, lr, pc}
 c101ae0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD1_dummy");
 c101ae4:	e59f0010 	ldr	r0, [pc, #16]	; c101afc <isr_URXD1_dummy+0x24>
 c101ae8:	eb000436 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101aec:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101af0:	e3a02075 	mov	r2, #117	; 0x75
 c101af4:	e5c32000 	strb	r2, [r3]
	while (1);
 c101af8:	eafffffe 	b	c101af8 <isr_URXD1_dummy+0x20>
 c101afc:	0c104884 	.word	0x0c104884

0c101b00 <isr_URXD0_dummy>:
}

void isr_URXD0_dummy(void) {
 c101b00:	e1a0c00d 	mov	ip, sp
 c101b04:	e92dd800 	push	{fp, ip, lr, pc}
 c101b08:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD0_dummy");
 c101b0c:	e59f0010 	ldr	r0, [pc, #16]	; c101b24 <isr_URXD0_dummy+0x24>
 c101b10:	eb00042c 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101b14:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b18:	e3a02075 	mov	r2, #117	; 0x75
 c101b1c:	e5c32000 	strb	r2, [r3]
	while (1);
 c101b20:	eafffffe 	b	c101b20 <isr_URXD0_dummy+0x20>
 c101b24:	0c1048b4 	.word	0x0c1048b4

0c101b28 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy(void) {
 c101b28:	e1a0c00d 	mov	ip, sp
 c101b2c:	e92dd800 	push	{fp, ip, lr, pc}
 c101b30:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy");
 c101b34:	e59f0010 	ldr	r0, [pc, #16]	; c101b4c <isr_TIMER5_dummy+0x24>
 c101b38:	eb000422 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101b3c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b40:	e3a02075 	mov	r2, #117	; 0x75
 c101b44:	e5c32000 	strb	r2, [r3]
	while (1);
 c101b48:	eafffffe 	b	c101b48 <isr_TIMER5_dummy+0x20>
 c101b4c:	0c1048e4 	.word	0x0c1048e4

0c101b50 <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy(void) {
 c101b50:	e1a0c00d 	mov	ip, sp
 c101b54:	e92dd800 	push	{fp, ip, lr, pc}
 c101b58:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy");
 c101b5c:	e59f0010 	ldr	r0, [pc, #16]	; c101b74 <isr_TIMER4_dummy+0x24>
 c101b60:	eb000418 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101b64:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b68:	e3a02075 	mov	r2, #117	; 0x75
 c101b6c:	e5c32000 	strb	r2, [r3]
	while (1);
 c101b70:	eafffffe 	b	c101b70 <isr_TIMER4_dummy+0x20>
 c101b74:	0c104914 	.word	0x0c104914

0c101b78 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy(void) {
 c101b78:	e1a0c00d 	mov	ip, sp
 c101b7c:	e92dd800 	push	{fp, ip, lr, pc}
 c101b80:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy");
 c101b84:	e59f0010 	ldr	r0, [pc, #16]	; c101b9c <isr_TIMER3_dummy+0x24>
 c101b88:	eb00040e 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101b8c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b90:	e3a02075 	mov	r2, #117	; 0x75
 c101b94:	e5c32000 	strb	r2, [r3]
	while (1);
 c101b98:	eafffffe 	b	c101b98 <isr_TIMER3_dummy+0x20>
 c101b9c:	0c104944 	.word	0x0c104944

0c101ba0 <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy(void) {
 c101ba0:	e1a0c00d 	mov	ip, sp
 c101ba4:	e92dd800 	push	{fp, ip, lr, pc}
 c101ba8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c101bac:	e59f0010 	ldr	r0, [pc, #16]	; c101bc4 <isr_TIMER2_dummy+0x24>
 c101bb0:	eb000404 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101bb4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101bb8:	e3a02075 	mov	r2, #117	; 0x75
 c101bbc:	e5c32000 	strb	r2, [r3]
	while (1);
 c101bc0:	eafffffe 	b	c101bc0 <isr_TIMER2_dummy+0x20>
 c101bc4:	0c104974 	.word	0x0c104974

0c101bc8 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy(void) {
 c101bc8:	e1a0c00d 	mov	ip, sp
 c101bcc:	e92dd800 	push	{fp, ip, lr, pc}
 c101bd0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c101bd4:	e59f0010 	ldr	r0, [pc, #16]	; c101bec <isr_TIMER1_dummy+0x24>
 c101bd8:	eb0003fa 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101bdc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101be0:	e3a02075 	mov	r2, #117	; 0x75
 c101be4:	e5c32000 	strb	r2, [r3]
	while (1);
 c101be8:	eafffffe 	b	c101be8 <isr_TIMER1_dummy+0x20>
 c101bec:	0c104974 	.word	0x0c104974

0c101bf0 <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy(void) {
 c101bf0:	e1a0c00d 	mov	ip, sp
 c101bf4:	e92dd800 	push	{fp, ip, lr, pc}
 c101bf8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy");
 c101bfc:	e59f0010 	ldr	r0, [pc, #16]	; c101c14 <isr_TIMER0_dummy+0x24>
 c101c00:	eb0003f0 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101c04:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c08:	e3a02075 	mov	r2, #117	; 0x75
 c101c0c:	e5c32000 	strb	r2, [r3]
	while (1);
 c101c10:	eafffffe 	b	c101c10 <isr_TIMER0_dummy+0x20>
 c101c14:	0c1049a4 	.word	0x0c1049a4

0c101c18 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy(void) {
 c101c18:	e1a0c00d 	mov	ip, sp
 c101c1c:	e92dd800 	push	{fp, ip, lr, pc}
 c101c20:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy");
 c101c24:	e59f0010 	ldr	r0, [pc, #16]	; c101c3c <isr_UERR01_dummy+0x24>
 c101c28:	eb0003e6 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101c2c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c30:	e3a02075 	mov	r2, #117	; 0x75
 c101c34:	e5c32000 	strb	r2, [r3]
	while (1);
 c101c38:	eafffffe 	b	c101c38 <isr_UERR01_dummy+0x20>
 c101c3c:	0c1049d4 	.word	0x0c1049d4

0c101c40 <isr_WDT_dummy>:
}

void isr_WDT_dummy(void) {
 c101c40:	e1a0c00d 	mov	ip, sp
 c101c44:	e92dd800 	push	{fp, ip, lr, pc}
 c101c48:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy");
 c101c4c:	e59f0010 	ldr	r0, [pc, #16]	; c101c64 <isr_WDT_dummy+0x24>
 c101c50:	eb0003dc 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101c54:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c58:	e3a02075 	mov	r2, #117	; 0x75
 c101c5c:	e5c32000 	strb	r2, [r3]
	while (1);
 c101c60:	eafffffe 	b	c101c60 <isr_WDT_dummy+0x20>
 c101c64:	0c104a04 	.word	0x0c104a04

0c101c68 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy(void) {
 c101c68:	e1a0c00d 	mov	ip, sp
 c101c6c:	e92dd800 	push	{fp, ip, lr, pc}
 c101c70:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy");
 c101c74:	e59f0010 	ldr	r0, [pc, #16]	; c101c8c <isr_BDMA1_dummy+0x24>
 c101c78:	eb0003d2 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101c7c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c80:	e3a02075 	mov	r2, #117	; 0x75
 c101c84:	e5c32000 	strb	r2, [r3]
	while (1);
 c101c88:	eafffffe 	b	c101c88 <isr_BDMA1_dummy+0x20>
 c101c8c:	0c104a30 	.word	0x0c104a30

0c101c90 <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy(void) {
 c101c90:	e1a0c00d 	mov	ip, sp
 c101c94:	e92dd800 	push	{fp, ip, lr, pc}
 c101c98:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy");
 c101c9c:	e59f0010 	ldr	r0, [pc, #16]	; c101cb4 <isr_BDMA0_dummy+0x24>
 c101ca0:	eb0003c8 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101ca4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ca8:	e3a02075 	mov	r2, #117	; 0x75
 c101cac:	e5c32000 	strb	r2, [r3]
	while (1);
 c101cb0:	eafffffe 	b	c101cb0 <isr_BDMA0_dummy+0x20>
 c101cb4:	0c104a60 	.word	0x0c104a60

0c101cb8 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy(void) {
 c101cb8:	e1a0c00d 	mov	ip, sp
 c101cbc:	e92dd800 	push	{fp, ip, lr, pc}
 c101cc0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy");
 c101cc4:	e59f0010 	ldr	r0, [pc, #16]	; c101cdc <isr_ZDMA1_dummy+0x24>
 c101cc8:	eb0003be 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101ccc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101cd0:	e3a02075 	mov	r2, #117	; 0x75
 c101cd4:	e5c32000 	strb	r2, [r3]
	while (1);
 c101cd8:	eafffffe 	b	c101cd8 <isr_ZDMA1_dummy+0x20>
 c101cdc:	0c104a90 	.word	0x0c104a90

0c101ce0 <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy(void) {
 c101ce0:	e1a0c00d 	mov	ip, sp
 c101ce4:	e92dd800 	push	{fp, ip, lr, pc}
 c101ce8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy");
 c101cec:	e59f0010 	ldr	r0, [pc, #16]	; c101d04 <isr_ZDMA0_dummy+0x24>
 c101cf0:	eb0003b4 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101cf4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101cf8:	e3a02075 	mov	r2, #117	; 0x75
 c101cfc:	e5c32000 	strb	r2, [r3]
	while (1);
 c101d00:	eafffffe 	b	c101d00 <isr_ZDMA0_dummy+0x20>
 c101d04:	0c104ac0 	.word	0x0c104ac0

0c101d08 <isr_TICK_dummy>:
}

void isr_TICK_dummy(void) {
 c101d08:	e1a0c00d 	mov	ip, sp
 c101d0c:	e92dd800 	push	{fp, ip, lr, pc}
 c101d10:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy");
 c101d14:	e59f0010 	ldr	r0, [pc, #16]	; c101d2c <isr_TICK_dummy+0x24>
 c101d18:	eb0003aa 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101d1c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d20:	e3a02075 	mov	r2, #117	; 0x75
 c101d24:	e5c32000 	strb	r2, [r3]
	while (1);
 c101d28:	eafffffe 	b	c101d28 <isr_TICK_dummy+0x20>
 c101d2c:	0c104af0 	.word	0x0c104af0

0c101d30 <isr_PB_dummy>:
}

void isr_PB_dummy(void) {
 c101d30:	e1a0c00d 	mov	ip, sp
 c101d34:	e92dd800 	push	{fp, ip, lr, pc}
 c101d38:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PB_dummy");
 c101d3c:	e59f0010 	ldr	r0, [pc, #16]	; c101d54 <isr_PB_dummy+0x24>
 c101d40:	eb0003a0 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101d44:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d48:	e3a02075 	mov	r2, #117	; 0x75
 c101d4c:	e5c32000 	strb	r2, [r3]
	while (1);
 c101d50:	eafffffe 	b	c101d50 <isr_PB_dummy+0x20>
 c101d54:	0c104b20 	.word	0x0c104b20

0c101d58 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy(void) {
 c101d58:	e1a0c00d 	mov	ip, sp
 c101d5c:	e92dd800 	push	{fp, ip, lr, pc}
 c101d60:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy");
 c101d64:	e59f0010 	ldr	r0, [pc, #16]	; c101d7c <isr_ETHERNET_dummy+0x24>
 c101d68:	eb000396 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101d6c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d70:	e3a02075 	mov	r2, #117	; 0x75
 c101d74:	e5c32000 	strb	r2, [r3]
	while (1);
 c101d78:	eafffffe 	b	c101d78 <isr_ETHERNET_dummy+0x20>
 c101d7c:	0c104b4c 	.word	0x0c104b4c

0c101d80 <isr_TS_dummy>:
}

void isr_TS_dummy(void) {
 c101d80:	e1a0c00d 	mov	ip, sp
 c101d84:	e92dd800 	push	{fp, ip, lr, pc}
 c101d88:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TS_dummy");
 c101d8c:	e59f0010 	ldr	r0, [pc, #16]	; c101da4 <isr_TS_dummy+0x24>
 c101d90:	eb00038c 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101d94:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d98:	e3a02075 	mov	r2, #117	; 0x75
 c101d9c:	e5c32000 	strb	r2, [r3]
	while (1);
 c101da0:	eafffffe 	b	c101da0 <isr_TS_dummy+0x20>
 c101da4:	0c104b80 	.word	0x0c104b80

0c101da8 <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy(void) {
 c101da8:	e1a0c00d 	mov	ip, sp
 c101dac:	e92dd800 	push	{fp, ip, lr, pc}
 c101db0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy");
 c101db4:	e59f0010 	ldr	r0, [pc, #16]	; c101dcc <isr_KEYPAD_dummy+0x24>
 c101db8:	eb000382 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101dbc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101dc0:	e3a02075 	mov	r2, #117	; 0x75
 c101dc4:	e5c32000 	strb	r2, [r3]
	while (1);
 c101dc8:	eafffffe 	b	c101dc8 <isr_KEYPAD_dummy+0x20>
 c101dcc:	0c104bac 	.word	0x0c104bac

0c101dd0 <isr_USB_dummy>:
}

void isr_USB_dummy(void) {
 c101dd0:	e1a0c00d 	mov	ip, sp
 c101dd4:	e92dd800 	push	{fp, ip, lr, pc}
 c101dd8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_USB_dummy");
 c101ddc:	e59f0010 	ldr	r0, [pc, #16]	; c101df4 <isr_USB_dummy+0x24>
 c101de0:	eb000378 	bl	c102bc8 <uart0_puts>
	SEGS = 0x75;
 c101de4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101de8:	e3a02075 	mov	r2, #117	; 0x75
 c101dec:	e5c32000 	strb	r2, [r3]
	while (1);
 c101df0:	eafffffe 	b	c101df0 <isr_USB_dummy+0x20>
 c101df4:	0c104bdc 	.word	0x0c104bdc

0c101df8 <show_sys_info>:
}
//NO SE QUE HAY QUE PONER AQUI
static void show_sys_info(void) {
 c101df8:	e1a0c00d 	mov	ip, sp
 c101dfc:	e92dd800 	push	{fp, ip, lr, pc}
 c101e00:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n Choriso");
 c101e04:	e59f000c 	ldr	r0, [pc, #12]	; c101e18 <show_sys_info+0x20>
 c101e08:	eb00036e 	bl	c102bc8 <uart0_puts>
}
 c101e0c:	e24bd00c 	sub	sp, fp, #12
 c101e10:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101e14:	e12fff1e 	bx	lr
 c101e18:	0c104c08 	.word	0x0c104c08

0c101e1c <sleep>:

inline void sleep(void) {
 c101e1c:	e1a0c00d 	mov	ip, sp
 c101e20:	e92dd800 	push	{fp, ip, lr, pc}
 c101e24:	e24cb004 	sub	fp, ip, #4
	CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c101e28:	e59f3018 	ldr	r3, [pc, #24]	; c101e48 <sleep+0x2c>
 c101e2c:	e59f2014 	ldr	r2, [pc, #20]	; c101e48 <sleep+0x2c>
 c101e30:	e5922000 	ldr	r2, [r2]
 c101e34:	e3822004 	orr	r2, r2, #4
 c101e38:	e5832000 	str	r2, [r3]
}
 c101e3c:	e24bd00c 	sub	sp, fp, #12
 c101e40:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101e44:	e12fff1e 	bx	lr
 c101e48:	01d80004 	.word	0x01d80004

0c101e4c <sys_recovery>:

static void sys_recovery(void) {
 c101e4c:	e1a0c00d 	mov	ip, sp
 c101e50:	e92dd800 	push	{fp, ip, lr, pc}
 c101e54:	e24cb004 	sub	fp, ip, #4
 c101e58:	e24dd018 	sub	sp, sp, #24
uint8 mode;
uint32 sp, fp;
uint32 *addrSrc, *addrDst;
uint32 diffStacks;

asm volatile ( "str sp, %0" : "=m" (sp) : : );
 c101e5c:	e50bd01c 	str	sp, [fp, #-28]	; 0xffffffe4
    // lee el puntero a la cima de la pila de excepción (SP)
asm volatile ( "str fp, %0" : "=m" (fp) : : );
 c101e60:	e50bb020 	str	fp, [fp, #-32]	; 0xffffffe0
 // lee el puntero al marco de activación (FP) de sys_recovery() en la pila de excepción

GET_OPMODE(&mode);    // lee el modo de ejecución del procesador
 c101e64:	e10f0000 	mrs	r0, CPSR
 c101e68:	e200001f 	and	r0, r0, #31
 c101e6c:	e54b0015 	strb	r0, [fp, #-21]	; 0xffffffeb
switch (mode) {
 c101e70:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101e74:	e2433011 	sub	r3, r3, #17
 c101e78:	e353000a 	cmp	r3, #10
 c101e7c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c101e80:	ea00001e 	b	c101f00 <sys_recovery+0xb4>
 c101e84:	0c101ec4 	.word	0x0c101ec4
 c101e88:	0c101eb0 	.word	0x0c101eb0
 c101e8c:	0c101f00 	.word	0x0c101f00
 c101e90:	0c101f00 	.word	0x0c101f00
 c101e94:	0c101f00 	.word	0x0c101f00
 c101e98:	0c101f00 	.word	0x0c101f00
 c101e9c:	0c101ed8 	.word	0x0c101ed8
 c101ea0:	0c101f00 	.word	0x0c101f00
 c101ea4:	0c101f00 	.word	0x0c101f00
 c101ea8:	0c101f00 	.word	0x0c101f00
 c101eac:	0c101eec 	.word	0x0c101eec
case IRQMODE:
diffStacks = IRQSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila IRQ y la SVC
 c101eb0:	e3a03c03 	mov	r3, #768	; 0x300
 c101eb4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) IRQSTACK;         // base de la pila IRQ
 c101eb8:	e59f3198 	ldr	r3, [pc, #408]	; c102058 <sys_recovery+0x20c>
 c101ebc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c101ec0:	ea00000f 	b	c101f04 <sys_recovery+0xb8>
case FIQMODE:
diffStacks = FIQSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila FIQ y la SVC
 c101ec4:	e3a03b01 	mov	r3, #1024	; 0x400
 c101ec8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) FIQSTACK;         // base de la pila FIQ
 c101ecc:	e59f3188 	ldr	r3, [pc, #392]	; c10205c <sys_recovery+0x210>
 c101ed0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c101ed4:	ea00000a 	b	c101f04 <sys_recovery+0xb8>
case ABTMODE:
diffStacks = ABTSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila ABT y la SVC
 c101ed8:	e3a03c02 	mov	r3, #512	; 0x200
 c101edc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) ABTSTACK;         // base de la pila ABT
 c101ee0:	e59f3178 	ldr	r3, [pc, #376]	; c102060 <sys_recovery+0x214>
 c101ee4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c101ee8:	ea000005 	b	c101f04 <sys_recovery+0xb8>
case UNDMODE:
diffStacks = UNDSTACK - SVCSTACK; // calcula la distancia entre la bases de la pila UND y la SVC
 c101eec:	e3a03c01 	mov	r3, #256	; 0x100
 c101ef0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
addrSrc = (uint32 *) UNDSTACK;         // base de la pila UND
 c101ef4:	e59f3168 	ldr	r3, [pc, #360]	; c102064 <sys_recovery+0x218>
 c101ef8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
break;
 c101efc:	ea000000 	b	c101f04 <sys_recovery+0xb8>
 // Habría que hacer algo análogo a lo anterior y además para volver a modo SVC dado que no es válido SET_OPMODE( SVCMODE ), es necesario esto:
 // pISR_SWI = (uint32) isr_SWI;
 // SWI( 0 );
default:
while (1)
;                           // aquí no debería llegarse
 c101f00:	eafffffe 	b	c101f00 <sys_recovery+0xb4>
break;
}

asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );
 c101f04:	e51bd024 	ldr	sp, [fp, #-36]	; 0xffffffdc
 // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento

for (addrDst = (uint32 *) SVCSTACK; addrSrc > (uint32 *) sp;) // copia el contenido completo de la pila excepción en la pila SVC
 c101f08:	e59f3158 	ldr	r3, [pc, #344]	; c102068 <sys_recovery+0x21c>
 c101f0c:	e50b3010 	str	r3, [fp, #-16]
 c101f10:	ea000009 	b	c101f3c <sys_recovery+0xf0>
*(--addrDst) = *(--addrSrc);
 c101f14:	e51b3010 	ldr	r3, [fp, #-16]
 c101f18:	e2433004 	sub	r3, r3, #4
 c101f1c:	e50b3010 	str	r3, [fp, #-16]
 c101f20:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101f24:	e2433004 	sub	r3, r3, #4
 c101f28:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
 c101f2c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101f30:	e5932000 	ldr	r2, [r3]
 c101f34:	e51b3010 	ldr	r3, [fp, #-16]
 c101f38:	e5832000 	str	r2, [r3]
}

asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );
 // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento

for (addrDst = (uint32 *) SVCSTACK; addrSrc > (uint32 *) sp;) // copia el contenido completo de la pila excepción en la pila SVC
 c101f3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c101f40:	e1a02003 	mov	r2, r3
 c101f44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101f48:	e1520003 	cmp	r2, r3
 c101f4c:	3afffff0 	bcc	c101f14 <sys_recovery+0xc8>
*(--addrDst) = *(--addrSrc);

addrDst = (uint32 *) (fp - diffStacks); // carga el puntero al marco de activación de sys_recovery() en la pila SVC
 c101f50:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101f54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101f58:	e0633002 	rsb	r3, r3, r2
 c101f5c:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el PC apilado
 c101f60:	e51b3010 	ldr	r3, [fp, #-16]
 c101f64:	e2433004 	sub	r3, r3, #4
 c101f68:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el LR apilado
 c101f6c:	e51b3010 	ldr	r3, [fp, #-16]
 c101f70:	e2433004 	sub	r3, r3, #4
 c101f74:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks;    // actualiza SP apilado para que apunte a la pila SVC
 c101f78:	e51b3010 	ldr	r3, [fp, #-16]
 c101f7c:	e5932000 	ldr	r2, [r3]
 c101f80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101f84:	e0632002 	rsb	r2, r3, r2
 c101f88:	e51b3010 	ldr	r3, [fp, #-16]
 c101f8c:	e5832000 	str	r2, [r3]
addrDst--;                             // salta el SP apilado
 c101f90:	e51b3010 	ldr	r3, [fp, #-16]
 c101f94:	e2433004 	sub	r3, r3, #4
 c101f98:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks; // actualiza el FP apilado para que apunte a la pila SVC
 c101f9c:	e51b3010 	ldr	r3, [fp, #-16]
 c101fa0:	e5932000 	ldr	r2, [r3]
 c101fa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101fa8:	e0632002 	rsb	r2, r3, r2
 c101fac:	e51b3010 	ldr	r3, [fp, #-16]
 c101fb0:	e5832000 	str	r2, [r3]

addrDst = (uint32 *) (*addrDst); // carga el puntero al marco de activación de sys_init()
 c101fb4:	e51b3010 	ldr	r3, [fp, #-16]
 c101fb8:	e5933000 	ldr	r3, [r3]
 c101fbc:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el PC apilado
 c101fc0:	e51b3010 	ldr	r3, [fp, #-16]
 c101fc4:	e2433004 	sub	r3, r3, #4
 c101fc8:	e50b3010 	str	r3, [fp, #-16]
addrDst--;                             // salta el LR apilado
 c101fcc:	e51b3010 	ldr	r3, [fp, #-16]
 c101fd0:	e2433004 	sub	r3, r3, #4
 c101fd4:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks;    // actualiza SP apilado para que apunte a la pila SVC
 c101fd8:	e51b3010 	ldr	r3, [fp, #-16]
 c101fdc:	e5932000 	ldr	r2, [r3]
 c101fe0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101fe4:	e0632002 	rsb	r2, r3, r2
 c101fe8:	e51b3010 	ldr	r3, [fp, #-16]
 c101fec:	e5832000 	str	r2, [r3]
addrDst--;                             // salta el SP apilado
 c101ff0:	e51b3010 	ldr	r3, [fp, #-16]
 c101ff4:	e2433004 	sub	r3, r3, #4
 c101ff8:	e50b3010 	str	r3, [fp, #-16]
*addrDst -= diffStacks; // actualiza el FP apilado para que apunte a la pila SVC
 c101ffc:	e51b3010 	ldr	r3, [fp, #-16]
 c102000:	e5932000 	ldr	r2, [r3]
 c102004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102008:	e0632002 	rsb	r2, r3, r2
 c10200c:	e51b3010 	ldr	r3, [fp, #-16]
 c102010:	e5832000 	str	r2, [r3]

SET_OPMODE(SVCMODE);                           // cambia a modo SVC
 c102014:	e10f0000 	mrs	r0, CPSR
 c102018:	e3c0001f 	bic	r0, r0, #31
 c10201c:	e3800013 	orr	r0, r0, #19
 c102020:	e121f000 	msr	CPSR_c, r0

sp -= diffStacks;
 c102024:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10202c:	e0633002 	rsb	r3, r3, r2
 c102030:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
asm volatile ( "ldr sp, %0" : : "m" (sp) : );
 c102034:	e51bd01c 	ldr	sp, [fp, #-28]	; 0xffffffe4
    // actualiza SP_svc para que apunte a la cima de la pila SVC

fp -= diffStacks;
 c102038:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10203c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102040:	e0633002 	rsb	r3, r3, r2
 c102044:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
asm volatile ( "ldr fp, %0" : : "m" (fp) : );
 c102048:	e51bb020 	ldr	fp, [fp, #-32]	; 0xffffffe0
 // actualiza FP para que apunte al marco de la pila SVC, debe ser siempre la última sentencia
}
 c10204c:	e24bd00c 	sub	sp, fp, #12
 c102050:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102054:	e12fff1e 	bx	lr
 c102058:	0c7ff400 	.word	0x0c7ff400
 c10205c:	0c7ff500 	.word	0x0c7ff500
 c102060:	0c7ff300 	.word	0x0c7ff300
 c102064:	0c7ff200 	.word	0x0c7ff200
 c102068:	0c7ff100 	.word	0x0c7ff100

0c10206c <timers_init>:
static uint32 loop_s = 0;

static void sw_delay_init( void );

void timers_init( void )
{
 c10206c:	e1a0c00d 	mov	ip, sp
 c102070:	e92dd800 	push	{fp, ip, lr, pc}
 c102074:	e24cb004 	sub	fp, ip, #4
    TCFG0 = 0x0;
 c102078:	e59f30bc 	ldr	r3, [pc, #188]	; c10213c <timers_init+0xd0>
 c10207c:	e3a02000 	mov	r2, #0
 c102080:	e5832000 	str	r2, [r3]
    TCFG1 = 0x0;
 c102084:	e59f30b4 	ldr	r3, [pc, #180]	; c102140 <timers_init+0xd4>
 c102088:	e3a02000 	mov	r2, #0
 c10208c:	e5832000 	str	r2, [r3]

    TCNTB0 = 0x0;
 c102090:	e59f30ac 	ldr	r3, [pc, #172]	; c102144 <timers_init+0xd8>
 c102094:	e3a02000 	mov	r2, #0
 c102098:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c10209c:	e59f30a4 	ldr	r3, [pc, #164]	; c102148 <timers_init+0xdc>
 c1020a0:	e3a02000 	mov	r2, #0
 c1020a4:	e5832000 	str	r2, [r3]
    TCNTB1 = 0x0;
 c1020a8:	e59f309c 	ldr	r3, [pc, #156]	; c10214c <timers_init+0xe0>
 c1020ac:	e3a02000 	mov	r2, #0
 c1020b0:	e5832000 	str	r2, [r3]
    TCMPB1 = 0x0;
 c1020b4:	e59f3094 	ldr	r3, [pc, #148]	; c102150 <timers_init+0xe4>
 c1020b8:	e3a02000 	mov	r2, #0
 c1020bc:	e5832000 	str	r2, [r3]
    TCNTB2 = 0x0;
 c1020c0:	e59f308c 	ldr	r3, [pc, #140]	; c102154 <timers_init+0xe8>
 c1020c4:	e3a02000 	mov	r2, #0
 c1020c8:	e5832000 	str	r2, [r3]
    TCMPB2 = 0x0;
 c1020cc:	e59f3084 	ldr	r3, [pc, #132]	; c102158 <timers_init+0xec>
 c1020d0:	e3a02000 	mov	r2, #0
 c1020d4:	e5832000 	str	r2, [r3]
    TCNTB3 = 0x0;
 c1020d8:	e59f307c 	ldr	r3, [pc, #124]	; c10215c <timers_init+0xf0>
 c1020dc:	e3a02000 	mov	r2, #0
 c1020e0:	e5832000 	str	r2, [r3]
    TCMPB3 = 0x0;
 c1020e4:	e59f3074 	ldr	r3, [pc, #116]	; c102160 <timers_init+0xf4>
 c1020e8:	e3a02000 	mov	r2, #0
 c1020ec:	e5832000 	str	r2, [r3]
    TCNTB4 = 0x0;
 c1020f0:	e59f306c 	ldr	r3, [pc, #108]	; c102164 <timers_init+0xf8>
 c1020f4:	e3a02000 	mov	r2, #0
 c1020f8:	e5832000 	str	r2, [r3]
    TCMPB4 = 0x0;
 c1020fc:	e59f3064 	ldr	r3, [pc, #100]	; c102168 <timers_init+0xfc>
 c102100:	e3a02000 	mov	r2, #0
 c102104:	e5832000 	str	r2, [r3]
    TCNTB5 = 0x0;
 c102108:	e59f305c 	ldr	r3, [pc, #92]	; c10216c <timers_init+0x100>
 c10210c:	e3a02000 	mov	r2, #0
 c102110:	e5832000 	str	r2, [r3]

    TCON = 0x444442;//no estamos muy allï¿½
 c102114:	e59f3054 	ldr	r3, [pc, #84]	; c102170 <timers_init+0x104>
 c102118:	e59f2054 	ldr	r2, [pc, #84]	; c102174 <timers_init+0x108>
 c10211c:	e5832000 	str	r2, [r3]
    TCON = 0x0;//azpiricuetos
 c102120:	e59f3048 	ldr	r3, [pc, #72]	; c102170 <timers_init+0x104>
 c102124:	e3a02000 	mov	r2, #0
 c102128:	e5832000 	str	r2, [r3]

    sw_delay_init();
 c10212c:	eb000011 	bl	c102178 <sw_delay_init>
}
 c102130:	e24bd00c 	sub	sp, fp, #12
 c102134:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102138:	e12fff1e 	bx	lr
 c10213c:	01d50000 	.word	0x01d50000
 c102140:	01d50004 	.word	0x01d50004
 c102144:	01d5000c 	.word	0x01d5000c
 c102148:	01d50010 	.word	0x01d50010
 c10214c:	01d50018 	.word	0x01d50018
 c102150:	01d5001c 	.word	0x01d5001c
 c102154:	01d50024 	.word	0x01d50024
 c102158:	01d50028 	.word	0x01d50028
 c10215c:	01d50030 	.word	0x01d50030
 c102160:	01d50034 	.word	0x01d50034
 c102164:	01d5003c 	.word	0x01d5003c
 c102168:	01d50040 	.word	0x01d50040
 c10216c:	01d50048 	.word	0x01d50048
 c102170:	01d50008 	.word	0x01d50008
 c102174:	00444442 	.word	0x00444442

0c102178 <sw_delay_init>:

static void sw_delay_init( void )
{
 c102178:	e1a0c00d 	mov	ip, sp
 c10217c:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c102180:	e24cb004 	sub	fp, ip, #4
 c102184:	e24dd00c 	sub	sp, sp, #12
    uint32 i;
    
    timer3_start();
 c102188:	eb0000d4 	bl	c1024e0 <timer3_start>
    for( i=1000000; i; i--);
 c10218c:	e59f3088 	ldr	r3, [pc, #136]	; c10221c <sw_delay_init+0xa4>
 c102190:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c102194:	ea000002 	b	c1021a4 <sw_delay_init+0x2c>
 c102198:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10219c:	e2433001 	sub	r3, r3, #1
 c1021a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1021a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1021a8:	e3530000 	cmp	r3, #0
 c1021ac:	1afffff9 	bne	c102198 <sw_delay_init+0x20>
    loop_s = ((uint64)1000000*10000)/timer3_stop();
 c1021b0:	eb0000f6 	bl	c102590 <timer3_stop>
 c1021b4:	e1a03000 	mov	r3, r0
 c1021b8:	e1a02003 	mov	r2, r3
 c1021bc:	e1a03002 	mov	r3, r2
 c1021c0:	e3a04000 	mov	r4, #0
 c1021c4:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c1021c8:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c1021cc:	e2800b01 	add	r0, r0, #1024	; 0x400
 c1021d0:	e3a01002 	mov	r1, #2
 c1021d4:	e1a02003 	mov	r2, r3
 c1021d8:	e1a03004 	mov	r3, r4
 c1021dc:	eb0005a6 	bl	c10387c <__aeabi_uldivmod>
 c1021e0:	e1a03000 	mov	r3, r0
 c1021e4:	e1a04001 	mov	r4, r1
 c1021e8:	e1a02003 	mov	r2, r3
 c1021ec:	e59f302c 	ldr	r3, [pc, #44]	; c102220 <sw_delay_init+0xa8>
 c1021f0:	e5832000 	str	r2, [r3]
    loop_ms = loop_s / 1000;
 c1021f4:	e59f3024 	ldr	r3, [pc, #36]	; c102220 <sw_delay_init+0xa8>
 c1021f8:	e5932000 	ldr	r2, [r3]
 c1021fc:	e59f3020 	ldr	r3, [pc, #32]	; c102224 <sw_delay_init+0xac>
 c102200:	e0831392 	umull	r1, r3, r2, r3
 c102204:	e1a02323 	lsr	r2, r3, #6
 c102208:	e59f3018 	ldr	r3, [pc, #24]	; c102228 <sw_delay_init+0xb0>
 c10220c:	e5832000 	str	r2, [r3]
};
 c102210:	e24bd010 	sub	sp, fp, #16
 c102214:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c102218:	e12fff1e 	bx	lr
 c10221c:	000f4240 	.word	0x000f4240
 c102220:	0c104c24 	.word	0x0c104c24
 c102224:	10624dd3 	.word	0x10624dd3
 c102228:	0c104c20 	.word	0x0c104c20

0c10222c <wait_for_1ms>:

void wait_for_1ms(){
 c10222c:	e1a0c00d 	mov	ip, sp
 c102230:	e92dd800 	push	{fp, ip, lr, pc}
 c102234:	e24cb004 	sub	fp, ip, #4
	//para 64MHz, N = 0, D = 2, C = 32000 de las diapos
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (0 << 8);//N
 c102238:	e59f3090 	ldr	r3, [pc, #144]	; c1022d0 <wait_for_1ms+0xa4>
 c10223c:	e59f208c 	ldr	r2, [pc, #140]	; c1022d0 <wait_for_1ms+0xa4>
 c102240:	e5922000 	ldr	r2, [r2]
 c102244:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c102248:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (0 << 12);//D
 c10224c:	e59f3080 	ldr	r3, [pc, #128]	; c1022d4 <wait_for_1ms+0xa8>
 c102250:	e59f207c 	ldr	r2, [pc, #124]	; c1022d4 <wait_for_1ms+0xa8>
 c102254:	e5922000 	ldr	r2, [r2]
 c102258:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c10225c:	e5832000 	str	r2, [r3]
	TCNTB3 = 32000;//C
 c102260:	e59f3070 	ldr	r3, [pc, #112]	; c1022d8 <wait_for_1ms+0xac>
 c102264:	e3a02c7d 	mov	r2, #32000	; 0x7d00
 c102268:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c10226c:	e59f3068 	ldr	r3, [pc, #104]	; c1022dc <wait_for_1ms+0xb0>
 c102270:	e59f2064 	ldr	r2, [pc, #100]	; c1022dc <wait_for_1ms+0xb0>
 c102274:	e5922000 	ldr	r2, [r2]
 c102278:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10227c:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c102280:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c102284:	e59f3050 	ldr	r3, [pc, #80]	; c1022dc <wait_for_1ms+0xb0>
 c102288:	e59f204c 	ldr	r2, [pc, #76]	; c1022dc <wait_for_1ms+0xb0>
 c10228c:	e5922000 	ldr	r2, [r2]
 c102290:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102294:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102298:	e5832000 	str	r2, [r3]
	while( !TCNTO3 );
 c10229c:	e1a00000 	nop			; (mov r0, r0)
 c1022a0:	e59f3038 	ldr	r3, [pc, #56]	; c1022e0 <wait_for_1ms+0xb4>
 c1022a4:	e5933000 	ldr	r3, [r3]
 c1022a8:	e3530000 	cmp	r3, #0
 c1022ac:	0afffffb 	beq	c1022a0 <wait_for_1ms+0x74>
	while( TCNTO3 );
 c1022b0:	e1a00000 	nop			; (mov r0, r0)
 c1022b4:	e59f3024 	ldr	r3, [pc, #36]	; c1022e0 <wait_for_1ms+0xb4>
 c1022b8:	e5933000 	ldr	r3, [r3]
 c1022bc:	e3530000 	cmp	r3, #0
 c1022c0:	1afffffb 	bne	c1022b4 <wait_for_1ms+0x88>
}
 c1022c4:	e24bd00c 	sub	sp, fp, #12
 c1022c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1022cc:	e12fff1e 	bx	lr
 c1022d0:	01d50000 	.word	0x01d50000
 c1022d4:	01d50004 	.word	0x01d50004
 c1022d8:	01d50030 	.word	0x01d50030
 c1022dc:	01d50008 	.word	0x01d50008
 c1022e0:	01d50038 	.word	0x01d50038

0c1022e4 <timer3_delay_ms>:
void timer3_delay_ms( uint16 n )
{
 c1022e4:	e1a0c00d 	mov	ip, sp
 c1022e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1022ec:	e24cb004 	sub	fp, ip, #4
 c1022f0:	e24dd008 	sub	sp, sp, #8
 c1022f4:	e1a03000 	mov	r3, r0
 c1022f8:	e14b30be 	strh	r3, [fp, #-14]
    for(;n;n--){
 c1022fc:	ea000003 	b	c102310 <timer3_delay_ms+0x2c>
        wait_for_1ms();
 c102300:	ebffffc9 	bl	c10222c <wait_for_1ms>
	while( !TCNTO3 );
	while( TCNTO3 );
}
void timer3_delay_ms( uint16 n )
{
    for(;n;n--){
 c102304:	e15b30be 	ldrh	r3, [fp, #-14]
 c102308:	e2433001 	sub	r3, r3, #1
 c10230c:	e14b30be 	strh	r3, [fp, #-14]
 c102310:	e15b30be 	ldrh	r3, [fp, #-14]
 c102314:	e3530000 	cmp	r3, #0
 c102318:	1afffff8 	bne	c102300 <timer3_delay_ms+0x1c>
        wait_for_1ms();
    }
}
 c10231c:	e24bd00c 	sub	sp, fp, #12
 c102320:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102324:	e12fff1e 	bx	lr

0c102328 <sw_delay_ms>:



void sw_delay_ms( uint16 n )
{
 c102328:	e1a0c00d 	mov	ip, sp
 c10232c:	e92dd800 	push	{fp, ip, lr, pc}
 c102330:	e24cb004 	sub	fp, ip, #4
 c102334:	e24dd010 	sub	sp, sp, #16
 c102338:	e1a03000 	mov	r3, r0
 c10233c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_ms*n; i; i-- );
 c102340:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c102344:	e59f2030 	ldr	r2, [pc, #48]	; c10237c <sw_delay_ms+0x54>
 c102348:	e5922000 	ldr	r2, [r2]
 c10234c:	e0030392 	mul	r3, r2, r3
 c102350:	e50b3010 	str	r3, [fp, #-16]
 c102354:	ea000002 	b	c102364 <sw_delay_ms+0x3c>
 c102358:	e51b3010 	ldr	r3, [fp, #-16]
 c10235c:	e2433001 	sub	r3, r3, #1
 c102360:	e50b3010 	str	r3, [fp, #-16]
 c102364:	e51b3010 	ldr	r3, [fp, #-16]
 c102368:	e3530000 	cmp	r3, #0
 c10236c:	1afffff9 	bne	c102358 <sw_delay_ms+0x30>
}
 c102370:	e24bd00c 	sub	sp, fp, #12
 c102374:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102378:	e12fff1e 	bx	lr
 c10237c:	0c104c20 	.word	0x0c104c20

0c102380 <wait_for_1s>:
void wait_for_1s( void )
{
 c102380:	e1a0c00d 	mov	ip, sp
 c102384:	e92dd800 	push	{fp, ip, lr, pc}
 c102388:	e24cb004 	sub	fp, ip, #4
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (63 << 8);
 c10238c:	e59f3098 	ldr	r3, [pc, #152]	; c10242c <wait_for_1s+0xac>
 c102390:	e59f2094 	ldr	r2, [pc, #148]	; c10242c <wait_for_1s+0xac>
 c102394:	e5922000 	ldr	r2, [r2]
 c102398:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10239c:	e3822c3f 	orr	r2, r2, #16128	; 0x3f00
 c1023a0:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1023a4:	e59f3084 	ldr	r3, [pc, #132]	; c102430 <wait_for_1s+0xb0>
 c1023a8:	e59f2080 	ldr	r2, [pc, #128]	; c102430 <wait_for_1s+0xb0>
 c1023ac:	e5922000 	ldr	r2, [r2]
 c1023b0:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1023b4:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1023b8:	e5832000 	str	r2, [r3]
	TCNTB3 = 31250;
 c1023bc:	e59f3070 	ldr	r3, [pc, #112]	; c102434 <wait_for_1s+0xb4>
 c1023c0:	e59f2070 	ldr	r2, [pc, #112]	; c102438 <wait_for_1s+0xb8>
 c1023c4:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c1023c8:	e59f306c 	ldr	r3, [pc, #108]	; c10243c <wait_for_1s+0xbc>
 c1023cc:	e59f2068 	ldr	r2, [pc, #104]	; c10243c <wait_for_1s+0xbc>
 c1023d0:	e5922000 	ldr	r2, [r2]
 c1023d4:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1023d8:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c1023dc:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c1023e0:	e59f3054 	ldr	r3, [pc, #84]	; c10243c <wait_for_1s+0xbc>
 c1023e4:	e59f2050 	ldr	r2, [pc, #80]	; c10243c <wait_for_1s+0xbc>
 c1023e8:	e5922000 	ldr	r2, [r2]
 c1023ec:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1023f0:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c1023f4:	e5832000 	str	r2, [r3]
	while( !TCNTO3 );
 c1023f8:	e1a00000 	nop			; (mov r0, r0)
 c1023fc:	e59f303c 	ldr	r3, [pc, #60]	; c102440 <wait_for_1s+0xc0>
 c102400:	e5933000 	ldr	r3, [r3]
 c102404:	e3530000 	cmp	r3, #0
 c102408:	0afffffb 	beq	c1023fc <wait_for_1s+0x7c>
	while( TCNTO3 );
 c10240c:	e1a00000 	nop			; (mov r0, r0)
 c102410:	e59f3028 	ldr	r3, [pc, #40]	; c102440 <wait_for_1s+0xc0>
 c102414:	e5933000 	ldr	r3, [r3]
 c102418:	e3530000 	cmp	r3, #0
 c10241c:	1afffffb 	bne	c102410 <wait_for_1s+0x90>
}
 c102420:	e24bd00c 	sub	sp, fp, #12
 c102424:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102428:	e12fff1e 	bx	lr
 c10242c:	01d50000 	.word	0x01d50000
 c102430:	01d50004 	.word	0x01d50004
 c102434:	01d50030 	.word	0x01d50030
 c102438:	00007a12 	.word	0x00007a12
 c10243c:	01d50008 	.word	0x01d50008
 c102440:	01d50038 	.word	0x01d50038

0c102444 <timer3_delay_s>:
void timer3_delay_s( uint16 n )
{
 c102444:	e1a0c00d 	mov	ip, sp
 c102448:	e92dd800 	push	{fp, ip, lr, pc}
 c10244c:	e24cb004 	sub	fp, ip, #4
 c102450:	e24dd008 	sub	sp, sp, #8
 c102454:	e1a03000 	mov	r3, r0
 c102458:	e14b30be 	strh	r3, [fp, #-14]
    for(;n;n--){
 c10245c:	ea000003 	b	c102470 <timer3_delay_s+0x2c>
    	wait_for_1s();
 c102460:	ebffffc6 	bl	c102380 <wait_for_1s>
	while( !TCNTO3 );
	while( TCNTO3 );
}
void timer3_delay_s( uint16 n )
{
    for(;n;n--){
 c102464:	e15b30be 	ldrh	r3, [fp, #-14]
 c102468:	e2433001 	sub	r3, r3, #1
 c10246c:	e14b30be 	strh	r3, [fp, #-14]
 c102470:	e15b30be 	ldrh	r3, [fp, #-14]
 c102474:	e3530000 	cmp	r3, #0
 c102478:	1afffff8 	bne	c102460 <timer3_delay_s+0x1c>
    	wait_for_1s();
    }
}
 c10247c:	e24bd00c 	sub	sp, fp, #12
 c102480:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102484:	e12fff1e 	bx	lr

0c102488 <sw_delay_s>:



void sw_delay_s( uint16 n )
{
 c102488:	e1a0c00d 	mov	ip, sp
 c10248c:	e92dd800 	push	{fp, ip, lr, pc}
 c102490:	e24cb004 	sub	fp, ip, #4
 c102494:	e24dd010 	sub	sp, sp, #16
 c102498:	e1a03000 	mov	r3, r0
 c10249c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_s*n; i; i-- );
 c1024a0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1024a4:	e59f2030 	ldr	r2, [pc, #48]	; c1024dc <sw_delay_s+0x54>
 c1024a8:	e5922000 	ldr	r2, [r2]
 c1024ac:	e0030392 	mul	r3, r2, r3
 c1024b0:	e50b3010 	str	r3, [fp, #-16]
 c1024b4:	ea000002 	b	c1024c4 <sw_delay_s+0x3c>
 c1024b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1024bc:	e2433001 	sub	r3, r3, #1
 c1024c0:	e50b3010 	str	r3, [fp, #-16]
 c1024c4:	e51b3010 	ldr	r3, [fp, #-16]
 c1024c8:	e3530000 	cmp	r3, #0
 c1024cc:	1afffff9 	bne	c1024b8 <sw_delay_s+0x30>
}
 c1024d0:	e24bd00c 	sub	sp, fp, #12
 c1024d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1024d8:	e12fff1e 	bx	lr
 c1024dc:	0c104c24 	.word	0x0c104c24

0c1024e0 <timer3_start>:

void timer3_start( void ) 
{
 c1024e0:	e1a0c00d 	mov	ip, sp
 c1024e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1024e8:	e24cb004 	sub	fp, ip, #4
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);    
 c1024ec:	e59f3084 	ldr	r3, [pc, #132]	; c102578 <timer3_start+0x98>
 c1024f0:	e59f2080 	ldr	r2, [pc, #128]	; c102578 <timer3_start+0x98>
 c1024f4:	e5922000 	ldr	r2, [r2]
 c1024f8:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1024fc:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c102500:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c102504:	e59f3070 	ldr	r3, [pc, #112]	; c10257c <timer3_start+0x9c>
 c102508:	e59f206c 	ldr	r2, [pc, #108]	; c10257c <timer3_start+0x9c>
 c10250c:	e5922000 	ldr	r2, [r2]
 c102510:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c102514:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c102518:	e5832000 	str	r2, [r3]
    
    TCNTB3 = 0xffff; 
 c10251c:	e59f305c 	ldr	r3, [pc, #92]	; c102580 <timer3_start+0xa0>
 c102520:	e59f205c 	ldr	r2, [pc, #92]	; c102584 <timer3_start+0xa4>
 c102524:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c102528:	e59f3058 	ldr	r3, [pc, #88]	; c102588 <timer3_start+0xa8>
 c10252c:	e59f2054 	ldr	r2, [pc, #84]	; c102588 <timer3_start+0xa8>
 c102530:	e5922000 	ldr	r2, [r2]
 c102534:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102538:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10253c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c102540:	e59f3040 	ldr	r3, [pc, #64]	; c102588 <timer3_start+0xa8>
 c102544:	e59f203c 	ldr	r2, [pc, #60]	; c102588 <timer3_start+0xa8>
 c102548:	e5922000 	ldr	r2, [r2]
 c10254c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102550:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102554:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c102558:	e1a00000 	nop			; (mov r0, r0)
 c10255c:	e59f3028 	ldr	r3, [pc, #40]	; c10258c <timer3_start+0xac>
 c102560:	e5933000 	ldr	r3, [r3]
 c102564:	e3530000 	cmp	r3, #0
 c102568:	0afffffb 	beq	c10255c <timer3_start+0x7c>
}
 c10256c:	e24bd00c 	sub	sp, fp, #12
 c102570:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102574:	e12fff1e 	bx	lr
 c102578:	01d50000 	.word	0x01d50000
 c10257c:	01d50004 	.word	0x01d50004
 c102580:	01d50030 	.word	0x01d50030
 c102584:	0000ffff 	.word	0x0000ffff
 c102588:	01d50008 	.word	0x01d50008
 c10258c:	01d50038 	.word	0x01d50038

0c102590 <timer3_stop>:

uint16 timer3_stop( void )
{
 c102590:	e1a0c00d 	mov	ip, sp
 c102594:	e92dd800 	push	{fp, ip, lr, pc}
 c102598:	e24cb004 	sub	fp, ip, #4
    TCON &= ~(1 << 16);
 c10259c:	e59f3038 	ldr	r3, [pc, #56]	; c1025dc <timer3_stop+0x4c>
 c1025a0:	e59f2034 	ldr	r2, [pc, #52]	; c1025dc <timer3_stop+0x4c>
 c1025a4:	e5922000 	ldr	r2, [r2]
 c1025a8:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c1025ac:	e5832000 	str	r2, [r3]
    return 0xffff - TCNTO3;
 c1025b0:	e59f3028 	ldr	r3, [pc, #40]	; c1025e0 <timer3_stop+0x50>
 c1025b4:	e5933000 	ldr	r3, [r3]
 c1025b8:	e1a03803 	lsl	r3, r3, #16
 c1025bc:	e1a03823 	lsr	r3, r3, #16
 c1025c0:	e1e03003 	mvn	r3, r3
 c1025c4:	e1a03803 	lsl	r3, r3, #16
 c1025c8:	e1a03823 	lsr	r3, r3, #16
}
 c1025cc:	e1a00003 	mov	r0, r3
 c1025d0:	e24bd00c 	sub	sp, fp, #12
 c1025d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1025d8:	e12fff1e 	bx	lr
 c1025dc:	01d50008 	.word	0x01d50008
 c1025e0:	01d50038 	.word	0x01d50038

0c1025e4 <timer3_start_timeout>:

void timer3_start_timeout( uint16 n ) 
{
 c1025e4:	e1a0c00d 	mov	ip, sp
 c1025e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1025ec:	e24cb004 	sub	fp, ip, #4
 c1025f0:	e24dd008 	sub	sp, sp, #8
 c1025f4:	e1a03000 	mov	r3, r0
 c1025f8:	e14b30be 	strh	r3, [fp, #-14]
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);          
 c1025fc:	e59f3084 	ldr	r3, [pc, #132]	; c102688 <timer3_start_timeout+0xa4>
 c102600:	e59f2080 	ldr	r2, [pc, #128]	; c102688 <timer3_start_timeout+0xa4>
 c102604:	e5922000 	ldr	r2, [r2]
 c102608:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10260c:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c102610:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c102614:	e59f3070 	ldr	r3, [pc, #112]	; c10268c <timer3_start_timeout+0xa8>
 c102618:	e59f206c 	ldr	r2, [pc, #108]	; c10268c <timer3_start_timeout+0xa8>
 c10261c:	e5922000 	ldr	r2, [r2]
 c102620:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c102624:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c102628:	e5832000 	str	r2, [r3]
    
    TCNTB3 = n; 
 c10262c:	e59f305c 	ldr	r3, [pc, #92]	; c102690 <timer3_start_timeout+0xac>
 c102630:	e15b20be 	ldrh	r2, [fp, #-14]
 c102634:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c102638:	e59f3054 	ldr	r3, [pc, #84]	; c102694 <timer3_start_timeout+0xb0>
 c10263c:	e59f2050 	ldr	r2, [pc, #80]	; c102694 <timer3_start_timeout+0xb0>
 c102640:	e5922000 	ldr	r2, [r2]
 c102644:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102648:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10264c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c102650:	e59f303c 	ldr	r3, [pc, #60]	; c102694 <timer3_start_timeout+0xb0>
 c102654:	e59f2038 	ldr	r2, [pc, #56]	; c102694 <timer3_start_timeout+0xb0>
 c102658:	e5922000 	ldr	r2, [r2]
 c10265c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102660:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102664:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c102668:	e1a00000 	nop			; (mov r0, r0)
 c10266c:	e59f3024 	ldr	r3, [pc, #36]	; c102698 <timer3_start_timeout+0xb4>
 c102670:	e5933000 	ldr	r3, [r3]
 c102674:	e3530000 	cmp	r3, #0
 c102678:	0afffffb 	beq	c10266c <timer3_start_timeout+0x88>
}
 c10267c:	e24bd00c 	sub	sp, fp, #12
 c102680:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102684:	e12fff1e 	bx	lr
 c102688:	01d50000 	.word	0x01d50000
 c10268c:	01d50004 	.word	0x01d50004
 c102690:	01d50030 	.word	0x01d50030
 c102694:	01d50008 	.word	0x01d50008
 c102698:	01d50038 	.word	0x01d50038

0c10269c <timer3_timeout>:

uint16 timer3_timeout( )
{
 c10269c:	e1a0c00d 	mov	ip, sp
 c1026a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1026a4:	e24cb004 	sub	fp, ip, #4
    return !TCNTO3;
 c1026a8:	e59f3024 	ldr	r3, [pc, #36]	; c1026d4 <timer3_timeout+0x38>
 c1026ac:	e5933000 	ldr	r3, [r3]
 c1026b0:	e3530000 	cmp	r3, #0
 c1026b4:	13a03000 	movne	r3, #0
 c1026b8:	03a03001 	moveq	r3, #1
 c1026bc:	e1a03803 	lsl	r3, r3, #16
 c1026c0:	e1a03823 	lsr	r3, r3, #16
}    
 c1026c4:	e1a00003 	mov	r0, r3
 c1026c8:	e24bd00c 	sub	sp, fp, #12
 c1026cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1026d0:	e12fff1e 	bx	lr
 c1026d4:	01d50038 	.word	0x01d50038

0c1026d8 <timer0_open_tick>:
//He cambiado todos los N D y ahora van perfe pero no tienen ningun puto sentido
void timer0_open_tick( void (*isr)(void), uint16 tps )
{
 c1026d8:	e1a0c00d 	mov	ip, sp
 c1026dc:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1026e0:	e24cb004 	sub	fp, ip, #4
 c1026e4:	e24dd00c 	sub	sp, sp, #12
 c1026e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1026ec:	e1a03001 	mov	r3, r1
 c1026f0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
	 pISR_TIMER0 = (uint32) isr;
 c1026f4:	e59f31f4 	ldr	r3, [pc, #500]	; c1028f0 <timer0_open_tick+0x218>
 c1026f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1026fc:	e5832000 	str	r2, [r3]
	 I_ISPC      = BIT_TIMER0;
 c102700:	e59f31ec 	ldr	r3, [pc, #492]	; c1028f4 <timer0_open_tick+0x21c>
 c102704:	e3a02a02 	mov	r2, #8192	; 0x2000
 c102708:	e5832000 	str	r2, [r3]
	 INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c10270c:	e59f21e4 	ldr	r2, [pc, #484]	; c1028f8 <timer0_open_tick+0x220>
 c102710:	e59f31e0 	ldr	r3, [pc, #480]	; c1028f8 <timer0_open_tick+0x220>
 c102714:	e5933000 	ldr	r3, [r3]
 c102718:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c10271c:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c102720:	e5823000 	str	r3, [r2]

    if( tps > 0 && tps <= 10 ) {
 c102724:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102728:	e3530000 	cmp	r3, #0
 c10272c:	0a000018 	beq	c102794 <timer0_open_tick+0xbc>
 c102730:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102734:	e353000a 	cmp	r3, #10
 c102738:	8a000015 	bhi	c102794 <timer0_open_tick+0xbc>
        TCFG0  = (TCFG0 & ~(0xff << 0)) | (49 << 0);
 c10273c:	e59f31b8 	ldr	r3, [pc, #440]	; c1028fc <timer0_open_tick+0x224>
 c102740:	e59f21b4 	ldr	r2, [pc, #436]	; c1028fc <timer0_open_tick+0x224>
 c102744:	e5922000 	ldr	r2, [r2]
 c102748:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10274c:	e3822031 	orr	r2, r2, #49	; 0x31
 c102750:	e5832000 	str	r2, [r3]
        TCFG1  = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c102754:	e59f31a4 	ldr	r3, [pc, #420]	; c102900 <timer0_open_tick+0x228>
 c102758:	e59f21a0 	ldr	r2, [pc, #416]	; c102900 <timer0_open_tick+0x228>
 c10275c:	e5922000 	ldr	r2, [r2]
 c102760:	e3c2200f 	bic	r2, r2, #15
 c102764:	e3822004 	orr	r2, r2, #4
 c102768:	e5832000 	str	r2, [r3]
        TCNTB0 = (40000U / tps);
 c10276c:	e59f4190 	ldr	r4, [pc, #400]	; c102904 <timer0_open_tick+0x22c>
 c102770:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102774:	e59f018c 	ldr	r0, [pc, #396]	; c102908 <timer0_open_tick+0x230>
 c102778:	e1a01003 	mov	r1, r3
 c10277c:	eb0003f8 	bl	c103764 <__aeabi_uidiv>
 c102780:	e1a03000 	mov	r3, r0
 c102784:	e1a03803 	lsl	r3, r3, #16
 c102788:	e1a03823 	lsr	r3, r3, #16
 c10278c:	e5843000 	str	r3, [r4]
 c102790:	ea000047 	b	c1028b4 <timer0_open_tick+0x1dc>
    } else if( tps > 10 && tps <= 100 ) {
 c102794:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102798:	e353000a 	cmp	r3, #10
 c10279c:	9a000016 	bls	c1027fc <timer0_open_tick+0x124>
 c1027a0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1027a4:	e3530064 	cmp	r3, #100	; 0x64
 c1027a8:	8a000013 	bhi	c1027fc <timer0_open_tick+0x124>
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (4 << 0);
 c1027ac:	e59f3148 	ldr	r3, [pc, #328]	; c1028fc <timer0_open_tick+0x224>
 c1027b0:	e59f2144 	ldr	r2, [pc, #324]	; c1028fc <timer0_open_tick+0x224>
 c1027b4:	e5922000 	ldr	r2, [r2]
 c1027b8:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1027bc:	e3822004 	orr	r2, r2, #4
 c1027c0:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c1027c4:	e59f3134 	ldr	r3, [pc, #308]	; c102900 <timer0_open_tick+0x228>
 c1027c8:	e59f2130 	ldr	r2, [pc, #304]	; c102900 <timer0_open_tick+0x228>
 c1027cc:	e5922000 	ldr	r2, [r2]
 c1027d0:	e3c2200f 	bic	r2, r2, #15
 c1027d4:	e3822004 	orr	r2, r2, #4
 c1027d8:	e5832000 	str	r2, [r3]
        TCNTB0 = (400000U / (uint32) tps);
 c1027dc:	e59f4120 	ldr	r4, [pc, #288]	; c102904 <timer0_open_tick+0x22c>
 c1027e0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1027e4:	e59f0120 	ldr	r0, [pc, #288]	; c10290c <timer0_open_tick+0x234>
 c1027e8:	e1a01003 	mov	r1, r3
 c1027ec:	eb0003dc 	bl	c103764 <__aeabi_uidiv>
 c1027f0:	e1a03000 	mov	r3, r0
 c1027f4:	e5843000 	str	r3, [r4]
 c1027f8:	ea00002d 	b	c1028b4 <timer0_open_tick+0x1dc>
    } else if( tps > 100 && tps <= 1000 ) {
 c1027fc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102800:	e3530064 	cmp	r3, #100	; 0x64
 c102804:	9a000016 	bls	c102864 <timer0_open_tick+0x18c>
 c102808:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10280c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c102810:	8a000013 	bhi	c102864 <timer0_open_tick+0x18c>
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (1 << 0);
 c102814:	e59f30e0 	ldr	r3, [pc, #224]	; c1028fc <timer0_open_tick+0x224>
 c102818:	e59f20dc 	ldr	r2, [pc, #220]	; c1028fc <timer0_open_tick+0x224>
 c10281c:	e5922000 	ldr	r2, [r2]
 c102820:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102824:	e3822001 	orr	r2, r2, #1
 c102828:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf << 0)) | (2 << 0);
 c10282c:	e59f30cc 	ldr	r3, [pc, #204]	; c102900 <timer0_open_tick+0x228>
 c102830:	e59f20c8 	ldr	r2, [pc, #200]	; c102900 <timer0_open_tick+0x228>
 c102834:	e5922000 	ldr	r2, [r2]
 c102838:	e3c2200f 	bic	r2, r2, #15
 c10283c:	e3822002 	orr	r2, r2, #2
 c102840:	e5832000 	str	r2, [r3]
        TCNTB0 = (4000000U / (uint32) tps);
 c102844:	e59f40b8 	ldr	r4, [pc, #184]	; c102904 <timer0_open_tick+0x22c>
 c102848:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10284c:	e59f00bc 	ldr	r0, [pc, #188]	; c102910 <timer0_open_tick+0x238>
 c102850:	e1a01003 	mov	r1, r3
 c102854:	eb0003c2 	bl	c103764 <__aeabi_uidiv>
 c102858:	e1a03000 	mov	r3, r0
 c10285c:	e5843000 	str	r3, [r4]
 c102860:	ea000013 	b	c1028b4 <timer0_open_tick+0x1dc>
    } else if ( tps > 1000 ) {
 c102864:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102868:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c10286c:	9a000010 	bls	c1028b4 <timer0_open_tick+0x1dc>
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (0 << 0);
 c102870:	e59f3084 	ldr	r3, [pc, #132]	; c1028fc <timer0_open_tick+0x224>
 c102874:	e59f2080 	ldr	r2, [pc, #128]	; c1028fc <timer0_open_tick+0x224>
 c102878:	e5922000 	ldr	r2, [r2]
 c10287c:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102880:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf << 0)) | (0 << 0);
 c102884:	e59f3074 	ldr	r3, [pc, #116]	; c102900 <timer0_open_tick+0x228>
 c102888:	e59f2070 	ldr	r2, [pc, #112]	; c102900 <timer0_open_tick+0x228>
 c10288c:	e5922000 	ldr	r2, [r2]
 c102890:	e3c2200f 	bic	r2, r2, #15
 c102894:	e5832000 	str	r2, [r3]
        TCNTB0 = (32000000U / (uint32) tps);
 c102898:	e59f4064 	ldr	r4, [pc, #100]	; c102904 <timer0_open_tick+0x22c>
 c10289c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1028a0:	e59f006c 	ldr	r0, [pc, #108]	; c102914 <timer0_open_tick+0x23c>
 c1028a4:	e1a01003 	mov	r1, r3
 c1028a8:	eb0003ad 	bl	c103764 <__aeabi_uidiv>
 c1028ac:	e1a03000 	mov	r3, r0
 c1028b0:	e5843000 	str	r3, [r4]
    }

    TCON = (TCON & ~(0xf << 0)) | (1<<3) | (1<<1) | (0<<0);
 c1028b4:	e59f305c 	ldr	r3, [pc, #92]	; c102918 <timer0_open_tick+0x240>
 c1028b8:	e59f2058 	ldr	r2, [pc, #88]	; c102918 <timer0_open_tick+0x240>
 c1028bc:	e5922000 	ldr	r2, [r2]
 c1028c0:	e3c2200f 	bic	r2, r2, #15
 c1028c4:	e382200a 	orr	r2, r2, #10
 c1028c8:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 0)) | (1<<3) | (0<<1) | (1<<0);
 c1028cc:	e59f3044 	ldr	r3, [pc, #68]	; c102918 <timer0_open_tick+0x240>
 c1028d0:	e59f2040 	ldr	r2, [pc, #64]	; c102918 <timer0_open_tick+0x240>
 c1028d4:	e5922000 	ldr	r2, [r2]
 c1028d8:	e3c2200f 	bic	r2, r2, #15
 c1028dc:	e3822009 	orr	r2, r2, #9
 c1028e0:	e5832000 	str	r2, [r3]
}
 c1028e4:	e24bd010 	sub	sp, fp, #16
 c1028e8:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1028ec:	e12fff1e 	bx	lr
 c1028f0:	0c7fff54 	.word	0x0c7fff54
 c1028f4:	01e00024 	.word	0x01e00024
 c1028f8:	01e0000c 	.word	0x01e0000c
 c1028fc:	01d50000 	.word	0x01d50000
 c102900:	01d50004 	.word	0x01d50004
 c102904:	01d5000c 	.word	0x01d5000c
 c102908:	00009c40 	.word	0x00009c40
 c10290c:	00061a80 	.word	0x00061a80
 c102910:	003d0900 	.word	0x003d0900
 c102914:	01e84800 	.word	0x01e84800
 c102918:	01d50008 	.word	0x01d50008

0c10291c <timer0_open_ms>:

void timer0_open_ms( void (*isr)(void), uint16 ms, uint8 mode )
{
 c10291c:	e1a0c00d 	mov	ip, sp
 c102920:	e92dd800 	push	{fp, ip, lr, pc}
 c102924:	e24cb004 	sub	fp, ip, #4
 c102928:	e24dd008 	sub	sp, sp, #8
 c10292c:	e50b0010 	str	r0, [fp, #-16]
 c102930:	e1a03002 	mov	r3, r2
 c102934:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c102938:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    pISR_TIMER0 = (uint32) isr;
 c10293c:	e59f30c8 	ldr	r3, [pc, #200]	; c102a0c <timer0_open_ms+0xf0>
 c102940:	e51b2010 	ldr	r2, [fp, #-16]
 c102944:	e5832000 	str	r2, [r3]
    I_ISPC      = BIT_TIMER0;
 c102948:	e59f30c0 	ldr	r3, [pc, #192]	; c102a10 <timer0_open_ms+0xf4>
 c10294c:	e3a02a02 	mov	r2, #8192	; 0x2000
 c102950:	e5832000 	str	r2, [r3]
    INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c102954:	e59f20b8 	ldr	r2, [pc, #184]	; c102a14 <timer0_open_ms+0xf8>
 c102958:	e59f30b4 	ldr	r3, [pc, #180]	; c102a14 <timer0_open_ms+0xf8>
 c10295c:	e5933000 	ldr	r3, [r3]
 c102960:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c102964:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c102968:	e5823000 	str	r3, [r2]

    TCFG0 = (TCFG0 & ~(0xff << 0)) | (199 << 0);
 c10296c:	e59f30a4 	ldr	r3, [pc, #164]	; c102a18 <timer0_open_ms+0xfc>
 c102970:	e59f20a0 	ldr	r2, [pc, #160]	; c102a18 <timer0_open_ms+0xfc>
 c102974:	e5922000 	ldr	r2, [r2]
 c102978:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10297c:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c102980:	e5832000 	str	r2, [r3]
    TCFG1 =  (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c102984:	e59f3090 	ldr	r3, [pc, #144]	; c102a1c <timer0_open_ms+0x100>
 c102988:	e59f208c 	ldr	r2, [pc, #140]	; c102a1c <timer0_open_ms+0x100>
 c10298c:	e5922000 	ldr	r2, [r2]
 c102990:	e3c2200f 	bic	r2, r2, #15
 c102994:	e3822004 	orr	r2, r2, #4
 c102998:	e5832000 	str	r2, [r3]
    TCNTB0 = 10*ms;
 c10299c:	e59f107c 	ldr	r1, [pc, #124]	; c102a20 <timer0_open_ms+0x104>
 c1029a0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1029a4:	e1a03002 	mov	r3, r2
 c1029a8:	e1a03103 	lsl	r3, r3, #2
 c1029ac:	e0833002 	add	r3, r3, r2
 c1029b0:	e1a03083 	lsl	r3, r3, #1
 c1029b4:	e5813000 	str	r3, [r1]

    TCON =  (TCON & ~(0xf << 0)) | (mode << 3) | (1<<1) | (0<<0);
 c1029b8:	e59f3064 	ldr	r3, [pc, #100]	; c102a24 <timer0_open_ms+0x108>
 c1029bc:	e59f2060 	ldr	r2, [pc, #96]	; c102a24 <timer0_open_ms+0x108>
 c1029c0:	e5922000 	ldr	r2, [r2]
 c1029c4:	e3c2100f 	bic	r1, r2, #15
 c1029c8:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c1029cc:	e1a02182 	lsl	r2, r2, #3
 c1029d0:	e1812002 	orr	r2, r1, r2
 c1029d4:	e3822002 	orr	r2, r2, #2
 c1029d8:	e5832000 	str	r2, [r3]
    TCON =  (TCON & ~(0xf << 0)) | (mode << 3) | (0<<1) | (1<<0);
 c1029dc:	e59f3040 	ldr	r3, [pc, #64]	; c102a24 <timer0_open_ms+0x108>
 c1029e0:	e59f203c 	ldr	r2, [pc, #60]	; c102a24 <timer0_open_ms+0x108>
 c1029e4:	e5922000 	ldr	r2, [r2]
 c1029e8:	e3c2100f 	bic	r1, r2, #15
 c1029ec:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c1029f0:	e1a02182 	lsl	r2, r2, #3
 c1029f4:	e1812002 	orr	r2, r1, r2
 c1029f8:	e3822001 	orr	r2, r2, #1
 c1029fc:	e5832000 	str	r2, [r3]
}
 c102a00:	e24bd00c 	sub	sp, fp, #12
 c102a04:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102a08:	e12fff1e 	bx	lr
 c102a0c:	0c7fff54 	.word	0x0c7fff54
 c102a10:	01e00024 	.word	0x01e00024
 c102a14:	01e0000c 	.word	0x01e0000c
 c102a18:	01d50000 	.word	0x01d50000
 c102a1c:	01d50004 	.word	0x01d50004
 c102a20:	01d5000c 	.word	0x01d5000c
 c102a24:	01d50008 	.word	0x01d50008

0c102a28 <timer0_close>:

void timer0_close( void )
{
 c102a28:	e1a0c00d 	mov	ip, sp
 c102a2c:	e92dd800 	push	{fp, ip, lr, pc}
 c102a30:	e24cb004 	sub	fp, ip, #4
    TCNTB0 = 0x0;
 c102a34:	e59f3068 	ldr	r3, [pc, #104]	; c102aa4 <timer0_close+0x7c>
 c102a38:	e3a02000 	mov	r2, #0
 c102a3c:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c102a40:	e59f3060 	ldr	r3, [pc, #96]	; c102aa8 <timer0_close+0x80>
 c102a44:	e3a02000 	mov	r2, #0
 c102a48:	e5832000 	str	r2, [r3]

    TCON = (TCON & ~(0xf << 0)) | (1<<1) | (0<<0);
 c102a4c:	e59f3058 	ldr	r3, [pc, #88]	; c102aac <timer0_close+0x84>
 c102a50:	e59f2054 	ldr	r2, [pc, #84]	; c102aac <timer0_close+0x84>
 c102a54:	e5922000 	ldr	r2, [r2]
 c102a58:	e3c2200f 	bic	r2, r2, #15
 c102a5c:	e3822002 	orr	r2, r2, #2
 c102a60:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 0)) | (0<<1) | (0<<0);
 c102a64:	e59f3040 	ldr	r3, [pc, #64]	; c102aac <timer0_close+0x84>
 c102a68:	e59f203c 	ldr	r2, [pc, #60]	; c102aac <timer0_close+0x84>
 c102a6c:	e5922000 	ldr	r2, [r2]
 c102a70:	e3c2200f 	bic	r2, r2, #15
 c102a74:	e5832000 	str	r2, [r3]
    
    INTMSK     |= BIT_TIMER0;
 c102a78:	e59f3030 	ldr	r3, [pc, #48]	; c102ab0 <timer0_close+0x88>
 c102a7c:	e59f202c 	ldr	r2, [pc, #44]	; c102ab0 <timer0_close+0x88>
 c102a80:	e5922000 	ldr	r2, [r2]
 c102a84:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c102a88:	e5832000 	str	r2, [r3]
    pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c102a8c:	e59f3020 	ldr	r3, [pc, #32]	; c102ab4 <timer0_close+0x8c>
 c102a90:	e59f2020 	ldr	r2, [pc, #32]	; c102ab8 <timer0_close+0x90>
 c102a94:	e5832000 	str	r2, [r3]
}
 c102a98:	e24bd00c 	sub	sp, fp, #12
 c102a9c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102aa0:	e12fff1e 	bx	lr
 c102aa4:	01d5000c 	.word	0x01d5000c
 c102aa8:	01d50010 	.word	0x01d50010
 c102aac:	01d50008 	.word	0x01d50008
 c102ab0:	01e0000c 	.word	0x01e0000c
 c102ab4:	0c7fff54 	.word	0x0c7fff54
 c102ab8:	0c101bf0 	.word	0x0c101bf0

0c102abc <uart0_init>:
#include <s3c44b0x.h>
#include <uart.h>

void uart0_init( void )
{
 c102abc:	e1a0c00d 	mov	ip, sp
 c102ac0:	e92dd800 	push	{fp, ip, lr, pc}
 c102ac4:	e24cb004 	sub	fp, ip, #4
UFCON0 = 0x1;
 c102ac8:	e59f3040 	ldr	r3, [pc, #64]	; c102b10 <uart0_init+0x54>
 c102acc:	e3a02001 	mov	r2, #1
 c102ad0:	e5832000 	str	r2, [r3]
UMCON0 = 0x0;
 c102ad4:	e59f3038 	ldr	r3, [pc, #56]	; c102b14 <uart0_init+0x58>
 c102ad8:	e3a02000 	mov	r2, #0
 c102adc:	e5832000 	str	r2, [r3]
ULCON0 = 0x3;
 c102ae0:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c102ae4:	e3a02003 	mov	r2, #3
 c102ae8:	e5832000 	str	r2, [r3]
UBRDIV0 = 0x22;
 c102aec:	e59f3024 	ldr	r3, [pc, #36]	; c102b18 <uart0_init+0x5c>
 c102af0:	e3a02022 	mov	r2, #34	; 0x22
 c102af4:	e5832000 	str	r2, [r3]
UCON0 = 0x5;
 c102af8:	e59f301c 	ldr	r3, [pc, #28]	; c102b1c <uart0_init+0x60>
 c102afc:	e3a02005 	mov	r2, #5
 c102b00:	e5832000 	str	r2, [r3]
}
 c102b04:	e24bd00c 	sub	sp, fp, #12
 c102b08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102b0c:	e12fff1e 	bx	lr
 c102b10:	01d00008 	.word	0x01d00008
 c102b14:	01d0000c 	.word	0x01d0000c
 c102b18:	01d00028 	.word	0x01d00028
 c102b1c:	01d00004 	.word	0x01d00004

0c102b20 <uart0_putchar>:

void uart0_putchar( char ch )
{
 c102b20:	e1a0c00d 	mov	ip, sp
 c102b24:	e92dd800 	push	{fp, ip, lr, pc}
 c102b28:	e24cb004 	sub	fp, ip, #4
 c102b2c:	e24dd008 	sub	sp, sp, #8
 c102b30:	e1a03000 	mov	r3, r0
 c102b34:	e54b300d 	strb	r3, [fp, #-13]
    while(UFSTAT0 & (1<<9));
 c102b38:	e1a00000 	nop			; (mov r0, r0)
 c102b3c:	e59f3034 	ldr	r3, [pc, #52]	; c102b78 <uart0_putchar+0x58>
 c102b40:	e5933000 	ldr	r3, [r3]
 c102b44:	e2033c02 	and	r3, r3, #512	; 0x200
 c102b48:	e3530000 	cmp	r3, #0
 c102b4c:	1afffffa 	bne	c102b3c <uart0_putchar+0x1c>
    UTXH0 = (UTXH0<<8) | ch;
 c102b50:	e59f3024 	ldr	r3, [pc, #36]	; c102b7c <uart0_putchar+0x5c>
 c102b54:	e59f2020 	ldr	r2, [pc, #32]	; c102b7c <uart0_putchar+0x5c>
 c102b58:	e5922000 	ldr	r2, [r2]
 c102b5c:	e1a01402 	lsl	r1, r2, #8
 c102b60:	e55b200d 	ldrb	r2, [fp, #-13]
 c102b64:	e1812002 	orr	r2, r1, r2
 c102b68:	e5832000 	str	r2, [r3]

}        
 c102b6c:	e24bd00c 	sub	sp, fp, #12
 c102b70:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102b74:	e12fff1e 	bx	lr
 c102b78:	01d00018 	.word	0x01d00018
 c102b7c:	01d00020 	.word	0x01d00020

0c102b80 <uart0_getchar>:

char uart0_getchar( void )
{//AZPIRICUETOS
 c102b80:	e1a0c00d 	mov	ip, sp
 c102b84:	e92dd800 	push	{fp, ip, lr, pc}
 c102b88:	e24cb004 	sub	fp, ip, #4
    while(!(UFSTAT0 & 0xf));
 c102b8c:	e1a00000 	nop			; (mov r0, r0)
 c102b90:	e59f3028 	ldr	r3, [pc, #40]	; c102bc0 <uart0_getchar+0x40>
 c102b94:	e5933000 	ldr	r3, [r3]
 c102b98:	e203300f 	and	r3, r3, #15
 c102b9c:	e3530000 	cmp	r3, #0
 c102ba0:	0afffffa 	beq	c102b90 <uart0_getchar+0x10>
    return URXH0;
 c102ba4:	e59f3018 	ldr	r3, [pc, #24]	; c102bc4 <uart0_getchar+0x44>
 c102ba8:	e5933000 	ldr	r3, [r3]
 c102bac:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c102bb0:	e1a00003 	mov	r0, r3
 c102bb4:	e24bd00c 	sub	sp, fp, #12
 c102bb8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102bbc:	e12fff1e 	bx	lr
 c102bc0:	01d00018 	.word	0x01d00018
 c102bc4:	01d00024 	.word	0x01d00024

0c102bc8 <uart0_puts>:

void uart0_puts( char *s )
{
 c102bc8:	e1a0c00d 	mov	ip, sp
 c102bcc:	e92dd800 	push	{fp, ip, lr, pc}
 c102bd0:	e24cb004 	sub	fp, ip, #4
 c102bd4:	e24dd010 	sub	sp, sp, #16
 c102bd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	int i = 0;
 c102bdc:	e3a03000 	mov	r3, #0
 c102be0:	e50b3010 	str	r3, [fp, #-16]
	while(s[i] != '\0'){
 c102be4:	ea000008 	b	c102c0c <uart0_puts+0x44>
		uart0_putchar(s[i]);
 c102be8:	e51b3010 	ldr	r3, [fp, #-16]
 c102bec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102bf0:	e0823003 	add	r3, r2, r3
 c102bf4:	e5d33000 	ldrb	r3, [r3]
 c102bf8:	e1a00003 	mov	r0, r3
 c102bfc:	ebffffc7 	bl	c102b20 <uart0_putchar>
		i++;
 c102c00:	e51b3010 	ldr	r3, [fp, #-16]
 c102c04:	e2833001 	add	r3, r3, #1
 c102c08:	e50b3010 	str	r3, [fp, #-16]
}

void uart0_puts( char *s )
{
	int i = 0;
	while(s[i] != '\0'){
 c102c0c:	e51b3010 	ldr	r3, [fp, #-16]
 c102c10:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102c14:	e0823003 	add	r3, r2, r3
 c102c18:	e5d33000 	ldrb	r3, [r3]
 c102c1c:	e3530000 	cmp	r3, #0
 c102c20:	1afffff0 	bne	c102be8 <uart0_puts+0x20>
		uart0_putchar(s[i]);
		i++;
	}

}
 c102c24:	e24bd00c 	sub	sp, fp, #12
 c102c28:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102c2c:	e12fff1e 	bx	lr

0c102c30 <uart0_putint>:

void uart0_putint( int32 i )
{
 c102c30:	e1a0c00d 	mov	ip, sp
 c102c34:	e92dd800 	push	{fp, ip, lr, pc}
 c102c38:	e24cb004 	sub	fp, ip, #4
 c102c3c:	e24dd020 	sub	sp, sp, #32
 c102c40:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    char buf[10 + 1 + 1];
	char *p = buf+11;
 c102c44:	e24b3020 	sub	r3, fp, #32
 c102c48:	e283300b 	add	r3, r3, #11
 c102c4c:	e50b3010 	str	r3, [fp, #-16]
	uint8 signo;//0 es negativo
	uint8 c;
	*p = '\0';
 c102c50:	e51b3010 	ldr	r3, [fp, #-16]
 c102c54:	e3a02000 	mov	r2, #0
 c102c58:	e5c32000 	strb	r2, [r3]

	if(i<0){
 c102c5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102c60:	e3530000 	cmp	r3, #0
 c102c64:	aa000005 	bge	c102c80 <uart0_putint+0x50>
		signo = 0;
 c102c68:	e3a03000 	mov	r3, #0
 c102c6c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i *= -1;
 c102c70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102c74:	e2633000 	rsb	r3, r3, #0
 c102c78:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c102c7c:	ea000001 	b	c102c88 <uart0_putint+0x58>
	}
	else{
		signo = 1;
 c102c80:	e3a03001 	mov	r3, #1
 c102c84:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	}

	do{
		c = i%10;
 c102c88:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c102c8c:	e59f30a8 	ldr	r3, [pc, #168]	; c102d3c <uart0_putint+0x10c>
 c102c90:	e0c32391 	smull	r2, r3, r1, r3
 c102c94:	e1a02143 	asr	r2, r3, #2
 c102c98:	e1a03fc1 	asr	r3, r1, #31
 c102c9c:	e0632002 	rsb	r2, r3, r2
 c102ca0:	e1a03002 	mov	r3, r2
 c102ca4:	e1a03103 	lsl	r3, r3, #2
 c102ca8:	e0833002 	add	r3, r3, r2
 c102cac:	e1a03083 	lsl	r3, r3, #1
 c102cb0:	e0632001 	rsb	r2, r3, r1
 c102cb4:	e1a03002 	mov	r3, r2
 c102cb8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		i = i/10;
 c102cbc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102cc0:	e59f2074 	ldr	r2, [pc, #116]	; c102d3c <uart0_putint+0x10c>
 c102cc4:	e0c21293 	smull	r1, r2, r3, r2
 c102cc8:	e1a02142 	asr	r2, r2, #2
 c102ccc:	e1a03fc3 	asr	r3, r3, #31
 c102cd0:	e0633002 	rsb	r3, r3, r2
 c102cd4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		*--p= c + '0';
 c102cd8:	e51b3010 	ldr	r3, [fp, #-16]
 c102cdc:	e2433001 	sub	r3, r3, #1
 c102ce0:	e50b3010 	str	r3, [fp, #-16]
 c102ce4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c102ce8:	e2833030 	add	r3, r3, #48	; 0x30
 c102cec:	e20320ff 	and	r2, r3, #255	; 0xff
 c102cf0:	e51b3010 	ldr	r3, [fp, #-16]
 c102cf4:	e5c32000 	strb	r2, [r3]
	}while(i);
 c102cf8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102cfc:	e3530000 	cmp	r3, #0
 c102d00:	1affffe0 	bne	c102c88 <uart0_putint+0x58>

	if(!signo){
 c102d04:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102d08:	e3530000 	cmp	r3, #0
 c102d0c:	1a000005 	bne	c102d28 <uart0_putint+0xf8>
		*--p= '-';
 c102d10:	e51b3010 	ldr	r3, [fp, #-16]
 c102d14:	e2433001 	sub	r3, r3, #1
 c102d18:	e50b3010 	str	r3, [fp, #-16]
 c102d1c:	e51b3010 	ldr	r3, [fp, #-16]
 c102d20:	e3a0202d 	mov	r2, #45	; 0x2d
 c102d24:	e5c32000 	strb	r2, [r3]
	}

	uart0_puts(p);
 c102d28:	e51b0010 	ldr	r0, [fp, #-16]
 c102d2c:	ebffffa5 	bl	c102bc8 <uart0_puts>
}
 c102d30:	e24bd00c 	sub	sp, fp, #12
 c102d34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102d38:	e12fff1e 	bx	lr
 c102d3c:	66666667 	.word	0x66666667

0c102d40 <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c102d40:	e1a0c00d 	mov	ip, sp
 c102d44:	e92dd800 	push	{fp, ip, lr, pc}
 c102d48:	e24cb004 	sub	fp, ip, #4
 c102d4c:	e24dd018 	sub	sp, sp, #24
 c102d50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c102d54:	e24b301c 	sub	r3, fp, #28
 c102d58:	e2833008 	add	r3, r3, #8
 c102d5c:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c102d60:	e51b3010 	ldr	r3, [fp, #-16]
 c102d64:	e3a02000 	mov	r2, #0
 c102d68:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c102d6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102d70:	e20330ff 	and	r3, r3, #255	; 0xff
 c102d74:	e203300f 	and	r3, r3, #15
 c102d78:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c102d7c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102d80:	e3530009 	cmp	r3, #9
 c102d84:	8a000008 	bhi	c102dac <uart0_puthex+0x6c>
            *--p = '0' + c;
 c102d88:	e51b3010 	ldr	r3, [fp, #-16]
 c102d8c:	e2433001 	sub	r3, r3, #1
 c102d90:	e50b3010 	str	r3, [fp, #-16]
 c102d94:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102d98:	e2833030 	add	r3, r3, #48	; 0x30
 c102d9c:	e20320ff 	and	r2, r3, #255	; 0xff
 c102da0:	e51b3010 	ldr	r3, [fp, #-16]
 c102da4:	e5c32000 	strb	r2, [r3]
 c102da8:	ea000007 	b	c102dcc <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c102dac:	e51b3010 	ldr	r3, [fp, #-16]
 c102db0:	e2433001 	sub	r3, r3, #1
 c102db4:	e50b3010 	str	r3, [fp, #-16]
 c102db8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102dbc:	e2833057 	add	r3, r3, #87	; 0x57
 c102dc0:	e20320ff 	and	r2, r3, #255	; 0xff
 c102dc4:	e51b3010 	ldr	r3, [fp, #-16]
 c102dc8:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c102dcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102dd0:	e1a03223 	lsr	r3, r3, #4
 c102dd4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c102dd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102ddc:	e3530000 	cmp	r3, #0
 c102de0:	1affffe1 	bne	c102d6c <uart0_puthex+0x2c>

    uart0_puts( p );
 c102de4:	e51b0010 	ldr	r0, [fp, #-16]
 c102de8:	ebffff76 	bl	c102bc8 <uart0_puts>
}
 c102dec:	e24bd00c 	sub	sp, fp, #12
 c102df0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102df4:	e12fff1e 	bx	lr

0c102df8 <uart0_gets>:

void uart0_gets( char *s )
{
 c102df8:	e1a0c00d 	mov	ip, sp
 c102dfc:	e92dd800 	push	{fp, ip, lr, pc}
 c102e00:	e24cb004 	sub	fp, ip, #4
 c102e04:	e24dd010 	sub	sp, sp, #16
 c102e08:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8

	char c = uart0_getchar();
 c102e0c:	ebffff5b 	bl	c102b80 <uart0_getchar>
 c102e10:	e1a03000 	mov	r3, r0
 c102e14:	e54b300d 	strb	r3, [fp, #-13]
	while(c != '\n'){
 c102e18:	ea000008 	b	c102e40 <uart0_gets+0x48>
		*s++ = c;
 c102e1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102e20:	e55b200d 	ldrb	r2, [fp, #-13]
 c102e24:	e5c32000 	strb	r2, [r3]
 c102e28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102e2c:	e2833001 	add	r3, r3, #1
 c102e30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		c =  uart0_getchar();
 c102e34:	ebffff51 	bl	c102b80 <uart0_getchar>
 c102e38:	e1a03000 	mov	r3, r0
 c102e3c:	e54b300d 	strb	r3, [fp, #-13]

void uart0_gets( char *s )
{

	char c = uart0_getchar();
	while(c != '\n'){
 c102e40:	e55b300d 	ldrb	r3, [fp, #-13]
 c102e44:	e353000a 	cmp	r3, #10
 c102e48:	1afffff3 	bne	c102e1c <uart0_gets+0x24>
		*s++ = c;
		c =  uart0_getchar();
	}
	*s = '\0';
 c102e4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102e50:	e3a02000 	mov	r2, #0
 c102e54:	e5c32000 	strb	r2, [r3]
}
 c102e58:	e24bd00c 	sub	sp, fp, #12
 c102e5c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e60:	e12fff1e 	bx	lr

0c102e64 <uart0_getint>:

int32 uart0_getint( void )
{
 c102e64:	e1a0c00d 	mov	ip, sp
 c102e68:	e92dd800 	push	{fp, ip, lr, pc}
 c102e6c:	e24cb004 	sub	fp, ip, #4
 c102e70:	e24dd010 	sub	sp, sp, #16
	int32 sol = 0, signo = 1;
 c102e74:	e3a03000 	mov	r3, #0
 c102e78:	e50b3010 	str	r3, [fp, #-16]
 c102e7c:	e3a03001 	mov	r3, #1
 c102e80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	char x = uart0_getchar();
 c102e84:	ebffff3d 	bl	c102b80 <uart0_getchar>
 c102e88:	e1a03000 	mov	r3, r0
 c102e8c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	if(x == '-'){
 c102e90:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102e94:	e353002d 	cmp	r3, #45	; 0x2d
 c102e98:	1a000015 	bne	c102ef4 <uart0_getint+0x90>
		signo = -1;
 c102e9c:	e3e03000 	mvn	r3, #0
 c102ea0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		x = uart0_getchar();
 c102ea4:	ebffff35 	bl	c102b80 <uart0_getchar>
 c102ea8:	e1a03000 	mov	r3, r0
 c102eac:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	}
	while(x != '\n'){
 c102eb0:	ea00000f 	b	c102ef4 <uart0_getint+0x90>
		sol *= 10;
 c102eb4:	e51b2010 	ldr	r2, [fp, #-16]
 c102eb8:	e1a03002 	mov	r3, r2
 c102ebc:	e1a03103 	lsl	r3, r3, #2
 c102ec0:	e0833002 	add	r3, r3, r2
 c102ec4:	e1a03083 	lsl	r3, r3, #1
 c102ec8:	e50b3010 	str	r3, [fp, #-16]
		int32 aux = x - '0';
 c102ecc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102ed0:	e2433030 	sub	r3, r3, #48	; 0x30
 c102ed4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		sol += aux;
 c102ed8:	e51b2010 	ldr	r2, [fp, #-16]
 c102edc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c102ee0:	e0823003 	add	r3, r2, r3
 c102ee4:	e50b3010 	str	r3, [fp, #-16]
		x = uart0_getchar();
 c102ee8:	ebffff24 	bl	c102b80 <uart0_getchar>
 c102eec:	e1a03000 	mov	r3, r0
 c102ef0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	char x = uart0_getchar();
	if(x == '-'){
		signo = -1;
		x = uart0_getchar();
	}
	while(x != '\n'){
 c102ef4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102ef8:	e353000a 	cmp	r3, #10
 c102efc:	1affffec 	bne	c102eb4 <uart0_getint+0x50>
		sol *= 10;
		int32 aux = x - '0';
		sol += aux;
		x = uart0_getchar();
	}
	return sol*signo;
 c102f00:	e51b3010 	ldr	r3, [fp, #-16]
 c102f04:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c102f08:	e0030392 	mul	r3, r2, r3
}
 c102f0c:	e1a00003 	mov	r0, r3
 c102f10:	e24bd00c 	sub	sp, fp, #12
 c102f14:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102f18:	e12fff1e 	bx	lr

0c102f1c <uart0_gethex>:

uint32 uart0_gethex( void )
{//no estoy completamente seguro
 c102f1c:	e1a0c00d 	mov	ip, sp
 c102f20:	e92dd800 	push	{fp, ip, lr, pc}
 c102f24:	e24cb004 	sub	fp, ip, #4
 c102f28:	e24dd020 	sub	sp, sp, #32
	uint32 sol = 0, aux;
 c102f2c:	e3a03000 	mov	r3, #0
 c102f30:	e50b3010 	str	r3, [fp, #-16]
	char buf[8 + 1], x = uart0_getchar();
 c102f34:	ebffff11 	bl	c102b80 <uart0_getchar>
 c102f38:	e1a03000 	mov	r3, r0
 c102f3c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uint32 i = 0, j = 0;
 c102f40:	e3a03000 	mov	r3, #0
 c102f44:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c102f48:	e3a03000 	mov	r3, #0
 c102f4c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	do{
		buf [i] = x;
 c102f50:	e3e0301f 	mvn	r3, #31
 c102f54:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102f58:	e24b100c 	sub	r1, fp, #12
 c102f5c:	e0812002 	add	r2, r1, r2
 c102f60:	e0823003 	add	r3, r2, r3
 c102f64:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c102f68:	e5c32000 	strb	r2, [r3]
		x = uart0_getchar();
 c102f6c:	ebffff03 	bl	c102b80 <uart0_getchar>
 c102f70:	e1a03000 	mov	r3, r0
 c102f74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		i++;
 c102f78:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c102f7c:	e2833001 	add	r3, r3, #1
 c102f80:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	}while(x != '\n');
 c102f84:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102f88:	e353000a 	cmp	r3, #10
 c102f8c:	1affffef 	bne	c102f50 <uart0_gethex+0x34>
	buf[i] = '\0';
 c102f90:	e3e0301f 	mvn	r3, #31
 c102f94:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102f98:	e24b100c 	sub	r1, fp, #12
 c102f9c:	e0812002 	add	r2, r1, r2
 c102fa0:	e0823003 	add	r3, r2, r3
 c102fa4:	e3a02000 	mov	r2, #0
 c102fa8:	e5c32000 	strb	r2, [r3]
	while(buf[j] != '\0'){
 c102fac:	ea000036 	b	c10308c <uart0_gethex+0x170>
		aux = buf[j];
 c102fb0:	e3e0301f 	mvn	r3, #31
 c102fb4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102fb8:	e24b100c 	sub	r1, fp, #12
 c102fbc:	e0812002 	add	r2, r1, r2
 c102fc0:	e0823003 	add	r3, r2, r3
 c102fc4:	e5d33000 	ldrb	r3, [r3]
 c102fc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if(buf[j] >= 97){
 c102fcc:	e3e0301f 	mvn	r3, #31
 c102fd0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102fd4:	e24b100c 	sub	r1, fp, #12
 c102fd8:	e0812002 	add	r2, r1, r2
 c102fdc:	e0823003 	add	r3, r2, r3
 c102fe0:	e5d33000 	ldrb	r3, [r3]
 c102fe4:	e3530060 	cmp	r3, #96	; 0x60
 c102fe8:	9a000006 	bls	c103008 <uart0_gethex+0xec>
			aux -= 'a';
 c102fec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102ff0:	e2433061 	sub	r3, r3, #97	; 0x61
 c102ff4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			aux += 10;
 c102ff8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102ffc:	e283300a 	add	r3, r3, #10
 c103000:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103004:	ea000011 	b	c103050 <uart0_gethex+0x134>
		}
		else if(buf[j] >= 65){
 c103008:	e3e0301f 	mvn	r3, #31
 c10300c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c103010:	e24b100c 	sub	r1, fp, #12
 c103014:	e0812002 	add	r2, r1, r2
 c103018:	e0823003 	add	r3, r2, r3
 c10301c:	e5d33000 	ldrb	r3, [r3]
 c103020:	e3530040 	cmp	r3, #64	; 0x40
 c103024:	9a000006 	bls	c103044 <uart0_gethex+0x128>
			aux -= 'A';
 c103028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10302c:	e2433041 	sub	r3, r3, #65	; 0x41
 c103030:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			aux += 10;
 c103034:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103038:	e283300a 	add	r3, r3, #10
 c10303c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103040:	ea000002 	b	c103050 <uart0_gethex+0x134>
		}
		else{ aux -= '0';}
 c103044:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103048:	e2433030 	sub	r3, r3, #48	; 0x30
 c10304c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		sol += aux;
 c103050:	e51b2010 	ldr	r2, [fp, #-16]
 c103054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103058:	e0823003 	add	r3, r2, r3
 c10305c:	e50b3010 	str	r3, [fp, #-16]
		if(j < i - 1){
 c103060:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103064:	e2432001 	sub	r2, r3, #1
 c103068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10306c:	e1520003 	cmp	r2, r3
 c103070:	9a000002 	bls	c103080 <uart0_gethex+0x164>
			sol *= 16;
 c103074:	e51b3010 	ldr	r3, [fp, #-16]
 c103078:	e1a03203 	lsl	r3, r3, #4
 c10307c:	e50b3010 	str	r3, [fp, #-16]
		}
		j++;
 c103080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103084:	e2833001 	add	r3, r3, #1
 c103088:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		buf [i] = x;
		x = uart0_getchar();
		i++;
	}while(x != '\n');
	buf[i] = '\0';
	while(buf[j] != '\0'){
 c10308c:	e3e0301f 	mvn	r3, #31
 c103090:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c103094:	e24b100c 	sub	r1, fp, #12
 c103098:	e0812002 	add	r2, r1, r2
 c10309c:	e0823003 	add	r3, r2, r3
 c1030a0:	e5d33000 	ldrb	r3, [r3]
 c1030a4:	e3530000 	cmp	r3, #0
 c1030a8:	1affffc0 	bne	c102fb0 <uart0_gethex+0x94>
			sol *= 16;
		}
		j++;
	}

	return sol;
 c1030ac:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1030b0:	e1a00003 	mov	r0, r3
 c1030b4:	e24bd00c 	sub	sp, fp, #12
 c1030b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1030bc:	e12fff1e 	bx	lr

0c1030c0 <uda1341ts_init>:

static uint8 volume;
static uint8 state;

void uda1341ts_init( void )
{
 c1030c0:	e1a0c00d 	mov	ip, sp
 c1030c4:	e92dd800 	push	{fp, ip, lr, pc}
 c1030c8:	e24cb004 	sub	fp, ip, #4
    L3_init();     
 c1030cc:	eb0000dd 	bl	c103448 <L3_init>
    
    L3_putByte( (ADDRESS << 2) | STATUS, L3_ADDR_MODE );
 c1030d0:	e3a00016 	mov	r0, #22
 c1030d4:	e3a01000 	mov	r1, #0
 c1030d8:	eb0000e6 	bl	c103478 <L3_putByte>
    L3_putByte( (1 << 6) | (2 << 4), L3_DATA_MODE );
 c1030dc:	e3a00060 	mov	r0, #96	; 0x60
 c1030e0:	e3a01001 	mov	r1, #1
 c1030e4:	eb0000e3 	bl	c103478 <L3_putByte>
    L3_putByte( (2 << 4), L3_DATA_MODE );
 c1030e8:	e3a00020 	mov	r0, #32
 c1030ec:	e3a01001 	mov	r1, #1
 c1030f0:	eb0000e0 	bl	c103478 <L3_putByte>

    L3_putByte( (ADDRESS << 2) | DATA0, L3_ADDR_MODE  ); 
 c1030f4:	e3a00014 	mov	r0, #20
 c1030f8:	e3a01000 	mov	r1, #0
 c1030fc:	eb0000dd 	bl	c103478 <L3_putByte>
    L3_putByte( EA | (2), L3_DATA_MODE ); 
 c103100:	e3a000c2 	mov	r0, #194	; 0xc2
 c103104:	e3a01001 	mov	r1, #1
 c103108:	eb0000da 	bl	c103478 <L3_putByte>
    L3_putByte( ED | 1, L3_DATA_MODE );
 c10310c:	e3a000e1 	mov	r0, #225	; 0xe1
 c103110:	e3a01001 	mov	r1, #1
 c103114:	eb0000d7 	bl	c103478 <L3_putByte>
  
    uda1341ts_setvol( VOL_MED );
 c103118:	e3a00020 	mov	r0, #32
 c10311c:	eb00006a 	bl	c1032cc <uda1341ts_setvol>

    uda1341ts_on( UDA_DAC );
 c103120:	e3a00001 	mov	r0, #1
 c103124:	eb00001b 	bl	c103198 <uda1341ts_on>
    uda1341ts_on( UDA_ADC );
 c103128:	e3a00002 	mov	r0, #2
 c10312c:	eb000019 	bl	c103198 <uda1341ts_on>
}
 c103130:	e24bd00c 	sub	sp, fp, #12
 c103134:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103138:	e12fff1e 	bx	lr

0c10313c <uda1341ts_mute>:

void uda1341ts_mute( uint8 on )
{
 c10313c:	e1a0c00d 	mov	ip, sp
 c103140:	e92dd800 	push	{fp, ip, lr, pc}
 c103144:	e24cb004 	sub	fp, ip, #4
 c103148:	e24dd008 	sub	sp, sp, #8
 c10314c:	e1a03000 	mov	r3, r0
 c103150:	e54b300d 	strb	r3, [fp, #-13]
    L3_putByte((ADDRESS << 2)|DATA0, L3_ADDR_MODE);
 c103154:	e3a00014 	mov	r0, #20
 c103158:	e3a01000 	mov	r1, #0
 c10315c:	eb0000c5 	bl	c103478 <L3_putByte>
    L3_putByte(0x2 << 6 | ((on & 1)<< 2), L3_DATA_MODE );
 c103160:	e55b300d 	ldrb	r3, [fp, #-13]
 c103164:	e2033001 	and	r3, r3, #1
 c103168:	e1a03103 	lsl	r3, r3, #2
 c10316c:	e20330ff 	and	r3, r3, #255	; 0xff
 c103170:	e1e03c83 	mvn	r3, r3, lsl #25
 c103174:	e1e03ca3 	mvn	r3, r3, lsr #25
 c103178:	e20330ff 	and	r3, r3, #255	; 0xff
 c10317c:	e20330ff 	and	r3, r3, #255	; 0xff
 c103180:	e1a00003 	mov	r0, r3
 c103184:	e3a01001 	mov	r1, #1
 c103188:	eb0000ba 	bl	c103478 <L3_putByte>
};
 c10318c:	e24bd00c 	sub	sp, fp, #12
 c103190:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103194:	e12fff1e 	bx	lr

0c103198 <uda1341ts_on>:

void uda1341ts_on( uint8 converter )
{
 c103198:	e1a0c00d 	mov	ip, sp
 c10319c:	e92dd800 	push	{fp, ip, lr, pc}
 c1031a0:	e24cb004 	sub	fp, ip, #4
 c1031a4:	e24dd008 	sub	sp, sp, #8
 c1031a8:	e1a03000 	mov	r3, r0
 c1031ac:	e54b300d 	strb	r3, [fp, #-13]
	state |= (1<<7) | converter;
 c1031b0:	e59f304c 	ldr	r3, [pc, #76]	; c103204 <uda1341ts_on+0x6c>
 c1031b4:	e5d32000 	ldrb	r2, [r3]
 c1031b8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1031bc:	e1823003 	orr	r3, r2, r3
 c1031c0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1031c4:	e1e03c83 	mvn	r3, r3, lsl #25
 c1031c8:	e1e03ca3 	mvn	r3, r3, lsr #25
 c1031cc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1031d0:	e59f302c 	ldr	r3, [pc, #44]	; c103204 <uda1341ts_on+0x6c>
 c1031d4:	e5c32000 	strb	r2, [r3]
    L3_putByte((ADDRESS << 2) | STATUS, L3_ADDR_MODE);
 c1031d8:	e3a00016 	mov	r0, #22
 c1031dc:	e3a01000 	mov	r1, #0
 c1031e0:	eb0000a4 	bl	c103478 <L3_putByte>
    L3_putByte(state, L3_DATA_MODE );
 c1031e4:	e59f3018 	ldr	r3, [pc, #24]	; c103204 <uda1341ts_on+0x6c>
 c1031e8:	e5d33000 	ldrb	r3, [r3]
 c1031ec:	e1a00003 	mov	r0, r3
 c1031f0:	e3a01001 	mov	r1, #1
 c1031f4:	eb00009f 	bl	c103478 <L3_putByte>
}
 c1031f8:	e24bd00c 	sub	sp, fp, #12
 c1031fc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103200:	e12fff1e 	bx	lr
 c103204:	0c104c29 	.word	0x0c104c29

0c103208 <uda1341ts_off>:

void uda1341ts_off( uint8 converter )
{
 c103208:	e1a0c00d 	mov	ip, sp
 c10320c:	e92dd800 	push	{fp, ip, lr, pc}
 c103210:	e24cb004 	sub	fp, ip, #4
 c103214:	e24dd008 	sub	sp, sp, #8
 c103218:	e1a03000 	mov	r3, r0
 c10321c:	e54b300d 	strb	r3, [fp, #-13]
	state &= ~converter;
 c103220:	e55b300d 	ldrb	r3, [fp, #-13]
 c103224:	e1e03003 	mvn	r3, r3
 c103228:	e20320ff 	and	r2, r3, #255	; 0xff
 c10322c:	e59f3044 	ldr	r3, [pc, #68]	; c103278 <uda1341ts_off+0x70>
 c103230:	e5d33000 	ldrb	r3, [r3]
 c103234:	e20330ff 	and	r3, r3, #255	; 0xff
 c103238:	e0023003 	and	r3, r2, r3
 c10323c:	e20330ff 	and	r3, r3, #255	; 0xff
 c103240:	e20320ff 	and	r2, r3, #255	; 0xff
 c103244:	e59f302c 	ldr	r3, [pc, #44]	; c103278 <uda1341ts_off+0x70>
 c103248:	e5c32000 	strb	r2, [r3]
	L3_putByte((ADDRESS << 2) | STATUS, L3_ADDR_MODE);
 c10324c:	e3a00016 	mov	r0, #22
 c103250:	e3a01000 	mov	r1, #0
 c103254:	eb000087 	bl	c103478 <L3_putByte>
	L3_putByte(state, L3_DATA_MODE );
 c103258:	e59f3018 	ldr	r3, [pc, #24]	; c103278 <uda1341ts_off+0x70>
 c10325c:	e5d33000 	ldrb	r3, [r3]
 c103260:	e1a00003 	mov	r0, r3
 c103264:	e3a01001 	mov	r1, #1
 c103268:	eb000082 	bl	c103478 <L3_putByte>
}
 c10326c:	e24bd00c 	sub	sp, fp, #12
 c103270:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103274:	e12fff1e 	bx	lr
 c103278:	0c104c29 	.word	0x0c104c29

0c10327c <uda1341ts_status>:

uint8 uda1341ts_status( uint8 converter )
{
 c10327c:	e1a0c00d 	mov	ip, sp
 c103280:	e92dd800 	push	{fp, ip, lr, pc}
 c103284:	e24cb004 	sub	fp, ip, #4
 c103288:	e24dd008 	sub	sp, sp, #8
 c10328c:	e1a03000 	mov	r3, r0
 c103290:	e54b300d 	strb	r3, [fp, #-13]
    return (state >> (converter - 1)) & 1;
 c103294:	e59f302c 	ldr	r3, [pc, #44]	; c1032c8 <uda1341ts_status+0x4c>
 c103298:	e5d33000 	ldrb	r3, [r3]
 c10329c:	e1a02003 	mov	r2, r3
 c1032a0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1032a4:	e2433001 	sub	r3, r3, #1
 c1032a8:	e1a03352 	asr	r3, r2, r3
 c1032ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c1032b0:	e2033001 	and	r3, r3, #1
 c1032b4:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c1032b8:	e1a00003 	mov	r0, r3
 c1032bc:	e24bd00c 	sub	sp, fp, #12
 c1032c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1032c4:	e12fff1e 	bx	lr
 c1032c8:	0c104c29 	.word	0x0c104c29

0c1032cc <uda1341ts_setvol>:

void uda1341ts_setvol( uint8 vol )
{
 c1032cc:	e1a0c00d 	mov	ip, sp
 c1032d0:	e92dd800 	push	{fp, ip, lr, pc}
 c1032d4:	e24cb004 	sub	fp, ip, #4
 c1032d8:	e24dd008 	sub	sp, sp, #8
 c1032dc:	e1a03000 	mov	r3, r0
 c1032e0:	e54b300d 	strb	r3, [fp, #-13]
	L3_putByte((ADDRESS << 2)|DATA0, L3_ADDR_MODE);
 c1032e4:	e3a00014 	mov	r0, #20
 c1032e8:	e3a01000 	mov	r1, #0
 c1032ec:	eb000061 	bl	c103478 <L3_putByte>
	L3_putByte(0x3f & (0x3f - vol), L3_DATA_MODE );
 c1032f0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1032f4:	e263303f 	rsb	r3, r3, #63	; 0x3f
 c1032f8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1032fc:	e203303f 	and	r3, r3, #63	; 0x3f
 c103300:	e20330ff 	and	r3, r3, #255	; 0xff
 c103304:	e1a00003 	mov	r0, r3
 c103308:	e3a01001 	mov	r1, #1
 c10330c:	eb000059 	bl	c103478 <L3_putByte>
	volume = vol;
 c103310:	e59f3010 	ldr	r3, [pc, #16]	; c103328 <uda1341ts_setvol+0x5c>
 c103314:	e55b200d 	ldrb	r2, [fp, #-13]
 c103318:	e5c32000 	strb	r2, [r3]
};
 c10331c:	e24bd00c 	sub	sp, fp, #12
 c103320:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103324:	e12fff1e 	bx	lr
 c103328:	0c104c28 	.word	0x0c104c28

0c10332c <uda1341ts_getvol>:

uint8 uda1341ts_getvol( void )
{
 c10332c:	e1a0c00d 	mov	ip, sp
 c103330:	e92dd800 	push	{fp, ip, lr, pc}
 c103334:	e24cb004 	sub	fp, ip, #4
    return volume;
 c103338:	e59f3010 	ldr	r3, [pc, #16]	; c103350 <uda1341ts_getvol+0x24>
 c10333c:	e5d33000 	ldrb	r3, [r3]
};
 c103340:	e1a00003 	mov	r0, r3
 c103344:	e24bd00c 	sub	sp, fp, #12
 c103348:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10334c:	e12fff1e 	bx	lr
 c103350:	0c104c28 	.word	0x0c104c28

0c103354 <bdma0_init>:
#include <dma.h>

extern void isr_BDMA0_dummy( void ); 

void bdma0_init( void )
{
 c103354:	e1a0c00d 	mov	ip, sp
 c103358:	e92dd800 	push	{fp, ip, lr, pc}
 c10335c:	e24cb004 	sub	fp, ip, #4
    BDCON0  = 0;
 c103360:	e3a0377e 	mov	r3, #33030144	; 0x1f80000
 c103364:	e3a02000 	mov	r2, #0
 c103368:	e5832000 	str	r2, [r3]
    BDISRC0 = 0;
 c10336c:	e59f3028 	ldr	r3, [pc, #40]	; c10339c <bdma0_init+0x48>
 c103370:	e3a02000 	mov	r2, #0
 c103374:	e5832000 	str	r2, [r3]
    BDIDES0 = 0;
 c103378:	e59f3020 	ldr	r3, [pc, #32]	; c1033a0 <bdma0_init+0x4c>
 c10337c:	e3a02000 	mov	r2, #0
 c103380:	e5832000 	str	r2, [r3]
    BDICNT0 = 0;
 c103384:	e59f3018 	ldr	r3, [pc, #24]	; c1033a4 <bdma0_init+0x50>
 c103388:	e3a02000 	mov	r2, #0
 c10338c:	e5832000 	str	r2, [r3]
}
 c103390:	e24bd00c 	sub	sp, fp, #12
 c103394:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103398:	e12fff1e 	bx	lr
 c10339c:	01f80004 	.word	0x01f80004
 c1033a0:	01f80008 	.word	0x01f80008
 c1033a4:	01f8000c 	.word	0x01f8000c

0c1033a8 <bdma0_open>:

void bdma0_open( void (*isr)(void) )
{
 c1033a8:	e1a0c00d 	mov	ip, sp
 c1033ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1033b0:	e24cb004 	sub	fp, ip, #4
 c1033b4:	e24dd008 	sub	sp, sp, #8
 c1033b8:	e50b0010 	str	r0, [fp, #-16]
    pISR_BDMA0 = (uint32)isr;
 c1033bc:	e59f3034 	ldr	r3, [pc, #52]	; c1033f8 <bdma0_open+0x50>
 c1033c0:	e51b2010 	ldr	r2, [fp, #-16]
 c1033c4:	e5832000 	str	r2, [r3]
    I_ISPC     = BIT_BDMA0;
 c1033c8:	e59f302c 	ldr	r3, [pc, #44]	; c1033fc <bdma0_open+0x54>
 c1033cc:	e3a02802 	mov	r2, #131072	; 0x20000
 c1033d0:	e5832000 	str	r2, [r3]
    INTMSK    &= ~(BIT_GLOBAL | BIT_BDMA0);
 c1033d4:	e59f2024 	ldr	r2, [pc, #36]	; c103400 <bdma0_open+0x58>
 c1033d8:	e59f3020 	ldr	r3, [pc, #32]	; c103400 <bdma0_open+0x58>
 c1033dc:	e5933000 	ldr	r3, [r3]
 c1033e0:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c1033e4:	e3c33802 	bic	r3, r3, #131072	; 0x20000
 c1033e8:	e5823000 	str	r3, [r2]
}
 c1033ec:	e24bd00c 	sub	sp, fp, #12
 c1033f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1033f4:	e12fff1e 	bx	lr
 c1033f8:	0c7fff64 	.word	0x0c7fff64
 c1033fc:	01e00024 	.word	0x01e00024
 c103400:	01e0000c 	.word	0x01e0000c

0c103404 <bdma0_close>:

void bdma0_close( void )
{
 c103404:	e1a0c00d 	mov	ip, sp
 c103408:	e92dd800 	push	{fp, ip, lr, pc}
 c10340c:	e24cb004 	sub	fp, ip, #4
    INTMSK    |= BIT_BDMA0;
 c103410:	e59f3024 	ldr	r3, [pc, #36]	; c10343c <bdma0_close+0x38>
 c103414:	e59f2020 	ldr	r2, [pc, #32]	; c10343c <bdma0_close+0x38>
 c103418:	e5922000 	ldr	r2, [r2]
 c10341c:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c103420:	e5832000 	str	r2, [r3]
    pISR_BDMA0 = (uint32)isr_BDMA0_dummy;
 c103424:	e59f3014 	ldr	r3, [pc, #20]	; c103440 <bdma0_close+0x3c>
 c103428:	e59f2014 	ldr	r2, [pc, #20]	; c103444 <bdma0_close+0x40>
 c10342c:	e5832000 	str	r2, [r3]
}
 c103430:	e24bd00c 	sub	sp, fp, #12
 c103434:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103438:	e12fff1e 	bx	lr
 c10343c:	01e0000c 	.word	0x01e0000c
 c103440:	0c7fff64 	.word	0x0c7fff64
 c103444:	0c101c90 	.word	0x0c101c90

0c103448 <L3_init>:
#include <leds.h>

#define SHORT_DELAY    { int8 j; for( j=0; j<4; j++ ); }

void L3_init( void )
{
 c103448:	e1a0c00d 	mov	ip, sp
 c10344c:	e92dd800 	push	{fp, ip, lr, pc}
 c103450:	e24cb004 	sub	fp, ip, #4
    PDATB |= (L3_DATA_MODE << 4) | (1<<5);
 c103454:	e59f3018 	ldr	r3, [pc, #24]	; c103474 <L3_init+0x2c>
 c103458:	e59f2014 	ldr	r2, [pc, #20]	; c103474 <L3_init+0x2c>
 c10345c:	e5922000 	ldr	r2, [r2]
 c103460:	e3822030 	orr	r2, r2, #48	; 0x30
 c103464:	e5832000 	str	r2, [r3]
}
 c103468:	e24bd00c 	sub	sp, fp, #12
 c10346c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103470:	e12fff1e 	bx	lr
 c103474:	01d2000c 	.word	0x01d2000c

0c103478 <L3_putByte>:

void L3_putByte( uint8 byte, uint8 mode )
{
 c103478:	e1a0c00d 	mov	ip, sp
 c10347c:	e92dd800 	push	{fp, ip, lr, pc}
 c103480:	e24cb004 	sub	fp, ip, #4
 c103484:	e24dd010 	sub	sp, sp, #16
 c103488:	e1a02000 	mov	r2, r0
 c10348c:	e1a03001 	mov	r3, r1
 c103490:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c103494:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
    uint8 i;
    uint8 rled, lled;
    
    rled = !led_status( RIGHT_LED );
 c103498:	e3a00002 	mov	r0, #2
 c10349c:	eb000099 	bl	c103708 <led_status>
 c1034a0:	e1a03000 	mov	r3, r0
 c1034a4:	e3530000 	cmp	r3, #0
 c1034a8:	13a03000 	movne	r3, #0
 c1034ac:	03a03001 	moveq	r3, #1
 c1034b0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    lled = !led_status( LEFT_LED );    
 c1034b4:	e3a00001 	mov	r0, #1
 c1034b8:	eb000092 	bl	c103708 <led_status>
 c1034bc:	e1a03000 	mov	r3, r0
 c1034c0:	e3530000 	cmp	r3, #0
 c1034c4:	13a03000 	movne	r3, #0
 c1034c8:	03a03001 	moveq	r3, #1
 c1034cc:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
   
    PDATB =  (1 << 5) | (mode << 4);
 c1034d0:	e59f3114 	ldr	r3, [pc, #276]	; c1035ec <L3_putByte+0x174>
 c1034d4:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c1034d8:	e1a02202 	lsl	r2, r2, #4
 c1034dc:	e3822020 	orr	r2, r2, #32
 c1034e0:	e5832000 	str	r2, [r3]
    SHORT_DELAY;
 c1034e4:	e3a03000 	mov	r3, #0
 c1034e8:	e54b300e 	strb	r3, [fp, #-14]
 c1034ec:	ea000002 	b	c1034fc <L3_putByte+0x84>
 c1034f0:	e55b300e 	ldrb	r3, [fp, #-14]
 c1034f4:	e2833001 	add	r3, r3, #1
 c1034f8:	e54b300e 	strb	r3, [fp, #-14]
 c1034fc:	e15b30de 	ldrsb	r3, [fp, #-14]
 c103500:	e3530003 	cmp	r3, #3
 c103504:	dafffff9 	ble	c1034f0 <L3_putByte+0x78>

    for( i=0; i<8; i++ )
 c103508:	e3a03000 	mov	r3, #0
 c10350c:	e54b300d 	strb	r3, [fp, #-13]
 c103510:	ea000027 	b	c1035b4 <L3_putByte+0x13c>
    {
        PDATB = (0<<5) | (mode << 4);
 c103514:	e59f30d0 	ldr	r3, [pc, #208]	; c1035ec <L3_putByte+0x174>
 c103518:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c10351c:	e1a02202 	lsl	r2, r2, #4
 c103520:	e5832000 	str	r2, [r3]
        PDATA = (byte & (1 << i)) << (9-i);
 c103524:	e59f30c4 	ldr	r3, [pc, #196]	; c1035f0 <L3_putByte+0x178>
 c103528:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
 c10352c:	e55b200d 	ldrb	r2, [fp, #-13]
 c103530:	e3a00001 	mov	r0, #1
 c103534:	e1a02210 	lsl	r2, r0, r2
 c103538:	e0011002 	and	r1, r1, r2
 c10353c:	e55b200d 	ldrb	r2, [fp, #-13]
 c103540:	e2622009 	rsb	r2, r2, #9
 c103544:	e1a02211 	lsl	r2, r1, r2
 c103548:	e5832000 	str	r2, [r3]
        SHORT_DELAY;    
 c10354c:	e3a03000 	mov	r3, #0
 c103550:	e54b300f 	strb	r3, [fp, #-15]
 c103554:	ea000002 	b	c103564 <L3_putByte+0xec>
 c103558:	e55b300f 	ldrb	r3, [fp, #-15]
 c10355c:	e2833001 	add	r3, r3, #1
 c103560:	e54b300f 	strb	r3, [fp, #-15]
 c103564:	e15b30df 	ldrsb	r3, [fp, #-15]
 c103568:	e3530003 	cmp	r3, #3
 c10356c:	dafffff9 	ble	c103558 <L3_putByte+0xe0>
        PDATB = (1<<5) | (mode << 4);
 c103570:	e59f3074 	ldr	r3, [pc, #116]	; c1035ec <L3_putByte+0x174>
 c103574:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c103578:	e1a02202 	lsl	r2, r2, #4
 c10357c:	e3822020 	orr	r2, r2, #32
 c103580:	e5832000 	str	r2, [r3]
        SHORT_DELAY;
 c103584:	e3a03000 	mov	r3, #0
 c103588:	e54b3010 	strb	r3, [fp, #-16]
 c10358c:	ea000002 	b	c10359c <L3_putByte+0x124>
 c103590:	e55b3010 	ldrb	r3, [fp, #-16]
 c103594:	e2833001 	add	r3, r3, #1
 c103598:	e54b3010 	strb	r3, [fp, #-16]
 c10359c:	e15b31d0 	ldrsb	r3, [fp, #-16]
 c1035a0:	e3530003 	cmp	r3, #3
 c1035a4:	dafffff9 	ble	c103590 <L3_putByte+0x118>
    lled = !led_status( LEFT_LED );    
   
    PDATB =  (1 << 5) | (mode << 4);
    SHORT_DELAY;

    for( i=0; i<8; i++ )
 c1035a8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1035ac:	e2833001 	add	r3, r3, #1
 c1035b0:	e54b300d 	strb	r3, [fp, #-13]
 c1035b4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1035b8:	e3530007 	cmp	r3, #7
 c1035bc:	9affffd4 	bls	c103514 <L3_putByte+0x9c>
        PDATA = (byte & (1 << i)) << (9-i);
        SHORT_DELAY;    
        PDATB = (1<<5) | (mode << 4);
        SHORT_DELAY;
    }
    PDATB = (rled << 10) | (lled << 9) | (1 << 5) | (1 << 4);   
 c1035c0:	e59f3024 	ldr	r3, [pc, #36]	; c1035ec <L3_putByte+0x174>
 c1035c4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c1035c8:	e1a01502 	lsl	r1, r2, #10
 c1035cc:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
 c1035d0:	e1a02482 	lsl	r2, r2, #9
 c1035d4:	e1812002 	orr	r2, r1, r2
 c1035d8:	e3822030 	orr	r2, r2, #48	; 0x30
 c1035dc:	e5832000 	str	r2, [r3]
}
 c1035e0:	e24bd00c 	sub	sp, fp, #12
 c1035e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1035e8:	e12fff1e 	bx	lr
 c1035ec:	01d2000c 	.word	0x01d2000c
 c1035f0:	01d20004 	.word	0x01d20004

0c1035f4 <leds_init>:
#include <s3c44b0x.h>
#include <leds.h>

void leds_init( void )
{
 c1035f4:	e1a0c00d 	mov	ip, sp
 c1035f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1035fc:	e24cb004 	sub	fp, ip, #4
    led_off(LEFT_LED);
 c103600:	e3a00001 	mov	r0, #1
 c103604:	eb000016 	bl	c103664 <led_off>
    led_off(RIGHT_LED);
 c103608:	e3a00002 	mov	r0, #2
 c10360c:	eb000014 	bl	c103664 <led_off>
}
 c103610:	e24bd00c 	sub	sp, fp, #12
 c103614:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103618:	e12fff1e 	bx	lr

0c10361c <led_on>:

void led_on( uint8 led )
{
 c10361c:	e1a0c00d 	mov	ip, sp
 c103620:	e92dd800 	push	{fp, ip, lr, pc}
 c103624:	e24cb004 	sub	fp, ip, #4
 c103628:	e24dd008 	sub	sp, sp, #8
 c10362c:	e1a03000 	mov	r3, r0
 c103630:	e54b300d 	strb	r3, [fp, #-13]
	PDATB &=~(led<<9);
 c103634:	e59f3024 	ldr	r3, [pc, #36]	; c103660 <led_on+0x44>
 c103638:	e59f2020 	ldr	r2, [pc, #32]	; c103660 <led_on+0x44>
 c10363c:	e5921000 	ldr	r1, [r2]
 c103640:	e55b200d 	ldrb	r2, [fp, #-13]
 c103644:	e1a02482 	lsl	r2, r2, #9
 c103648:	e1e02002 	mvn	r2, r2
 c10364c:	e0012002 	and	r2, r1, r2
 c103650:	e5832000 	str	r2, [r3]
}
 c103654:	e24bd00c 	sub	sp, fp, #12
 c103658:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10365c:	e12fff1e 	bx	lr
 c103660:	01d2000c 	.word	0x01d2000c

0c103664 <led_off>:

void led_off( uint8 led )
{
 c103664:	e1a0c00d 	mov	ip, sp
 c103668:	e92dd800 	push	{fp, ip, lr, pc}
 c10366c:	e24cb004 	sub	fp, ip, #4
 c103670:	e24dd008 	sub	sp, sp, #8
 c103674:	e1a03000 	mov	r3, r0
 c103678:	e54b300d 	strb	r3, [fp, #-13]
	PDATB |= led<<9;
 c10367c:	e59f3020 	ldr	r3, [pc, #32]	; c1036a4 <led_off+0x40>
 c103680:	e59f201c 	ldr	r2, [pc, #28]	; c1036a4 <led_off+0x40>
 c103684:	e5921000 	ldr	r1, [r2]
 c103688:	e55b200d 	ldrb	r2, [fp, #-13]
 c10368c:	e1a02482 	lsl	r2, r2, #9
 c103690:	e1812002 	orr	r2, r1, r2
 c103694:	e5832000 	str	r2, [r3]
}
 c103698:	e24bd00c 	sub	sp, fp, #12
 c10369c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1036a0:	e12fff1e 	bx	lr
 c1036a4:	01d2000c 	.word	0x01d2000c

0c1036a8 <led_toggle>:

void led_toggle( uint8 led )
{
 c1036a8:	e1a0c00d 	mov	ip, sp
 c1036ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1036b0:	e24cb004 	sub	fp, ip, #4
 c1036b4:	e24dd010 	sub	sp, sp, #16
 c1036b8:	e1a03000 	mov	r3, r0
 c1036bc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    uint8 st = led_status(led);
 c1036c0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1036c4:	e1a00003 	mov	r0, r3
 c1036c8:	eb00000e 	bl	c103708 <led_status>
 c1036cc:	e1a03000 	mov	r3, r0
 c1036d0:	e54b300d 	strb	r3, [fp, #-13]
    if(st == 0){
 c1036d4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1036d8:	e3530000 	cmp	r3, #0
 c1036dc:	1a000003 	bne	c1036f0 <led_toggle+0x48>
    	led_on(led);
 c1036e0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1036e4:	e1a00003 	mov	r0, r3
 c1036e8:	ebffffcb 	bl	c10361c <led_on>
 c1036ec:	ea000002 	b	c1036fc <led_toggle+0x54>
    }
    else{
    	led_off(led);
 c1036f0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1036f4:	e1a00003 	mov	r0, r3
 c1036f8:	ebffffd9 	bl	c103664 <led_off>
    }
}
 c1036fc:	e24bd00c 	sub	sp, fp, #12
 c103700:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103704:	e12fff1e 	bx	lr

0c103708 <led_status>:

uint8 led_status( uint8 led )
{
 c103708:	e1a0c00d 	mov	ip, sp
 c10370c:	e92dd800 	push	{fp, ip, lr, pc}
 c103710:	e24cb004 	sub	fp, ip, #4
 c103714:	e24dd008 	sub	sp, sp, #8
 c103718:	e1a03000 	mov	r3, r0
 c10371c:	e54b300d 	strb	r3, [fp, #-13]
	if(PDATB&(1<<led+8)){
 c103720:	e59f3038 	ldr	r3, [pc, #56]	; c103760 <led_status+0x58>
 c103724:	e5932000 	ldr	r2, [r3]
 c103728:	e55b300d 	ldrb	r3, [fp, #-13]
 c10372c:	e2833008 	add	r3, r3, #8
 c103730:	e3a01001 	mov	r1, #1
 c103734:	e1a03311 	lsl	r3, r1, r3
 c103738:	e0023003 	and	r3, r2, r3
 c10373c:	e3530000 	cmp	r3, #0
 c103740:	0a000001 	beq	c10374c <led_status+0x44>
		return 0;
 c103744:	e3a03000 	mov	r3, #0
 c103748:	ea000000 	b	c103750 <led_status+0x48>
	}
	else{
		return 1;
 c10374c:	e3a03001 	mov	r3, #1
	}
}
 c103750:	e1a00003 	mov	r0, r3
 c103754:	e24bd00c 	sub	sp, fp, #12
 c103758:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10375c:	e12fff1e 	bx	lr
 c103760:	01d2000c 	.word	0x01d2000c

0c103764 <__aeabi_uidiv>:
 c103764:	e2512001 	subs	r2, r1, #1
 c103768:	012fff1e 	bxeq	lr
 c10376c:	3a000036 	bcc	c10384c <__aeabi_uidiv+0xe8>
 c103770:	e1500001 	cmp	r0, r1
 c103774:	9a000022 	bls	c103804 <__aeabi_uidiv+0xa0>
 c103778:	e1110002 	tst	r1, r2
 c10377c:	0a000023 	beq	c103810 <__aeabi_uidiv+0xac>
 c103780:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c103784:	01a01181 	lsleq	r1, r1, #3
 c103788:	03a03008 	moveq	r3, #8
 c10378c:	13a03001 	movne	r3, #1
 c103790:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c103794:	31510000 	cmpcc	r1, r0
 c103798:	31a01201 	lslcc	r1, r1, #4
 c10379c:	31a03203 	lslcc	r3, r3, #4
 c1037a0:	3afffffa 	bcc	c103790 <__aeabi_uidiv+0x2c>
 c1037a4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c1037a8:	31510000 	cmpcc	r1, r0
 c1037ac:	31a01081 	lslcc	r1, r1, #1
 c1037b0:	31a03083 	lslcc	r3, r3, #1
 c1037b4:	3afffffa 	bcc	c1037a4 <__aeabi_uidiv+0x40>
 c1037b8:	e3a02000 	mov	r2, #0
 c1037bc:	e1500001 	cmp	r0, r1
 c1037c0:	20400001 	subcs	r0, r0, r1
 c1037c4:	21822003 	orrcs	r2, r2, r3
 c1037c8:	e15000a1 	cmp	r0, r1, lsr #1
 c1037cc:	204000a1 	subcs	r0, r0, r1, lsr #1
 c1037d0:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c1037d4:	e1500121 	cmp	r0, r1, lsr #2
 c1037d8:	20400121 	subcs	r0, r0, r1, lsr #2
 c1037dc:	21822123 	orrcs	r2, r2, r3, lsr #2
 c1037e0:	e15001a1 	cmp	r0, r1, lsr #3
 c1037e4:	204001a1 	subcs	r0, r0, r1, lsr #3
 c1037e8:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c1037ec:	e3500000 	cmp	r0, #0
 c1037f0:	11b03223 	lsrsne	r3, r3, #4
 c1037f4:	11a01221 	lsrne	r1, r1, #4
 c1037f8:	1affffef 	bne	c1037bc <__aeabi_uidiv+0x58>
 c1037fc:	e1a00002 	mov	r0, r2
 c103800:	e12fff1e 	bx	lr
 c103804:	03a00001 	moveq	r0, #1
 c103808:	13a00000 	movne	r0, #0
 c10380c:	e12fff1e 	bx	lr
 c103810:	e3510801 	cmp	r1, #65536	; 0x10000
 c103814:	21a01821 	lsrcs	r1, r1, #16
 c103818:	23a02010 	movcs	r2, #16
 c10381c:	33a02000 	movcc	r2, #0
 c103820:	e3510c01 	cmp	r1, #256	; 0x100
 c103824:	21a01421 	lsrcs	r1, r1, #8
 c103828:	22822008 	addcs	r2, r2, #8
 c10382c:	e3510010 	cmp	r1, #16
 c103830:	21a01221 	lsrcs	r1, r1, #4
 c103834:	22822004 	addcs	r2, r2, #4
 c103838:	e3510004 	cmp	r1, #4
 c10383c:	82822003 	addhi	r2, r2, #3
 c103840:	908220a1 	addls	r2, r2, r1, lsr #1
 c103844:	e1a00230 	lsr	r0, r0, r2
 c103848:	e12fff1e 	bx	lr
 c10384c:	e3500000 	cmp	r0, #0
 c103850:	13e00000 	mvnne	r0, #0
 c103854:	ea000007 	b	c103878 <__aeabi_idiv0>

0c103858 <__aeabi_uidivmod>:
 c103858:	e3510000 	cmp	r1, #0
 c10385c:	0afffffa 	beq	c10384c <__aeabi_uidiv+0xe8>
 c103860:	e92d4003 	push	{r0, r1, lr}
 c103864:	ebffffbe 	bl	c103764 <__aeabi_uidiv>
 c103868:	e8bd4006 	pop	{r1, r2, lr}
 c10386c:	e0030092 	mul	r3, r2, r0
 c103870:	e0411003 	sub	r1, r1, r3
 c103874:	e12fff1e 	bx	lr

0c103878 <__aeabi_idiv0>:
 c103878:	e12fff1e 	bx	lr

0c10387c <__aeabi_uldivmod>:
 c10387c:	e3530000 	cmp	r3, #0
 c103880:	03520000 	cmpeq	r2, #0
 c103884:	1a000004 	bne	c10389c <__aeabi_uldivmod+0x20>
 c103888:	e3510000 	cmp	r1, #0
 c10388c:	03500000 	cmpeq	r0, #0
 c103890:	13e01000 	mvnne	r1, #0
 c103894:	13e00000 	mvnne	r0, #0
 c103898:	eafffff6 	b	c103878 <__aeabi_idiv0>
 c10389c:	e24dd008 	sub	sp, sp, #8
 c1038a0:	e92d6000 	push	{sp, lr}
 c1038a4:	eb000013 	bl	c1038f8 <__gnu_uldivmod_helper>
 c1038a8:	e59de004 	ldr	lr, [sp, #4]
 c1038ac:	e28dd008 	add	sp, sp, #8
 c1038b0:	e8bd000c 	pop	{r2, r3}
 c1038b4:	e12fff1e 	bx	lr

0c1038b8 <__gnu_ldivmod_helper>:
 c1038b8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c1038bc:	e1a04002 	mov	r4, r2
 c1038c0:	e1a07003 	mov	r7, r3
 c1038c4:	e1a05000 	mov	r5, r0
 c1038c8:	e1a06001 	mov	r6, r1
 c1038cc:	eb000019 	bl	c103938 <__divdi3>
 c1038d0:	e0070790 	mul	r7, r0, r7
 c1038d4:	e0832490 	umull	r2, r3, r0, r4
 c1038d8:	e0247491 	mla	r4, r1, r4, r7
 c1038dc:	e0843003 	add	r3, r4, r3
 c1038e0:	e0555002 	subs	r5, r5, r2
 c1038e4:	e0c66003 	sbc	r6, r6, r3
 c1038e8:	e59d3018 	ldr	r3, [sp, #24]
 c1038ec:	e8830060 	stm	r3, {r5, r6}
 c1038f0:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c1038f4:	e12fff1e 	bx	lr

0c1038f8 <__gnu_uldivmod_helper>:
 c1038f8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c1038fc:	e1a04002 	mov	r4, r2
 c103900:	e1a07003 	mov	r7, r3
 c103904:	e1a05000 	mov	r5, r0
 c103908:	e1a06001 	mov	r6, r1
 c10390c:	eb000133 	bl	c103de0 <__udivdi3>
 c103910:	e0070790 	mul	r7, r0, r7
 c103914:	e0832490 	umull	r2, r3, r0, r4
 c103918:	e0247491 	mla	r4, r1, r4, r7
 c10391c:	e0843003 	add	r3, r4, r3
 c103920:	e0555002 	subs	r5, r5, r2
 c103924:	e0c66003 	sbc	r6, r6, r3
 c103928:	e59d3018 	ldr	r3, [sp, #24]
 c10392c:	e8830060 	stm	r3, {r5, r6}
 c103930:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c103934:	e12fff1e 	bx	lr

0c103938 <__divdi3>:
 c103938:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10393c:	e3510000 	cmp	r1, #0
 c103940:	e24dd014 	sub	sp, sp, #20
 c103944:	e1a0c003 	mov	ip, r3
 c103948:	a3a07000 	movge	r7, #0
 c10394c:	ba000094 	blt	c103ba4 <__divdi3+0x26c>
 c103950:	e35c0000 	cmp	ip, #0
 c103954:	ba00008e 	blt	c103b94 <__divdi3+0x25c>
 c103958:	e253a000 	subs	sl, r3, #0
 c10395c:	e1a0b000 	mov	fp, r0
 c103960:	e1a08001 	mov	r8, r1
 c103964:	e1a09002 	mov	r9, r2
 c103968:	e1a04002 	mov	r4, r2
 c10396c:	e1a05000 	mov	r5, r0
 c103970:	e1a06001 	mov	r6, r1
 c103974:	1a00003e 	bne	c103a74 <__divdi3+0x13c>
 c103978:	e1520001 	cmp	r2, r1
 c10397c:	9a00004c 	bls	c103ab4 <__divdi3+0x17c>
 c103980:	e1a00002 	mov	r0, r2
 c103984:	eb000222 	bl	c104214 <__clzsi2>
 c103988:	e3500000 	cmp	r0, #0
 c10398c:	12603020 	rsbne	r3, r0, #32
 c103990:	11a0333b 	lsrne	r3, fp, r3
 c103994:	11a04019 	lslne	r4, r9, r0
 c103998:	11836018 	orrne	r6, r3, r8, lsl r0
 c10399c:	e1a09824 	lsr	r9, r4, #16
 c1039a0:	11a0501b 	lslne	r5, fp, r0
 c1039a4:	e1a01009 	mov	r1, r9
 c1039a8:	e1a00006 	mov	r0, r6
 c1039ac:	ebffff6c 	bl	c103764 <__aeabi_uidiv>
 c1039b0:	e1a01009 	mov	r1, r9
 c1039b4:	e1a0a000 	mov	sl, r0
 c1039b8:	e1a00006 	mov	r0, r6
 c1039bc:	ebffffa5 	bl	c103858 <__aeabi_uidivmod>
 c1039c0:	e1a08804 	lsl	r8, r4, #16
 c1039c4:	e1a08828 	lsr	r8, r8, #16
 c1039c8:	e0030a98 	mul	r3, r8, sl
 c1039cc:	e1a0b825 	lsr	fp, r5, #16
 c1039d0:	e18bb801 	orr	fp, fp, r1, lsl #16
 c1039d4:	e153000b 	cmp	r3, fp
 c1039d8:	9a000005 	bls	c1039f4 <__divdi3+0xbc>
 c1039dc:	e09bb004 	adds	fp, fp, r4
 c1039e0:	e24aa001 	sub	sl, sl, #1
 c1039e4:	2a000002 	bcs	c1039f4 <__divdi3+0xbc>
 c1039e8:	e153000b 	cmp	r3, fp
 c1039ec:	824aa001 	subhi	sl, sl, #1
 c1039f0:	808bb004 	addhi	fp, fp, r4
 c1039f4:	e063b00b 	rsb	fp, r3, fp
 c1039f8:	e1a01009 	mov	r1, r9
 c1039fc:	e1a0000b 	mov	r0, fp
 c103a00:	ebffff57 	bl	c103764 <__aeabi_uidiv>
 c103a04:	e1a01009 	mov	r1, r9
 c103a08:	e1a06000 	mov	r6, r0
 c103a0c:	e1a0000b 	mov	r0, fp
 c103a10:	ebffff90 	bl	c103858 <__aeabi_uidivmod>
 c103a14:	e0080896 	mul	r8, r6, r8
 c103a18:	e1a00805 	lsl	r0, r5, #16
 c103a1c:	e1a05820 	lsr	r5, r0, #16
 c103a20:	e1855801 	orr	r5, r5, r1, lsl #16
 c103a24:	e1580005 	cmp	r8, r5
 c103a28:	9a000004 	bls	c103a40 <__divdi3+0x108>
 c103a2c:	e0955004 	adds	r5, r5, r4
 c103a30:	e2466001 	sub	r6, r6, #1
 c103a34:	2a000001 	bcs	c103a40 <__divdi3+0x108>
 c103a38:	e1580005 	cmp	r8, r5
 c103a3c:	82466001 	subhi	r6, r6, #1
 c103a40:	e186680a 	orr	r6, r6, sl, lsl #16
 c103a44:	e3a09000 	mov	r9, #0
 c103a48:	e3570000 	cmp	r7, #0
 c103a4c:	e1a03006 	mov	r3, r6
 c103a50:	e1a04009 	mov	r4, r9
 c103a54:	0a000001 	beq	c103a60 <__divdi3+0x128>
 c103a58:	e2733000 	rsbs	r3, r3, #0
 c103a5c:	e2e44000 	rsc	r4, r4, #0
 c103a60:	e1a00003 	mov	r0, r3
 c103a64:	e1a01004 	mov	r1, r4
 c103a68:	e28dd014 	add	sp, sp, #20
 c103a6c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c103a70:	e12fff1e 	bx	lr
 c103a74:	e15a0001 	cmp	sl, r1
 c103a78:	83a09000 	movhi	r9, #0
 c103a7c:	81a06009 	movhi	r6, r9
 c103a80:	8afffff0 	bhi	c103a48 <__divdi3+0x110>
 c103a84:	e1a00003 	mov	r0, r3
 c103a88:	eb0001e1 	bl	c104214 <__clzsi2>
 c103a8c:	e2504000 	subs	r4, r0, #0
 c103a90:	1a00007a 	bne	c103c80 <__divdi3+0x348>
 c103a94:	e15a0008 	cmp	sl, r8
 c103a98:	2159000b 	cmpcs	r9, fp
 c103a9c:	83a09000 	movhi	r9, #0
 c103aa0:	93a09001 	movls	r9, #1
 c103aa4:	93a06001 	movls	r6, #1
 c103aa8:	91a09004 	movls	r9, r4
 c103aac:	81a06009 	movhi	r6, r9
 c103ab0:	eaffffe4 	b	c103a48 <__divdi3+0x110>
 c103ab4:	e3520000 	cmp	r2, #0
 c103ab8:	1a000003 	bne	c103acc <__divdi3+0x194>
 c103abc:	e3a00001 	mov	r0, #1
 c103ac0:	e1a01002 	mov	r1, r2
 c103ac4:	ebffff26 	bl	c103764 <__aeabi_uidiv>
 c103ac8:	e1a04000 	mov	r4, r0
 c103acc:	e1a00004 	mov	r0, r4
 c103ad0:	eb0001cf 	bl	c104214 <__clzsi2>
 c103ad4:	e2503000 	subs	r3, r0, #0
 c103ad8:	1a000035 	bne	c103bb4 <__divdi3+0x27c>
 c103adc:	e3a01001 	mov	r1, #1
 c103ae0:	e1a09804 	lsl	r9, r4, #16
 c103ae4:	e58d1008 	str	r1, [sp, #8]
 c103ae8:	e0646006 	rsb	r6, r4, r6
 c103aec:	e1a08824 	lsr	r8, r4, #16
 c103af0:	e1a09829 	lsr	r9, r9, #16
 c103af4:	e1a01008 	mov	r1, r8
 c103af8:	e1a00006 	mov	r0, r6
 c103afc:	ebffff18 	bl	c103764 <__aeabi_uidiv>
 c103b00:	e1a01008 	mov	r1, r8
 c103b04:	e1a0a000 	mov	sl, r0
 c103b08:	e1a00006 	mov	r0, r6
 c103b0c:	ebffff51 	bl	c103858 <__aeabi_uidivmod>
 c103b10:	e0030a99 	mul	r3, r9, sl
 c103b14:	e1a0c825 	lsr	ip, r5, #16
 c103b18:	e18cb801 	orr	fp, ip, r1, lsl #16
 c103b1c:	e153000b 	cmp	r3, fp
 c103b20:	9a000005 	bls	c103b3c <__divdi3+0x204>
 c103b24:	e09bb004 	adds	fp, fp, r4
 c103b28:	e24aa001 	sub	sl, sl, #1
 c103b2c:	2a000002 	bcs	c103b3c <__divdi3+0x204>
 c103b30:	e153000b 	cmp	r3, fp
 c103b34:	824aa001 	subhi	sl, sl, #1
 c103b38:	808bb004 	addhi	fp, fp, r4
 c103b3c:	e063b00b 	rsb	fp, r3, fp
 c103b40:	e1a01008 	mov	r1, r8
 c103b44:	e1a0000b 	mov	r0, fp
 c103b48:	ebffff05 	bl	c103764 <__aeabi_uidiv>
 c103b4c:	e1a01008 	mov	r1, r8
 c103b50:	e1a06000 	mov	r6, r0
 c103b54:	e1a0000b 	mov	r0, fp
 c103b58:	ebffff3e 	bl	c103858 <__aeabi_uidivmod>
 c103b5c:	e0090996 	mul	r9, r6, r9
 c103b60:	e1a00805 	lsl	r0, r5, #16
 c103b64:	e1a05820 	lsr	r5, r0, #16
 c103b68:	e1855801 	orr	r5, r5, r1, lsl #16
 c103b6c:	e1590005 	cmp	r9, r5
 c103b70:	9a000004 	bls	c103b88 <__divdi3+0x250>
 c103b74:	e0955004 	adds	r5, r5, r4
 c103b78:	e2466001 	sub	r6, r6, #1
 c103b7c:	2a000001 	bcs	c103b88 <__divdi3+0x250>
 c103b80:	e1590005 	cmp	r9, r5
 c103b84:	82466001 	subhi	r6, r6, #1
 c103b88:	e186680a 	orr	r6, r6, sl, lsl #16
 c103b8c:	e59d9008 	ldr	r9, [sp, #8]
 c103b90:	eaffffac 	b	c103a48 <__divdi3+0x110>
 c103b94:	e1e07007 	mvn	r7, r7
 c103b98:	e2722000 	rsbs	r2, r2, #0
 c103b9c:	e2e33000 	rsc	r3, r3, #0
 c103ba0:	eaffff6c 	b	c103958 <__divdi3+0x20>
 c103ba4:	e2700000 	rsbs	r0, r0, #0
 c103ba8:	e2e11000 	rsc	r1, r1, #0
 c103bac:	e3e07000 	mvn	r7, #0
 c103bb0:	eaffff66 	b	c103950 <__divdi3+0x18>
 c103bb4:	e2638020 	rsb	r8, r3, #32
 c103bb8:	e1a0b835 	lsr	fp, r5, r8
 c103bbc:	e1a04314 	lsl	r4, r4, r3
 c103bc0:	e1a0a836 	lsr	sl, r6, r8
 c103bc4:	e18be316 	orr	lr, fp, r6, lsl r3
 c103bc8:	e1a08824 	lsr	r8, r4, #16
 c103bcc:	e1a0c804 	lsl	ip, r4, #16
 c103bd0:	e1a01008 	mov	r1, r8
 c103bd4:	e1a0000a 	mov	r0, sl
 c103bd8:	e1a0982c 	lsr	r9, ip, #16
 c103bdc:	e1a05315 	lsl	r5, r5, r3
 c103be0:	e58de008 	str	lr, [sp, #8]
 c103be4:	ebfffede 	bl	c103764 <__aeabi_uidiv>
 c103be8:	e1a01008 	mov	r1, r8
 c103bec:	e1a0b000 	mov	fp, r0
 c103bf0:	e1a0000a 	mov	r0, sl
 c103bf4:	ebffff17 	bl	c103858 <__aeabi_uidivmod>
 c103bf8:	e0030b99 	mul	r3, r9, fp
 c103bfc:	e59d2008 	ldr	r2, [sp, #8]
 c103c00:	e1a06822 	lsr	r6, r2, #16
 c103c04:	e1866801 	orr	r6, r6, r1, lsl #16
 c103c08:	e1530006 	cmp	r3, r6
 c103c0c:	9a000002 	bls	c103c1c <__divdi3+0x2e4>
 c103c10:	e0966004 	adds	r6, r6, r4
 c103c14:	e24bb001 	sub	fp, fp, #1
 c103c18:	3a00006c 	bcc	c103dd0 <__divdi3+0x498>
 c103c1c:	e0636006 	rsb	r6, r3, r6
 c103c20:	e1a01008 	mov	r1, r8
 c103c24:	e1a00006 	mov	r0, r6
 c103c28:	ebfffecd 	bl	c103764 <__aeabi_uidiv>
 c103c2c:	e1a01008 	mov	r1, r8
 c103c30:	e1a0a000 	mov	sl, r0
 c103c34:	e1a00006 	mov	r0, r6
 c103c38:	ebffff06 	bl	c103858 <__aeabi_uidivmod>
 c103c3c:	e0030a99 	mul	r3, r9, sl
 c103c40:	e59d2008 	ldr	r2, [sp, #8]
 c103c44:	e1a06802 	lsl	r6, r2, #16
 c103c48:	e1a00826 	lsr	r0, r6, #16
 c103c4c:	e1806801 	orr	r6, r0, r1, lsl #16
 c103c50:	e1530006 	cmp	r3, r6
 c103c54:	9a000005 	bls	c103c70 <__divdi3+0x338>
 c103c58:	e0966004 	adds	r6, r6, r4
 c103c5c:	e24aa001 	sub	sl, sl, #1
 c103c60:	2a000002 	bcs	c103c70 <__divdi3+0x338>
 c103c64:	e1530006 	cmp	r3, r6
 c103c68:	824aa001 	subhi	sl, sl, #1
 c103c6c:	80866004 	addhi	r6, r6, r4
 c103c70:	e0636006 	rsb	r6, r3, r6
 c103c74:	e18a380b 	orr	r3, sl, fp, lsl #16
 c103c78:	e58d3008 	str	r3, [sp, #8]
 c103c7c:	eaffff9c 	b	c103af4 <__divdi3+0x1bc>
 c103c80:	e2641020 	rsb	r1, r4, #32
 c103c84:	e1a00139 	lsr	r0, r9, r1
 c103c88:	e1a0213b 	lsr	r2, fp, r1
 c103c8c:	e180a41a 	orr	sl, r0, sl, lsl r4
 c103c90:	e1a06138 	lsr	r6, r8, r1
 c103c94:	e1828418 	orr	r8, r2, r8, lsl r4
 c103c98:	e1a0380a 	lsl	r3, sl, #16
 c103c9c:	e1a0b82a 	lsr	fp, sl, #16
 c103ca0:	e1a0e823 	lsr	lr, r3, #16
 c103ca4:	e1a0100b 	mov	r1, fp
 c103ca8:	e1a00006 	mov	r0, r6
 c103cac:	e58d8008 	str	r8, [sp, #8]
 c103cb0:	e58de00c 	str	lr, [sp, #12]
 c103cb4:	ebfffeaa 	bl	c103764 <__aeabi_uidiv>
 c103cb8:	e1a0100b 	mov	r1, fp
 c103cbc:	e1a08000 	mov	r8, r0
 c103cc0:	e1a00006 	mov	r0, r6
 c103cc4:	ebfffee3 	bl	c103858 <__aeabi_uidivmod>
 c103cc8:	e59dc00c 	ldr	ip, [sp, #12]
 c103ccc:	e002089c 	mul	r2, ip, r8
 c103cd0:	e59d3008 	ldr	r3, [sp, #8]
 c103cd4:	e1a06823 	lsr	r6, r3, #16
 c103cd8:	e1861801 	orr	r1, r6, r1, lsl #16
 c103cdc:	e1520001 	cmp	r2, r1
 c103ce0:	e1a03419 	lsl	r3, r9, r4
 c103ce4:	9a000002 	bls	c103cf4 <__divdi3+0x3bc>
 c103ce8:	e091100a 	adds	r1, r1, sl
 c103cec:	e2488001 	sub	r8, r8, #1
 c103cf0:	3a000032 	bcc	c103dc0 <__divdi3+0x488>
 c103cf4:	e0629001 	rsb	r9, r2, r1
 c103cf8:	e1a00009 	mov	r0, r9
 c103cfc:	e1a0100b 	mov	r1, fp
 c103d00:	e58d3004 	str	r3, [sp, #4]
 c103d04:	ebfffe96 	bl	c103764 <__aeabi_uidiv>
 c103d08:	e1a0100b 	mov	r1, fp
 c103d0c:	e1a06000 	mov	r6, r0
 c103d10:	e1a00009 	mov	r0, r9
 c103d14:	ebfffecf 	bl	c103858 <__aeabi_uidivmod>
 c103d18:	e59d000c 	ldr	r0, [sp, #12]
 c103d1c:	e0020690 	mul	r2, r0, r6
 c103d20:	e59d3008 	ldr	r3, [sp, #8]
 c103d24:	e1a0c803 	lsl	ip, r3, #16
 c103d28:	e1a0982c 	lsr	r9, ip, #16
 c103d2c:	e1890801 	orr	r0, r9, r1, lsl #16
 c103d30:	e1520000 	cmp	r2, r0
 c103d34:	e59d3004 	ldr	r3, [sp, #4]
 c103d38:	9a000002 	bls	c103d48 <__divdi3+0x410>
 c103d3c:	e090000a 	adds	r0, r0, sl
 c103d40:	e2466001 	sub	r6, r6, #1
 c103d44:	3a000019 	bcc	c103db0 <__divdi3+0x478>
 c103d48:	e062e000 	rsb	lr, r2, r0
 c103d4c:	e1866808 	orr	r6, r6, r8, lsl #16
 c103d50:	e1a02826 	lsr	r2, r6, #16
 c103d54:	e1a01823 	lsr	r1, r3, #16
 c103d58:	e1c6c802 	bic	ip, r6, r2, lsl #16
 c103d5c:	e1c39801 	bic	r9, r3, r1, lsl #16
 c103d60:	e003099c 	mul	r3, ip, r9
 c103d64:	e0090992 	mul	r9, r2, r9
 c103d68:	e00c0c91 	mul	ip, r1, ip
 c103d6c:	e0010192 	mul	r1, r2, r1
 c103d70:	e099c00c 	adds	ip, r9, ip
 c103d74:	22811801 	addcs	r1, r1, #65536	; 0x10000
 c103d78:	e093380c 	adds	r3, r3, ip, lsl #16
 c103d7c:	e0a1182c 	adc	r1, r1, ip, lsr #16
 c103d80:	e15e0001 	cmp	lr, r1
 c103d84:	3a000006 	bcc	c103da4 <__divdi3+0x46c>
 c103d88:	13a02000 	movne	r2, #0
 c103d8c:	03a02001 	moveq	r2, #1
 c103d90:	e1530415 	cmp	r3, r5, lsl r4
 c103d94:	93a09000 	movls	r9, #0
 c103d98:	82029001 	andhi	r9, r2, #1
 c103d9c:	e3590000 	cmp	r9, #0
 c103da0:	0affff28 	beq	c103a48 <__divdi3+0x110>
 c103da4:	e2466001 	sub	r6, r6, #1
 c103da8:	e3a09000 	mov	r9, #0
 c103dac:	eaffff25 	b	c103a48 <__divdi3+0x110>
 c103db0:	e1520000 	cmp	r2, r0
 c103db4:	82466001 	subhi	r6, r6, #1
 c103db8:	8080000a 	addhi	r0, r0, sl
 c103dbc:	eaffffe1 	b	c103d48 <__divdi3+0x410>
 c103dc0:	e1520001 	cmp	r2, r1
 c103dc4:	82488001 	subhi	r8, r8, #1
 c103dc8:	8081100a 	addhi	r1, r1, sl
 c103dcc:	eaffffc8 	b	c103cf4 <__divdi3+0x3bc>
 c103dd0:	e1530006 	cmp	r3, r6
 c103dd4:	824bb001 	subhi	fp, fp, #1
 c103dd8:	80866004 	addhi	r6, r6, r4
 c103ddc:	eaffff8e 	b	c103c1c <__divdi3+0x2e4>

0c103de0 <__udivdi3>:
 c103de0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c103de4:	e2538000 	subs	r8, r3, #0
 c103de8:	e24dd00c 	sub	sp, sp, #12
 c103dec:	e1a05000 	mov	r5, r0
 c103df0:	e1a04001 	mov	r4, r1
 c103df4:	e1a06002 	mov	r6, r2
 c103df8:	e1a0a002 	mov	sl, r2
 c103dfc:	e1a0b000 	mov	fp, r0
 c103e00:	e1a07001 	mov	r7, r1
 c103e04:	1a000037 	bne	c103ee8 <__udivdi3+0x108>
 c103e08:	e1520001 	cmp	r2, r1
 c103e0c:	9a000045 	bls	c103f28 <__udivdi3+0x148>
 c103e10:	e1a00002 	mov	r0, r2
 c103e14:	eb0000fe 	bl	c104214 <__clzsi2>
 c103e18:	e3500000 	cmp	r0, #0
 c103e1c:	12603020 	rsbne	r3, r0, #32
 c103e20:	11a03335 	lsrne	r3, r5, r3
 c103e24:	11a0a016 	lslne	sl, r6, r0
 c103e28:	11837014 	orrne	r7, r3, r4, lsl r0
 c103e2c:	e1a0482a 	lsr	r4, sl, #16
 c103e30:	11a0b015 	lslne	fp, r5, r0
 c103e34:	e1a01004 	mov	r1, r4
 c103e38:	e1a00007 	mov	r0, r7
 c103e3c:	ebfffe48 	bl	c103764 <__aeabi_uidiv>
 c103e40:	e1a01004 	mov	r1, r4
 c103e44:	e1a08000 	mov	r8, r0
 c103e48:	e1a00007 	mov	r0, r7
 c103e4c:	ebfffe81 	bl	c103858 <__aeabi_uidivmod>
 c103e50:	e1a0680a 	lsl	r6, sl, #16
 c103e54:	e1a06826 	lsr	r6, r6, #16
 c103e58:	e0030896 	mul	r3, r6, r8
 c103e5c:	e1a0782b 	lsr	r7, fp, #16
 c103e60:	e1877801 	orr	r7, r7, r1, lsl #16
 c103e64:	e1530007 	cmp	r3, r7
 c103e68:	9a000005 	bls	c103e84 <__udivdi3+0xa4>
 c103e6c:	e097700a 	adds	r7, r7, sl
 c103e70:	e2488001 	sub	r8, r8, #1
 c103e74:	2a000002 	bcs	c103e84 <__udivdi3+0xa4>
 c103e78:	e1530007 	cmp	r3, r7
 c103e7c:	82488001 	subhi	r8, r8, #1
 c103e80:	8087700a 	addhi	r7, r7, sl
 c103e84:	e0637007 	rsb	r7, r3, r7
 c103e88:	e1a01004 	mov	r1, r4
 c103e8c:	e1a00007 	mov	r0, r7
 c103e90:	ebfffe33 	bl	c103764 <__aeabi_uidiv>
 c103e94:	e1a01004 	mov	r1, r4
 c103e98:	e1a05000 	mov	r5, r0
 c103e9c:	e1a00007 	mov	r0, r7
 c103ea0:	ebfffe6c 	bl	c103858 <__aeabi_uidivmod>
 c103ea4:	e0060695 	mul	r6, r5, r6
 c103ea8:	e1a0080b 	lsl	r0, fp, #16
 c103eac:	e1a0b820 	lsr	fp, r0, #16
 c103eb0:	e18bb801 	orr	fp, fp, r1, lsl #16
 c103eb4:	e156000b 	cmp	r6, fp
 c103eb8:	9a000004 	bls	c103ed0 <__udivdi3+0xf0>
 c103ebc:	e09bb00a 	adds	fp, fp, sl
 c103ec0:	e2455001 	sub	r5, r5, #1
 c103ec4:	2a000001 	bcs	c103ed0 <__udivdi3+0xf0>
 c103ec8:	e156000b 	cmp	r6, fp
 c103ecc:	82455001 	subhi	r5, r5, #1
 c103ed0:	e1858808 	orr	r8, r5, r8, lsl #16
 c103ed4:	e3a01000 	mov	r1, #0
 c103ed8:	e1a00008 	mov	r0, r8
 c103edc:	e28dd00c 	add	sp, sp, #12
 c103ee0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c103ee4:	e12fff1e 	bx	lr
 c103ee8:	e1580001 	cmp	r8, r1
 c103eec:	83a01000 	movhi	r1, #0
 c103ef0:	81a08001 	movhi	r8, r1
 c103ef4:	8afffff7 	bhi	c103ed8 <__udivdi3+0xf8>
 c103ef8:	e1a00008 	mov	r0, r8
 c103efc:	eb0000c4 	bl	c104214 <__clzsi2>
 c103f00:	e2507000 	subs	r7, r0, #0
 c103f04:	1a00003e 	bne	c104004 <__udivdi3+0x224>
 c103f08:	e1580004 	cmp	r8, r4
 c103f0c:	21560005 	cmpcs	r6, r5
 c103f10:	83a01000 	movhi	r1, #0
 c103f14:	93a01001 	movls	r1, #1
 c103f18:	93a08001 	movls	r8, #1
 c103f1c:	91a01007 	movls	r1, r7
 c103f20:	81a08001 	movhi	r8, r1
 c103f24:	eaffffeb 	b	c103ed8 <__udivdi3+0xf8>
 c103f28:	e3520000 	cmp	r2, #0
 c103f2c:	1a000003 	bne	c103f40 <__udivdi3+0x160>
 c103f30:	e3a00001 	mov	r0, #1
 c103f34:	e1a01002 	mov	r1, r2
 c103f38:	ebfffe09 	bl	c103764 <__aeabi_uidiv>
 c103f3c:	e1a0a000 	mov	sl, r0
 c103f40:	e1a0000a 	mov	r0, sl
 c103f44:	eb0000b2 	bl	c104214 <__clzsi2>
 c103f48:	e2503000 	subs	r3, r0, #0
 c103f4c:	1a000075 	bne	c104128 <__udivdi3+0x348>
 c103f50:	e1a0180a 	lsl	r1, sl, #16
 c103f54:	e06a4004 	rsb	r4, sl, r4
 c103f58:	e1a0982a 	lsr	r9, sl, #16
 c103f5c:	e1a06821 	lsr	r6, r1, #16
 c103f60:	e3a07001 	mov	r7, #1
 c103f64:	e1a01009 	mov	r1, r9
 c103f68:	e1a00004 	mov	r0, r4
 c103f6c:	ebfffdfc 	bl	c103764 <__aeabi_uidiv>
 c103f70:	e1a01009 	mov	r1, r9
 c103f74:	e1a05000 	mov	r5, r0
 c103f78:	e1a00004 	mov	r0, r4
 c103f7c:	ebfffe35 	bl	c103858 <__aeabi_uidivmod>
 c103f80:	e0030596 	mul	r3, r6, r5
 c103f84:	e1a0282b 	lsr	r2, fp, #16
 c103f88:	e1824801 	orr	r4, r2, r1, lsl #16
 c103f8c:	e1530004 	cmp	r3, r4
 c103f90:	9a000005 	bls	c103fac <__udivdi3+0x1cc>
 c103f94:	e094400a 	adds	r4, r4, sl
 c103f98:	e2455001 	sub	r5, r5, #1
 c103f9c:	2a000002 	bcs	c103fac <__udivdi3+0x1cc>
 c103fa0:	e1530004 	cmp	r3, r4
 c103fa4:	82455001 	subhi	r5, r5, #1
 c103fa8:	8084400a 	addhi	r4, r4, sl
 c103fac:	e0634004 	rsb	r4, r3, r4
 c103fb0:	e1a01009 	mov	r1, r9
 c103fb4:	e1a00004 	mov	r0, r4
 c103fb8:	ebfffde9 	bl	c103764 <__aeabi_uidiv>
 c103fbc:	e1a01009 	mov	r1, r9
 c103fc0:	e1a08000 	mov	r8, r0
 c103fc4:	e1a00004 	mov	r0, r4
 c103fc8:	ebfffe22 	bl	c103858 <__aeabi_uidivmod>
 c103fcc:	e0060698 	mul	r6, r8, r6
 c103fd0:	e1a0b80b 	lsl	fp, fp, #16
 c103fd4:	e1a0382b 	lsr	r3, fp, #16
 c103fd8:	e183b801 	orr	fp, r3, r1, lsl #16
 c103fdc:	e156000b 	cmp	r6, fp
 c103fe0:	9a000004 	bls	c103ff8 <__udivdi3+0x218>
 c103fe4:	e09bb00a 	adds	fp, fp, sl
 c103fe8:	e2488001 	sub	r8, r8, #1
 c103fec:	2a000001 	bcs	c103ff8 <__udivdi3+0x218>
 c103ff0:	e156000b 	cmp	r6, fp
 c103ff4:	82488001 	subhi	r8, r8, #1
 c103ff8:	e1888805 	orr	r8, r8, r5, lsl #16
 c103ffc:	e1a01007 	mov	r1, r7
 c104000:	eaffffb4 	b	c103ed8 <__udivdi3+0xf8>
 c104004:	e267a020 	rsb	sl, r7, #32
 c104008:	e1a01a36 	lsr	r1, r6, sl
 c10400c:	e1a02a35 	lsr	r2, r5, sl
 c104010:	e1818718 	orr	r8, r1, r8, lsl r7
 c104014:	e1a0ba34 	lsr	fp, r4, sl
 c104018:	e1829714 	orr	r9, r2, r4, lsl r7
 c10401c:	e1a0a828 	lsr	sl, r8, #16
 c104020:	e1a0e808 	lsl	lr, r8, #16
 c104024:	e1a0100a 	mov	r1, sl
 c104028:	e1a0000b 	mov	r0, fp
 c10402c:	e1a0482e 	lsr	r4, lr, #16
 c104030:	e58d9004 	str	r9, [sp, #4]
 c104034:	ebfffdca 	bl	c103764 <__aeabi_uidiv>
 c104038:	e1a0100a 	mov	r1, sl
 c10403c:	e1a09000 	mov	r9, r0
 c104040:	e1a0000b 	mov	r0, fp
 c104044:	ebfffe03 	bl	c103858 <__aeabi_uidivmod>
 c104048:	e0020994 	mul	r2, r4, r9
 c10404c:	e59d0004 	ldr	r0, [sp, #4]
 c104050:	e1a0c820 	lsr	ip, r0, #16
 c104054:	e18cb801 	orr	fp, ip, r1, lsl #16
 c104058:	e152000b 	cmp	r2, fp
 c10405c:	e1a03716 	lsl	r3, r6, r7
 c104060:	9a000002 	bls	c104070 <__udivdi3+0x290>
 c104064:	e09bb008 	adds	fp, fp, r8
 c104068:	e2499001 	sub	r9, r9, #1
 c10406c:	3a000060 	bcc	c1041f4 <__udivdi3+0x414>
 c104070:	e062b00b 	rsb	fp, r2, fp
 c104074:	e1a0100a 	mov	r1, sl
 c104078:	e1a0000b 	mov	r0, fp
 c10407c:	e58d3000 	str	r3, [sp]
 c104080:	ebfffdb7 	bl	c103764 <__aeabi_uidiv>
 c104084:	e1a0100a 	mov	r1, sl
 c104088:	e1a06000 	mov	r6, r0
 c10408c:	e1a0000b 	mov	r0, fp
 c104090:	ebfffdf0 	bl	c103858 <__aeabi_uidivmod>
 c104094:	e0040496 	mul	r4, r6, r4
 c104098:	e59d0004 	ldr	r0, [sp, #4]
 c10409c:	e1a0c800 	lsl	ip, r0, #16
 c1040a0:	e1a0382c 	lsr	r3, ip, #16
 c1040a4:	e1832801 	orr	r2, r3, r1, lsl #16
 c1040a8:	e1540002 	cmp	r4, r2
 c1040ac:	e59d3000 	ldr	r3, [sp]
 c1040b0:	9a000002 	bls	c1040c0 <__udivdi3+0x2e0>
 c1040b4:	e0922008 	adds	r2, r2, r8
 c1040b8:	e2466001 	sub	r6, r6, #1
 c1040bc:	3a000048 	bcc	c1041e4 <__udivdi3+0x404>
 c1040c0:	e0644002 	rsb	r4, r4, r2
 c1040c4:	e1868809 	orr	r8, r6, r9, lsl #16
 c1040c8:	e1a02828 	lsr	r2, r8, #16
 c1040cc:	e1a0e823 	lsr	lr, r3, #16
 c1040d0:	e1c80802 	bic	r0, r8, r2, lsl #16
 c1040d4:	e1c3680e 	bic	r6, r3, lr, lsl #16
 c1040d8:	e0030690 	mul	r3, r0, r6
 c1040dc:	e0060692 	mul	r6, r2, r6
 c1040e0:	e000009e 	mul	r0, lr, r0
 c1040e4:	e00e0e92 	mul	lr, r2, lr
 c1040e8:	e0960000 	adds	r0, r6, r0
 c1040ec:	228ee801 	addcs	lr, lr, #65536	; 0x10000
 c1040f0:	e0933800 	adds	r3, r3, r0, lsl #16
 c1040f4:	e0aee820 	adc	lr, lr, r0, lsr #16
 c1040f8:	e154000e 	cmp	r4, lr
 c1040fc:	3a000006 	bcc	c10411c <__udivdi3+0x33c>
 c104100:	13a02000 	movne	r2, #0
 c104104:	03a02001 	moveq	r2, #1
 c104108:	e1530715 	cmp	r3, r5, lsl r7
 c10410c:	93a01000 	movls	r1, #0
 c104110:	82021001 	andhi	r1, r2, #1
 c104114:	e3510000 	cmp	r1, #0
 c104118:	0affff6e 	beq	c103ed8 <__udivdi3+0xf8>
 c10411c:	e2488001 	sub	r8, r8, #1
 c104120:	e3a01000 	mov	r1, #0
 c104124:	eaffff6b 	b	c103ed8 <__udivdi3+0xf8>
 c104128:	e2639020 	rsb	r9, r3, #32
 c10412c:	e1a0a31a 	lsl	sl, sl, r3
 c104130:	e1a07934 	lsr	r7, r4, r9
 c104134:	e1a08935 	lsr	r8, r5, r9
 c104138:	e1a0982a 	lsr	r9, sl, #16
 c10413c:	e1a0280a 	lsl	r2, sl, #16
 c104140:	e1a01009 	mov	r1, r9
 c104144:	e1a00007 	mov	r0, r7
 c104148:	e1888314 	orr	r8, r8, r4, lsl r3
 c10414c:	e1a0b315 	lsl	fp, r5, r3
 c104150:	e1a06822 	lsr	r6, r2, #16
 c104154:	ebfffd82 	bl	c103764 <__aeabi_uidiv>
 c104158:	e1a01009 	mov	r1, r9
 c10415c:	e1a05000 	mov	r5, r0
 c104160:	e1a00007 	mov	r0, r7
 c104164:	ebfffdbb 	bl	c103858 <__aeabi_uidivmod>
 c104168:	e0030596 	mul	r3, r6, r5
 c10416c:	e1a04828 	lsr	r4, r8, #16
 c104170:	e1844801 	orr	r4, r4, r1, lsl #16
 c104174:	e1530004 	cmp	r3, r4
 c104178:	9a000002 	bls	c104188 <__udivdi3+0x3a8>
 c10417c:	e094400a 	adds	r4, r4, sl
 c104180:	e2455001 	sub	r5, r5, #1
 c104184:	3a00001e 	bcc	c104204 <__udivdi3+0x424>
 c104188:	e0634004 	rsb	r4, r3, r4
 c10418c:	e1a01009 	mov	r1, r9
 c104190:	e1a00004 	mov	r0, r4
 c104194:	ebfffd72 	bl	c103764 <__aeabi_uidiv>
 c104198:	e1a01009 	mov	r1, r9
 c10419c:	e1a07000 	mov	r7, r0
 c1041a0:	e1a00004 	mov	r0, r4
 c1041a4:	ebfffdab 	bl	c103858 <__aeabi_uidivmod>
 c1041a8:	e0030796 	mul	r3, r6, r7
 c1041ac:	e1a00808 	lsl	r0, r8, #16
 c1041b0:	e1a0c820 	lsr	ip, r0, #16
 c1041b4:	e18c4801 	orr	r4, ip, r1, lsl #16
 c1041b8:	e1530004 	cmp	r3, r4
 c1041bc:	9a000005 	bls	c1041d8 <__udivdi3+0x3f8>
 c1041c0:	e094400a 	adds	r4, r4, sl
 c1041c4:	e2477001 	sub	r7, r7, #1
 c1041c8:	2a000002 	bcs	c1041d8 <__udivdi3+0x3f8>
 c1041cc:	e1530004 	cmp	r3, r4
 c1041d0:	82477001 	subhi	r7, r7, #1
 c1041d4:	8084400a 	addhi	r4, r4, sl
 c1041d8:	e0634004 	rsb	r4, r3, r4
 c1041dc:	e1877805 	orr	r7, r7, r5, lsl #16
 c1041e0:	eaffff5f 	b	c103f64 <__udivdi3+0x184>
 c1041e4:	e1540002 	cmp	r4, r2
 c1041e8:	82466001 	subhi	r6, r6, #1
 c1041ec:	80822008 	addhi	r2, r2, r8
 c1041f0:	eaffffb2 	b	c1040c0 <__udivdi3+0x2e0>
 c1041f4:	e152000b 	cmp	r2, fp
 c1041f8:	82499001 	subhi	r9, r9, #1
 c1041fc:	808bb008 	addhi	fp, fp, r8
 c104200:	eaffff9a 	b	c104070 <__udivdi3+0x290>
 c104204:	e1530004 	cmp	r3, r4
 c104208:	82455001 	subhi	r5, r5, #1
 c10420c:	8084400a 	addhi	r4, r4, sl
 c104210:	eaffffdc 	b	c104188 <__udivdi3+0x3a8>

0c104214 <__clzsi2>:
 c104214:	e3a0101c 	mov	r1, #28
 c104218:	e3500801 	cmp	r0, #65536	; 0x10000
 c10421c:	21a00820 	lsrcs	r0, r0, #16
 c104220:	22411010 	subcs	r1, r1, #16
 c104224:	e3500c01 	cmp	r0, #256	; 0x100
 c104228:	21a00420 	lsrcs	r0, r0, #8
 c10422c:	22411008 	subcs	r1, r1, #8
 c104230:	e3500010 	cmp	r0, #16
 c104234:	21a00220 	lsrcs	r0, r0, #4
 c104238:	22411004 	subcs	r1, r1, #4
 c10423c:	e28f2008 	add	r2, pc, #8
 c104240:	e7d20000 	ldrb	r0, [r2, r0]
 c104244:	e0800001 	add	r0, r0, r1
 c104248:	e12fff1e 	bx	lr
 c10424c:	02020304 	.word	0x02020304
 c104250:	01010101 	.word	0x01010101
	...
