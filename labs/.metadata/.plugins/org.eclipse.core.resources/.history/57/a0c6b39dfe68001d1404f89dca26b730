#include <s3c44b0x.h>
#include <s3cev40.h>
#include <rtc.h>

extern void isr_TICK_dummy( void );

void rtc_init( void )
{
    TICNT   = 0x0;
    RTCALM  = 0x0;
    RTCRST  = 0x0;
        
    RTCCON  = 0x1;
    
    BCDYEAR = 0xd;
    BCDMON  = 0x1;
    BCDDAY  = 0x1;
    BCDDATE = 0x2;
    BCDHOUR = 0x0;
    BCDMIN  = 0x0;
    BCDSEC  = 0x0;

    ALMYEAR = 0x0;
    ALMMON  = 0x0;
    ALMDAY  = 0x0;
    ALMHOUR = 0x0;
    ALMMIN  = 0x0;
    ALMSEC  = 0x0;

    RTCCON &= (0 << 1);//revisar todos los que tengan esto que soy un cazurro
}

void rtc_puttime( rtc_time_t *rtc_time )
{
    RTCCON |= 1;
    
    BCDYEAR = (uint32) (rtc_time->year);
    BCDMON  = (uint32) (rtc_time->mon);
    BCDDAY  = (uint32) (rtc_time->mday);
    BCDDATE = (uint32) (rtc_time->wday);
    BCDHOUR = (uint32) (rtc_time->hour);
    BCDMIN  = (uint32) (rtc_time->min);
    BCDSEC  = (uint32) (rtc_time->sec);
        
    RTCCON &= 0;
}

void rtc_gettime( rtc_time_t *rtc_time )
{
    RTCCON |= 1;
    
    rtc_time->year = (uint8)(BCDYEAR);
    rtc_time->mon  = (uint8)(BCDMON);
    rtc_time->mday = (uint8)(BCDDAY);
    rtc_time->wday = (uint8)(BCDDATE);
    rtc_time->hour = (uint8)(BCDHOUR);
    rtc_time->min  = (uint8)(BCDMIN);
    rtc_time->sec  = (uint8)(BCDSEC);
    if( ! rtc_time->sec ){
        rtc_time->year = (uint8)(BCDYEAR);
        rtc_time->mon  = (uint8)(BCDMON);
        rtc_time->mday = (uint8)(BCDDAY);
        rtc_time->wday = (uint8)(BCDDATE);
        rtc_time->hour = (uint8)(BCDHOUR);
        rtc_time->min  = (uint8)(BCDMIN);
        rtc_time->sec  = (uint8)(BCDSEC);
    };

    RTCCON &= 0;
}


void rtc_open( void (*isr)(void), uint8 tick_count )
{
    pISR_TICK = (uint32)(isr);
    I_ISPC    = 1<<1;
    INTMSK   &= 0<<20;
    TICNT     = (1<<7) | tick_count;
}

void rtc_close( void )
{
    TICNT     = 0x0;
    INTMSK   |= 1<<20;
    pISR_TICK = (uint32) isr_TICK_dummy;
}
